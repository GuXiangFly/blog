{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fe45d60a53dc43dff4bc71c1d1bab8283d79ce14","modified":1509535511000},{"_id":"source/CNAME","hash":"f2d25702dbe0099fd11b3bbf729ae0bb3dde9aee","modified":1507972206000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1507972206000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1507972206000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1507972206000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1507972206000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1507972206000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1507972206000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1507972206000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1507972206000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1507972206000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1507972206000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1507972206000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1507972206000},{"_id":"themes/next/_config.yml","hash":"2fd66877b4d11ce3ed219135167f50e01e57e3f1","modified":1517748488000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1507972206000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1507972206000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1507972206000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1512893083000},{"_id":"source/_posts/dsp-infrastructure.md","hash":"f4e406e9a0ed4151ebb7a2b3282acc6de7186a79","modified":1514846224000},{"_id":"source/_posts/executor-infrastructure.md","hash":"97847200430c639b698073f109d81cba4c059883","modified":1513517380000},{"_id":"source/_posts/ffmpeg-guide.md","hash":"5007cbe4a3de198e754eb591709e3fc20bf91b89","modified":1512892958000},{"_id":"source/_posts/gitlab-ci.md","hash":"174f912d5018f8796ed2ff7d4622c31806a640b7","modified":1512892958000},{"_id":"source/_posts/pinpoint.md","hash":"f31a33c576d23c3a2dce8f48bb3144582e43db9f","modified":1512892958000},{"_id":"source/_posts/sonar-mannual.md","hash":"bc2febb01f43a66faccbd308ef23d5d15a1d3bfc","modified":1512892958000},{"_id":"source/_posts/springboot-quartz.md","hash":"785cc849992234559dfb71c26598386eaf9ac0ce","modified":1514846882000},{"_id":"source/_posts/traffic.md","hash":"e36f381c3f00088dba911fcab8e33b4646b3d29f","modified":1517753536000},{"_id":"source/_posts/xmpp.md","hash":"a35b594110e107263829e73d1eb410c7e0eb657c","modified":1514845614000},{"_id":"source/about/index.md","hash":"7b9c762ebe687d4b460118b6274fee78767cbd26","modified":1509535568000},{"_id":"source/categories/index.md","hash":"15f3a75443ef981fbfa24caf7e29e0129d401854","modified":1507972206000},{"_id":"source/tags/index.md","hash":"05a9d97f0aabfdb27dedc92aa99dacd3cac33fd3","modified":1507972206000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1507972206000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1507972206000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1507972206000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1507972206000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1507972206000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1507972206000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1507972206000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1507972206000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1507972206000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1507972206000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1507972206000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1507972206000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1507972206000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1507972206000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1507972206000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1507972206000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1507972206000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1507972206000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1507972206000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1507972206000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1507972206000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1507972206000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1507972206000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1507972206000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1507972206000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1507972206000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1507972206000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1507972206000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1507972206000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1507972206000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1507972206000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1507972206000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1507972206000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1507972206000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1507972206000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1507972206000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1507972206000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1507972206000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1507972206000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1507972206000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1507972206000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1507972206000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1507972206000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1507972206000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1507972206000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1507972206000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1507972206000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1507972206000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1507972206000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1507972206000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1507972206000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1507972206000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1507972206000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1507972206000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1507972206000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1507972206000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1507972206000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1507972206000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1507972206000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1507972206000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1507972206000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1507972206000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1507972206000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1507972206000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1507972206000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1507972206000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1507972206000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1507972206000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1507972206000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1507972206000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1507972206000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1507972206000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1507972206000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1507972206000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1507972206000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1507972206000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1507972206000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507972206000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1507972206000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1507972206000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1507972206000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1507972206000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1507972206000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1507972206000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1507972206000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1507972206000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1507972206000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1507972206000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1507972206000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1507972206000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1507972206000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1507972206000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1507972206000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1507972206000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1507972206000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1507972206000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1507972206000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1507972206000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1507972206000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1507972206000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1507972206000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1507972206000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1507972206000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1507972206000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1507972206000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1507972206000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1507972206000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1507972206000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1507972206000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1507972206000},{"_id":"themes/next/source/js/src/love.js","hash":"d2cb21e05c635a0bbbbb4dd6a37bd63506588fa3","modified":1507972206000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1507972206000},{"_id":"themes/next/source/js/src/particle.js","hash":"f31dbad1426d9fb448a575e8debf8a5ad46068f2","modified":1507972206000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1507972206000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1507972206000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1507972206000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1507972206000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1507972206000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1507972206000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1507972206000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1507972206000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1507972206000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1507972206000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1507972206000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1507972206000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1507972206000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1507972206000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1507972206000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1507972206000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1507972206000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1507972206000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1507972206000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1507972206000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1507972206000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1507972206000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1507972206000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1507972206000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1507972206000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1507972206000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1507972206000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1507972206000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1507972206000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1507972206000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1507972206000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1507972206000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1507972206000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1507972206000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1507972206000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1507972206000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1507972206000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1507972206000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1507972206000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1507972206000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1507972206000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1507972206000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1507972206000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1507972206000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1507972206000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1507972206000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1507972206000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1507972206000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1507972206000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1507972206000},{"_id":"public/search.xml","hash":"8a793593fdb680e362ea39cad03713873aec127d","modified":1517753527133},{"_id":"public/about/index.html","hash":"2a497929dbdeaf6f4a9b73fe8d8ebb6e7df99db1","modified":1517753259682},{"_id":"public/categories/index.html","hash":"11023d575adb6f52e94eb3a33a845abca4865329","modified":1517753259682},{"_id":"public/tags/index.html","hash":"dad23a227d6d0925dc03a68fdea67a8d0c317fb8","modified":1517753259682},{"_id":"public/2017/02/16/springboot-quartz/index.html","hash":"70039bea457b051617aa86585422e65874ff4c44","modified":1517753259682},{"_id":"public/2017/01/16/dsp-infrastructure/index.html","hash":"26ef8cbc280d2a07f3e889a06ab3f027cd34e44d","modified":1517753259682},{"_id":"public/2017/01/12/executor-infrastructure/index.html","hash":"71008a0a890f34a8abe3534341032baf7c43c69b","modified":1517753259683},{"_id":"public/2017/01/07/xmpp/index.html","hash":"5b5564592ff5414fbb2c6555f7872de8bfe105fe","modified":1517753259683},{"_id":"public/2016/12/28/pinpoint/index.html","hash":"9018717ba053840432949c6a3b4835c901f6fa95","modified":1517753259683},{"_id":"public/2016/12/17/sonar-mannual/index.html","hash":"b37874c67bea1ee12a0153251d92c80ab347c1f2","modified":1517753259683},{"_id":"public/2016/11/27/gitlab-ci/index.html","hash":"0534bf6b2d8ed1b27d0a372331a1c90fac84918d","modified":1517753259683},{"_id":"public/2016/10/14/ffmpeg-guide/index.html","hash":"445eada6ed64bf1bab6698650e4dd431ca542310","modified":1517753259683},{"_id":"public/2016/10/14/traffic/index.html","hash":"0df636efa32c7525d2faf3e9efe77c8f0462f317","modified":1517753527152},{"_id":"public/index.html","hash":"15f03c263e6c86d8e5d7f01297a5429b164f45b1","modified":1517753259684},{"_id":"public/archives/index.html","hash":"ff20237e2d0ff81f25cf182ec0f3032b49e18a9b","modified":1517753259684},{"_id":"public/archives/2016/index.html","hash":"43b97dd4d14ea6182436173aa626caf4f104bc72","modified":1517753259684},{"_id":"public/archives/2016/10/index.html","hash":"0f316efc9f6af46a4a11248d633e98511457f8d7","modified":1517753259684},{"_id":"public/archives/2016/11/index.html","hash":"ac023c0b9fbc635f4ba1f24360cf2a2e68c7ea4d","modified":1517753259684},{"_id":"public/archives/2016/12/index.html","hash":"8155143f2648c92fc4de5424d659e26bce09c991","modified":1517753259684},{"_id":"public/archives/2017/index.html","hash":"175142db1b42e9b373b75959bb8c32b0ea27e7d0","modified":1517753259684},{"_id":"public/archives/2017/01/index.html","hash":"13485ae3575464524580ad23f97a57afd899b41f","modified":1517753259684},{"_id":"public/archives/2017/02/index.html","hash":"2b06fce8ae2eafb4b727920d2bd8ace67d0182e1","modified":1517753259684},{"_id":"public/tags/高可用架构/index.html","hash":"1719809e934f4792b6277b107935e175dc700bf2","modified":1517753259684},{"_id":"public/tags/高并发/index.html","hash":"69cc3fdf1594cc179a4202026b4fd83e74517d0f","modified":1517753259685},{"_id":"public/tags/视频压缩/index.html","hash":"62ee5ab134e82fa66834432d986eed12727c3049","modified":1517753259685},{"_id":"public/tags/持续集成/index.html","hash":"1904c2b4ccecd39818bf50984f575f80ef9ef7ad","modified":1517753259685},{"_id":"public/tags/性能监控/index.html","hash":"aeded0b51a3026e13848ac3141a904da1a96dfa5","modified":1517753259685},{"_id":"public/tags/代码质量分析/index.html","hash":"be2ac94f05ed640f52e49232c4f46bb1e7d0923c","modified":1517753259685},{"_id":"public/tags/Java/index.html","hash":"9f824b2413777472bfe1de04a530631e03fa3133","modified":1517753259685},{"_id":"public/tags/计算广告/index.html","hash":"f70bb95311f2d5caf0b026ba4db3b7f8ad4459f4","modified":1517753259685},{"_id":"public/tags/通信协议/index.html","hash":"eac8c132db081c14426336584c565754c04c1e01","modified":1517753259685},{"_id":"public/categories/技术杂谈/index.html","hash":"98a073ed6bc4e776e5459568403b1a73e3eb7edf","modified":1517753259685},{"_id":"public/categories/Java/index.html","hash":"36ef37d96ffd76e0bed0e383957a291b948b8754","modified":1517753259685},{"_id":"public/CNAME","hash":"f2d25702dbe0099fd11b3bbf729ae0bb3dde9aee","modified":1517753259694},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517753259694},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517753259694},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517753259694},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517753259694},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517753259694},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517753259694},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517753259694},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517753259694},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517753259694},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517753259695},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517753259695},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517753259695},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517753259695},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517753259695},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1517753259695},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517753259695},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517753259695},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517753259695},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517753259695},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517753259696},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517753259696},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517753259696},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517753259696},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1517753259696},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1517753259696},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1517753259696},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1517753259696},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517753259696},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1517753260225},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1517753260231},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517753260245},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517753260245},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1517753260245},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517753260245},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1517753260245},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517753260245},{"_id":"public/js/src/love.js","hash":"d2cb21e05c635a0bbbbb4dd6a37bd63506588fa3","modified":1517753260245},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1517753260245},{"_id":"public/js/src/particle.js","hash":"f31dbad1426d9fb448a575e8debf8a5ad46068f2","modified":1517753260245},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1517753260245},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517753260245},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517753260245},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1517753260245},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1517753260245},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1517753260245},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1517753260245},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1517753260246},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1517753260246},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1517753260246},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1517753260246},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1517753260246},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1517753260246},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1517753260246},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1517753260246},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517753260246},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1517753260247},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1517753260247},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1517753260247},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517753260247},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517753260247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517753260247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1517753260247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1517753260247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517753260247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1517753260247},{"_id":"public/lib/fastclick/README.html","hash":"d6e90449a2c09f3033f7e43d68b0cc8208e22e09","modified":1517753260247},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1517753260247},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1517753260247},{"_id":"public/css/main.css","hash":"8baa6c5a749f5289cf298508eeb026834ae449c3","modified":1517753260247},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1517753260247},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1517753260247},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1517753260247},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517753260247},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517753260247},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1517753260247},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517753260248},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1517753260248},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1517753260248},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1517753260248},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1517753260248},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1517753260248},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1517753260248},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1517753260248},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1517753260248},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517753260248},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1517753260248},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1517753260248},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1517753260249},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1517753260249},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1517753260249},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1517753260262}],"Category":[{"name":"技术杂谈","_id":"cjd8usypb0004e1fyrfbru0uz"},{"name":"Java","_id":"cjd8usypg000ae1fylnhf0zas"}],"Data":[],"Page":[{"title":"about","date":"2017-09-26T16:14:47.000Z","type":"about","comments":0,"_content":"### 个人经历\n2015.07～至今, 新浪微博 后台研发工程师 话题研发\n\n2013.09～2015.06, 武汉大学 硕士 电子与通信工程\n\n2009.09～2013.06, 武汉大学 本科 通信工程","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-09-27 00:14:47\ntype: \"about\"\ncomments: false\n---\n### 个人经历\n2015.07～至今, 新浪微博 后台研发工程师 话题研发\n\n2013.09～2015.06, 武汉大学 硕士 电子与通信工程\n\n2009.09～2013.06, 武汉大学 本科 通信工程","updated":"2017-11-01T11:26:08.000Z","path":"about/index.html","layout":"page","_id":"cjd8usyp40001e1fypp388whc","content":"<h3 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h3><p>2015.07～至今, 新浪微博 后台研发工程师 话题研发</p>\n<p>2013.09～2015.06, 武汉大学 硕士 电子与通信工程</p>\n<p>2009.09～2013.06, 武汉大学 本科 通信工程</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h3><p>2015.07～至今, 新浪微博 后台研发工程师 话题研发</p>\n<p>2013.09～2015.06, 武汉大学 硕士 电子与通信工程</p>\n<p>2009.09～2013.06, 武汉大学 本科 通信工程</p>\n"},{"title":"categories","date":"2017-09-26T16:19:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-09-27 00:19:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-10-14T09:10:06.000Z","path":"categories/index.html","layout":"page","_id":"cjd8usyp90003e1fywe9rocs7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-09-26T16:14:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-09-27 00:14:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-10-14T09:10:06.000Z","path":"tags/index.html","layout":"page","_id":"cjd8usypd0007e1fyan5f0mfp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"互联网DSP广告系统及关键技术分析","date":"2017-01-16T03:06:33.000Z","_content":"在互联网广告产业中，DSP是一个系统，也是一种在线广告平台。它服务于广告主，帮助广告主在互联网或者移动互联网上进行广告投放，DSP可以使广告主更简单便捷地遵循统一的竞价和反馈方式，对位于多家广告交易平台的在线广告,以合理的价格实时购买高质量的广告库存。\n\nDSP让广告主可以通过一个统一的接口来管理一个或者多个Ad Exchange账号，甚至DSP可以帮助广告主来管理Ad Exchange的账号，提供全方位的服务。\n![微博粉丝通](http://wx1.sinaimg.cn/mw1024/78d85414ly1flvx60fs44j21is0skhdt.jpg \"图1  DSP平台\")\n<!-- more -->\n\n## 程序化购买\n首先先介绍下程序化购买广告系统的相关概念:\n\n* Ad Network(广告网络)。聚合多种展示类广告媒体资源，旨在提升广告主媒体购买的效率。\n* ADX(Ad Exchange, 广告交易平台)。集合不同网络以及网站整合出的技术平台，旨在促成广告主以及网站主以竞价方式进行的媒体购买。\n* DSP(Demand Side Platform，广告需求方平台)。DSP为广告主提供跨媒体、跨平台的广告投放平台，通过数据整合分析实现基于用户的精准投放，并不断优化投放效果。\n* SSP(Supply Side Platform，供应方平台)。SSP主要是针对广告主的服务提供商，协助网站拥有者将其广告位资源加入广告交易平台，并通过数据化方式管理其广告资源，旨在提升网站拥有者从广告交易平台中获取的收入。\n* RTB(Real Time Bidding，实时竞价)。实时竞价是DSP、广告交易平台在网络广告投放中才用的主要售卖方式，会在极短的时间内通过对目标受众竞价对方式获得该次广告的展现。\n* DMP(Data Management Platform，数据管理平台)。将分散的多方数据纳入统一的技术平台，并对数据进行标准化和细分、便签化管理，为DSP等提供数据支持，获得更好的投放效果。\n\n![微博粉丝通](http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0f2xedj218g0m8wfk.jpg \"图2  程序化购买供需业务流\")\n\n## DSP的特点\n\n下图是DSP平台的广告投放流程，投放过程中涉及到广告受众，媒体网站，adx和dsp，分别标注了广告投放各阶段伴随发生的事件。从1~7步之间只允许100ms之内的延时，否则广告受众就会觉得网页加载速度太慢而选择离开。\n\n![微博粉丝通](http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1hj2u52ej20m507ft9e.jpg \"图3  dsp广告投放流程\")\n一般市面上比较优秀的dsp存在以下几个特点\n\n#### 全方面的投放优化手段\n基于人群浏览轨迹综合分析，把握住用户的短期购买倾向、长期偏好等，在此基础上可动态调整定向人群等，能够实现多种全方位的定向，目前常见的dsp广告样式如下\n![微博粉丝通](http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0a3l0rj20p00bpgnm.jpg \"图4  dsp广告样式\")\n\n#### 媒体资源丰富\nDSP可以投放到各家媒体的各个广告位，涵盖到目前网络上的各个站点，包括各种新闻传媒和社交工具端均可以看到dsp广告的身影，如此多的广告资源接入对于广告主而言具有很好的广告投放资源。\n![微博粉丝通](http://wx2.sinaimg.cn/mw1024/78d85414ly1fn1i05k4c3j20jg08c0tb.jpg \"图4  dsp支持的媒体资源\")\n\n#### 精准投放\n先进的用户定向技术(Audience Targeting)技术。服务于广告主或者广告主代理的DSP，则需要对Ad Exchange每一次传过来的曝光机会，根据关于这次曝光的相关数据来决定竞价策略。这些数据包括本次曝光所在网站、页面的信息，以及更为关键本次曝光的受众人群属性，人群定向的分析直接决定DSP的竞价策略。DSP在整个过程中，通过运用自己人群定向技术来分析，所得出的分析结果将直接影响广告主的广告投放效果\n\n\n## DSP系统架构\n![dsp系统架构](https://pic1.zhimg.com/4c838f8e3b8912dd360476974922f683_r.jpg \"图5  dsp系统架构\")\n\nDSP整个流程中的角色包括广告主网站，媒体网站，广告网络和DSP，以及DSP内部的相关模块，如：RTB引擎，业务平台，日志收集系统，DMP，CM和反作弊系统。\n\n投放前DSP会要求在广告主网站布码，同时在DSP的业务平台中录入广告投放的需求，如投放金额，投放排期，投放定向（如地域，兴趣，年龄等），最高限价。\n\n当访客（即潜在的消费者）从左上角访问广告主网站开始，访客在广告主网站上的行为会被收集，同时DSP会与ADX和SSP进行Cookie Mapping，形成日志进行处理，形成回头客相关的行为数据标签。\n\n当访客完成对广告主网站的访问，去其他媒体网站进行访问时，相应的媒体广告位根据事先嵌入的广告代码向广告网络发起广告请求，广告网络会将广告请求封装成http头 pb体的格式向多个DSP发起竞价请求。\n\n当DSP接到竞价请求时会根据与广告网络约定的pb格式进行解包，拆解出相关的字段进行匹配，根据之前相关媒体积累的点击率结合点击率预测模型对出价进行预测，找出平台内在此次竞价请求能让平台利益最大化的广告主的创意进行投放，返回给广告网络出价与广告代码\n\n广告网络会在特定时间内（通常是50~100毫秒）根据多个DSP的出价高低，以第二名价格多一分的价格让出价最高的dsp胜出，并将广告代码中的展现宏和点击宏进行替换（替换过程中会根据事先与dsp约定好的公钥对价格进行加密，以防止第三方篡改和窃听）\n\n广告网络将广告代码返回给媒体，媒体会将广告代码放置在js对应的位置进行展现，展现和点击的过程中会先后触发广告网络和胜出DSP的展现代码，广告网络和DSP分别接收到展现请求会对相应的展现进行计费操作（月底会相互进行对账）\n\nDSP内部会根据收集到的展现和点击进行计费操作，形成相应的报表；而浏览、展现、点击的记录会分别进行收集形成日志，经过ETL由DMP进行抽取和分析，形成媒体数据，用户标签，CookieMatch数据以及回头客用户标签数据，这些数据会在投放过程中作为RTB竞价的参考依据。\n\n整个投放过程中其实还有一些其他的模块出现如CookieMapping、反作弊，动态创意、网站分析系统。只不过这些系统不是在主干流程上，后续单独进行描述和分析。\n\n为了保证投放，DSP系统实现了多机房部署的结构，南北方机房分别在杭州和北京部署RTB引擎、点击率预测与相关的展现点击收集节点。投放活动相关数据通过Redis进行缓存，多机房进行准实时同步，媒体展现点击数据通过kafka队列进行推送，通过Consumer进行消费统计，最后通过媒体数据分发集群分发到多个机房进行使用。\n\n## RTB投放引擎架构\nRTB引擎是DSP系统的核心，是实现高并发实时反馈的关键，RTB对外以HTTP服务形式暴露接口，当媒体上的js被触发，adx/ssp收到js请求后会将请求封装成http头+pb体(protocol buffer,谷歌定义的序列化数据交换格式)的方式作为客户端连接RTB，RTB对http消息按照事先约定解包在内部依靠相关数据进行计算，最终返回pb或json格式的出价和广告代码给广告交易平台。RTB 需要支持高并发（每天百亿级别请求）和低延时（50ms之内需要反馈）。\n\n当时我们的RTB采用Linux C++开发，通过Adapter适配器层解耦适应不同的SSP/adx，算法池内部拆分成五层，五层之间相互正交，算法模块允许热插拔，编译完成的动态链接库可根据配置文件的变化实时进行加载和卸载，允许多算法链并行拆分流量进行A/B测试，流量处理过程中会对流经不同算法链的流量打上不同的算法标签，并在后续展现，点击过程中持续带上此标签用于后续效果的跟踪和分析。****\n\n## DMP数据处理架构\ntodo\n\n## 用户画像\ntodo\n\n## 广告行业的反作弊\ntodo\n\n## 参考资料\n1.[《高可用架构》2.7章](http://www.360doc.com/content/15/0806/07/2909773_489803369.shtml)","source":"_posts/dsp-infrastructure.md","raw":"---\ntitle: 互联网DSP广告系统及关键技术分析\ndate: 2017-01-16 11:06:33\ncategories:\n- 技术杂谈\ntags:\n- 高可用架构\n---\n在互联网广告产业中，DSP是一个系统，也是一种在线广告平台。它服务于广告主，帮助广告主在互联网或者移动互联网上进行广告投放，DSP可以使广告主更简单便捷地遵循统一的竞价和反馈方式，对位于多家广告交易平台的在线广告,以合理的价格实时购买高质量的广告库存。\n\nDSP让广告主可以通过一个统一的接口来管理一个或者多个Ad Exchange账号，甚至DSP可以帮助广告主来管理Ad Exchange的账号，提供全方位的服务。\n![微博粉丝通](http://wx1.sinaimg.cn/mw1024/78d85414ly1flvx60fs44j21is0skhdt.jpg \"图1  DSP平台\")\n<!-- more -->\n\n## 程序化购买\n首先先介绍下程序化购买广告系统的相关概念:\n\n* Ad Network(广告网络)。聚合多种展示类广告媒体资源，旨在提升广告主媒体购买的效率。\n* ADX(Ad Exchange, 广告交易平台)。集合不同网络以及网站整合出的技术平台，旨在促成广告主以及网站主以竞价方式进行的媒体购买。\n* DSP(Demand Side Platform，广告需求方平台)。DSP为广告主提供跨媒体、跨平台的广告投放平台，通过数据整合分析实现基于用户的精准投放，并不断优化投放效果。\n* SSP(Supply Side Platform，供应方平台)。SSP主要是针对广告主的服务提供商，协助网站拥有者将其广告位资源加入广告交易平台，并通过数据化方式管理其广告资源，旨在提升网站拥有者从广告交易平台中获取的收入。\n* RTB(Real Time Bidding，实时竞价)。实时竞价是DSP、广告交易平台在网络广告投放中才用的主要售卖方式，会在极短的时间内通过对目标受众竞价对方式获得该次广告的展现。\n* DMP(Data Management Platform，数据管理平台)。将分散的多方数据纳入统一的技术平台，并对数据进行标准化和细分、便签化管理，为DSP等提供数据支持，获得更好的投放效果。\n\n![微博粉丝通](http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0f2xedj218g0m8wfk.jpg \"图2  程序化购买供需业务流\")\n\n## DSP的特点\n\n下图是DSP平台的广告投放流程，投放过程中涉及到广告受众，媒体网站，adx和dsp，分别标注了广告投放各阶段伴随发生的事件。从1~7步之间只允许100ms之内的延时，否则广告受众就会觉得网页加载速度太慢而选择离开。\n\n![微博粉丝通](http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1hj2u52ej20m507ft9e.jpg \"图3  dsp广告投放流程\")\n一般市面上比较优秀的dsp存在以下几个特点\n\n#### 全方面的投放优化手段\n基于人群浏览轨迹综合分析，把握住用户的短期购买倾向、长期偏好等，在此基础上可动态调整定向人群等，能够实现多种全方位的定向，目前常见的dsp广告样式如下\n![微博粉丝通](http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0a3l0rj20p00bpgnm.jpg \"图4  dsp广告样式\")\n\n#### 媒体资源丰富\nDSP可以投放到各家媒体的各个广告位，涵盖到目前网络上的各个站点，包括各种新闻传媒和社交工具端均可以看到dsp广告的身影，如此多的广告资源接入对于广告主而言具有很好的广告投放资源。\n![微博粉丝通](http://wx2.sinaimg.cn/mw1024/78d85414ly1fn1i05k4c3j20jg08c0tb.jpg \"图4  dsp支持的媒体资源\")\n\n#### 精准投放\n先进的用户定向技术(Audience Targeting)技术。服务于广告主或者广告主代理的DSP，则需要对Ad Exchange每一次传过来的曝光机会，根据关于这次曝光的相关数据来决定竞价策略。这些数据包括本次曝光所在网站、页面的信息，以及更为关键本次曝光的受众人群属性，人群定向的分析直接决定DSP的竞价策略。DSP在整个过程中，通过运用自己人群定向技术来分析，所得出的分析结果将直接影响广告主的广告投放效果\n\n\n## DSP系统架构\n![dsp系统架构](https://pic1.zhimg.com/4c838f8e3b8912dd360476974922f683_r.jpg \"图5  dsp系统架构\")\n\nDSP整个流程中的角色包括广告主网站，媒体网站，广告网络和DSP，以及DSP内部的相关模块，如：RTB引擎，业务平台，日志收集系统，DMP，CM和反作弊系统。\n\n投放前DSP会要求在广告主网站布码，同时在DSP的业务平台中录入广告投放的需求，如投放金额，投放排期，投放定向（如地域，兴趣，年龄等），最高限价。\n\n当访客（即潜在的消费者）从左上角访问广告主网站开始，访客在广告主网站上的行为会被收集，同时DSP会与ADX和SSP进行Cookie Mapping，形成日志进行处理，形成回头客相关的行为数据标签。\n\n当访客完成对广告主网站的访问，去其他媒体网站进行访问时，相应的媒体广告位根据事先嵌入的广告代码向广告网络发起广告请求，广告网络会将广告请求封装成http头 pb体的格式向多个DSP发起竞价请求。\n\n当DSP接到竞价请求时会根据与广告网络约定的pb格式进行解包，拆解出相关的字段进行匹配，根据之前相关媒体积累的点击率结合点击率预测模型对出价进行预测，找出平台内在此次竞价请求能让平台利益最大化的广告主的创意进行投放，返回给广告网络出价与广告代码\n\n广告网络会在特定时间内（通常是50~100毫秒）根据多个DSP的出价高低，以第二名价格多一分的价格让出价最高的dsp胜出，并将广告代码中的展现宏和点击宏进行替换（替换过程中会根据事先与dsp约定好的公钥对价格进行加密，以防止第三方篡改和窃听）\n\n广告网络将广告代码返回给媒体，媒体会将广告代码放置在js对应的位置进行展现，展现和点击的过程中会先后触发广告网络和胜出DSP的展现代码，广告网络和DSP分别接收到展现请求会对相应的展现进行计费操作（月底会相互进行对账）\n\nDSP内部会根据收集到的展现和点击进行计费操作，形成相应的报表；而浏览、展现、点击的记录会分别进行收集形成日志，经过ETL由DMP进行抽取和分析，形成媒体数据，用户标签，CookieMatch数据以及回头客用户标签数据，这些数据会在投放过程中作为RTB竞价的参考依据。\n\n整个投放过程中其实还有一些其他的模块出现如CookieMapping、反作弊，动态创意、网站分析系统。只不过这些系统不是在主干流程上，后续单独进行描述和分析。\n\n为了保证投放，DSP系统实现了多机房部署的结构，南北方机房分别在杭州和北京部署RTB引擎、点击率预测与相关的展现点击收集节点。投放活动相关数据通过Redis进行缓存，多机房进行准实时同步，媒体展现点击数据通过kafka队列进行推送，通过Consumer进行消费统计，最后通过媒体数据分发集群分发到多个机房进行使用。\n\n## RTB投放引擎架构\nRTB引擎是DSP系统的核心，是实现高并发实时反馈的关键，RTB对外以HTTP服务形式暴露接口，当媒体上的js被触发，adx/ssp收到js请求后会将请求封装成http头+pb体(protocol buffer,谷歌定义的序列化数据交换格式)的方式作为客户端连接RTB，RTB对http消息按照事先约定解包在内部依靠相关数据进行计算，最终返回pb或json格式的出价和广告代码给广告交易平台。RTB 需要支持高并发（每天百亿级别请求）和低延时（50ms之内需要反馈）。\n\n当时我们的RTB采用Linux C++开发，通过Adapter适配器层解耦适应不同的SSP/adx，算法池内部拆分成五层，五层之间相互正交，算法模块允许热插拔，编译完成的动态链接库可根据配置文件的变化实时进行加载和卸载，允许多算法链并行拆分流量进行A/B测试，流量处理过程中会对流经不同算法链的流量打上不同的算法标签，并在后续展现，点击过程中持续带上此标签用于后续效果的跟踪和分析。****\n\n## DMP数据处理架构\ntodo\n\n## 用户画像\ntodo\n\n## 广告行业的反作弊\ntodo\n\n## 参考资料\n1.[《高可用架构》2.7章](http://www.360doc.com/content/15/0806/07/2909773_489803369.shtml)","slug":"dsp-infrastructure","published":1,"updated":"2018-01-01T22:37:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usyp00000e1fyj0eqvi6o","content":"<p>在互联网广告产业中，DSP是一个系统，也是一种在线广告平台。它服务于广告主，帮助广告主在互联网或者移动互联网上进行广告投放，DSP可以使广告主更简单便捷地遵循统一的竞价和反馈方式，对位于多家广告交易平台的在线广告,以合理的价格实时购买高质量的广告库存。</p>\n<p>DSP让广告主可以通过一个统一的接口来管理一个或者多个Ad Exchange账号，甚至DSP可以帮助广告主来管理Ad Exchange的账号，提供全方位的服务。<br><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1flvx60fs44j21is0skhdt.jpg\" alt=\"微博粉丝通\" title=\"图1  DSP平台\"><br><a id=\"more\"></a></p>\n<h2 id=\"程序化购买\"><a href=\"#程序化购买\" class=\"headerlink\" title=\"程序化购买\"></a>程序化购买</h2><p>首先先介绍下程序化购买广告系统的相关概念:</p>\n<ul>\n<li>Ad Network(广告网络)。聚合多种展示类广告媒体资源，旨在提升广告主媒体购买的效率。</li>\n<li>ADX(Ad Exchange, 广告交易平台)。集合不同网络以及网站整合出的技术平台，旨在促成广告主以及网站主以竞价方式进行的媒体购买。</li>\n<li>DSP(Demand Side Platform，广告需求方平台)。DSP为广告主提供跨媒体、跨平台的广告投放平台，通过数据整合分析实现基于用户的精准投放，并不断优化投放效果。</li>\n<li>SSP(Supply Side Platform，供应方平台)。SSP主要是针对广告主的服务提供商，协助网站拥有者将其广告位资源加入广告交易平台，并通过数据化方式管理其广告资源，旨在提升网站拥有者从广告交易平台中获取的收入。</li>\n<li>RTB(Real Time Bidding，实时竞价)。实时竞价是DSP、广告交易平台在网络广告投放中才用的主要售卖方式，会在极短的时间内通过对目标受众竞价对方式获得该次广告的展现。</li>\n<li>DMP(Data Management Platform，数据管理平台)。将分散的多方数据纳入统一的技术平台，并对数据进行标准化和细分、便签化管理，为DSP等提供数据支持，获得更好的投放效果。</li>\n</ul>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0f2xedj218g0m8wfk.jpg\" alt=\"微博粉丝通\" title=\"图2  程序化购买供需业务流\"></p>\n<h2 id=\"DSP的特点\"><a href=\"#DSP的特点\" class=\"headerlink\" title=\"DSP的特点\"></a>DSP的特点</h2><p>下图是DSP平台的广告投放流程，投放过程中涉及到广告受众，媒体网站，adx和dsp，分别标注了广告投放各阶段伴随发生的事件。从1~7步之间只允许100ms之内的延时，否则广告受众就会觉得网页加载速度太慢而选择离开。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1hj2u52ej20m507ft9e.jpg\" alt=\"微博粉丝通\" title=\"图3  dsp广告投放流程\"><br>一般市面上比较优秀的dsp存在以下几个特点</p>\n<h4 id=\"全方面的投放优化手段\"><a href=\"#全方面的投放优化手段\" class=\"headerlink\" title=\"全方面的投放优化手段\"></a>全方面的投放优化手段</h4><p>基于人群浏览轨迹综合分析，把握住用户的短期购买倾向、长期偏好等，在此基础上可动态调整定向人群等，能够实现多种全方位的定向，目前常见的dsp广告样式如下<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0a3l0rj20p00bpgnm.jpg\" alt=\"微博粉丝通\" title=\"图4  dsp广告样式\"></p>\n<h4 id=\"媒体资源丰富\"><a href=\"#媒体资源丰富\" class=\"headerlink\" title=\"媒体资源丰富\"></a>媒体资源丰富</h4><p>DSP可以投放到各家媒体的各个广告位，涵盖到目前网络上的各个站点，包括各种新闻传媒和社交工具端均可以看到dsp广告的身影，如此多的广告资源接入对于广告主而言具有很好的广告投放资源。<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fn1i05k4c3j20jg08c0tb.jpg\" alt=\"微博粉丝通\" title=\"图4  dsp支持的媒体资源\"></p>\n<h4 id=\"精准投放\"><a href=\"#精准投放\" class=\"headerlink\" title=\"精准投放\"></a>精准投放</h4><p>先进的用户定向技术(Audience Targeting)技术。服务于广告主或者广告主代理的DSP，则需要对Ad Exchange每一次传过来的曝光机会，根据关于这次曝光的相关数据来决定竞价策略。这些数据包括本次曝光所在网站、页面的信息，以及更为关键本次曝光的受众人群属性，人群定向的分析直接决定DSP的竞价策略。DSP在整个过程中，通过运用自己人群定向技术来分析，所得出的分析结果将直接影响广告主的广告投放效果</p>\n<h2 id=\"DSP系统架构\"><a href=\"#DSP系统架构\" class=\"headerlink\" title=\"DSP系统架构\"></a>DSP系统架构</h2><p><img src=\"https://pic1.zhimg.com/4c838f8e3b8912dd360476974922f683_r.jpg\" alt=\"dsp系统架构\" title=\"图5  dsp系统架构\"></p>\n<p>DSP整个流程中的角色包括广告主网站，媒体网站，广告网络和DSP，以及DSP内部的相关模块，如：RTB引擎，业务平台，日志收集系统，DMP，CM和反作弊系统。</p>\n<p>投放前DSP会要求在广告主网站布码，同时在DSP的业务平台中录入广告投放的需求，如投放金额，投放排期，投放定向（如地域，兴趣，年龄等），最高限价。</p>\n<p>当访客（即潜在的消费者）从左上角访问广告主网站开始，访客在广告主网站上的行为会被收集，同时DSP会与ADX和SSP进行Cookie Mapping，形成日志进行处理，形成回头客相关的行为数据标签。</p>\n<p>当访客完成对广告主网站的访问，去其他媒体网站进行访问时，相应的媒体广告位根据事先嵌入的广告代码向广告网络发起广告请求，广告网络会将广告请求封装成http头 pb体的格式向多个DSP发起竞价请求。</p>\n<p>当DSP接到竞价请求时会根据与广告网络约定的pb格式进行解包，拆解出相关的字段进行匹配，根据之前相关媒体积累的点击率结合点击率预测模型对出价进行预测，找出平台内在此次竞价请求能让平台利益最大化的广告主的创意进行投放，返回给广告网络出价与广告代码</p>\n<p>广告网络会在特定时间内（通常是50~100毫秒）根据多个DSP的出价高低，以第二名价格多一分的价格让出价最高的dsp胜出，并将广告代码中的展现宏和点击宏进行替换（替换过程中会根据事先与dsp约定好的公钥对价格进行加密，以防止第三方篡改和窃听）</p>\n<p>广告网络将广告代码返回给媒体，媒体会将广告代码放置在js对应的位置进行展现，展现和点击的过程中会先后触发广告网络和胜出DSP的展现代码，广告网络和DSP分别接收到展现请求会对相应的展现进行计费操作（月底会相互进行对账）</p>\n<p>DSP内部会根据收集到的展现和点击进行计费操作，形成相应的报表；而浏览、展现、点击的记录会分别进行收集形成日志，经过ETL由DMP进行抽取和分析，形成媒体数据，用户标签，CookieMatch数据以及回头客用户标签数据，这些数据会在投放过程中作为RTB竞价的参考依据。</p>\n<p>整个投放过程中其实还有一些其他的模块出现如CookieMapping、反作弊，动态创意、网站分析系统。只不过这些系统不是在主干流程上，后续单独进行描述和分析。</p>\n<p>为了保证投放，DSP系统实现了多机房部署的结构，南北方机房分别在杭州和北京部署RTB引擎、点击率预测与相关的展现点击收集节点。投放活动相关数据通过Redis进行缓存，多机房进行准实时同步，媒体展现点击数据通过kafka队列进行推送，通过Consumer进行消费统计，最后通过媒体数据分发集群分发到多个机房进行使用。</p>\n<h2 id=\"RTB投放引擎架构\"><a href=\"#RTB投放引擎架构\" class=\"headerlink\" title=\"RTB投放引擎架构\"></a>RTB投放引擎架构</h2><p>RTB引擎是DSP系统的核心，是实现高并发实时反馈的关键，RTB对外以HTTP服务形式暴露接口，当媒体上的js被触发，adx/ssp收到js请求后会将请求封装成http头+pb体(protocol buffer,谷歌定义的序列化数据交换格式)的方式作为客户端连接RTB，RTB对http消息按照事先约定解包在内部依靠相关数据进行计算，最终返回pb或json格式的出价和广告代码给广告交易平台。RTB 需要支持高并发（每天百亿级别请求）和低延时（50ms之内需要反馈）。</p>\n<p>当时我们的RTB采用Linux C++开发，通过Adapter适配器层解耦适应不同的SSP/adx，算法池内部拆分成五层，五层之间相互正交，算法模块允许热插拔，编译完成的动态链接库可根据配置文件的变化实时进行加载和卸载，允许多算法链并行拆分流量进行A/B测试，流量处理过程中会对流经不同算法链的流量打上不同的算法标签，并在后续展现，点击过程中持续带上此标签用于后续效果的跟踪和分析。<em>**</em></p>\n<h2 id=\"DMP数据处理架构\"><a href=\"#DMP数据处理架构\" class=\"headerlink\" title=\"DMP数据处理架构\"></a>DMP数据处理架构</h2><p>todo</p>\n<h2 id=\"用户画像\"><a href=\"#用户画像\" class=\"headerlink\" title=\"用户画像\"></a>用户画像</h2><p>todo</p>\n<h2 id=\"广告行业的反作弊\"><a href=\"#广告行业的反作弊\" class=\"headerlink\" title=\"广告行业的反作弊\"></a>广告行业的反作弊</h2><p>todo</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.<a href=\"http://www.360doc.com/content/15/0806/07/2909773_489803369.shtml\" target=\"_blank\" rel=\"external\">《高可用架构》2.7章</a></p>\n","site":{"data":{}},"excerpt":"<p>在互联网广告产业中，DSP是一个系统，也是一种在线广告平台。它服务于广告主，帮助广告主在互联网或者移动互联网上进行广告投放，DSP可以使广告主更简单便捷地遵循统一的竞价和反馈方式，对位于多家广告交易平台的在线广告,以合理的价格实时购买高质量的广告库存。</p>\n<p>DSP让广告主可以通过一个统一的接口来管理一个或者多个Ad Exchange账号，甚至DSP可以帮助广告主来管理Ad Exchange的账号，提供全方位的服务。<br><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1flvx60fs44j21is0skhdt.jpg\" alt=\"微博粉丝通\" title=\"图1  DSP平台\"><br>","more":"</p>\n<h2 id=\"程序化购买\"><a href=\"#程序化购买\" class=\"headerlink\" title=\"程序化购买\"></a>程序化购买</h2><p>首先先介绍下程序化购买广告系统的相关概念:</p>\n<ul>\n<li>Ad Network(广告网络)。聚合多种展示类广告媒体资源，旨在提升广告主媒体购买的效率。</li>\n<li>ADX(Ad Exchange, 广告交易平台)。集合不同网络以及网站整合出的技术平台，旨在促成广告主以及网站主以竞价方式进行的媒体购买。</li>\n<li>DSP(Demand Side Platform，广告需求方平台)。DSP为广告主提供跨媒体、跨平台的广告投放平台，通过数据整合分析实现基于用户的精准投放，并不断优化投放效果。</li>\n<li>SSP(Supply Side Platform，供应方平台)。SSP主要是针对广告主的服务提供商，协助网站拥有者将其广告位资源加入广告交易平台，并通过数据化方式管理其广告资源，旨在提升网站拥有者从广告交易平台中获取的收入。</li>\n<li>RTB(Real Time Bidding，实时竞价)。实时竞价是DSP、广告交易平台在网络广告投放中才用的主要售卖方式，会在极短的时间内通过对目标受众竞价对方式获得该次广告的展现。</li>\n<li>DMP(Data Management Platform，数据管理平台)。将分散的多方数据纳入统一的技术平台，并对数据进行标准化和细分、便签化管理，为DSP等提供数据支持，获得更好的投放效果。</li>\n</ul>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0f2xedj218g0m8wfk.jpg\" alt=\"微博粉丝通\" title=\"图2  程序化购买供需业务流\"></p>\n<h2 id=\"DSP的特点\"><a href=\"#DSP的特点\" class=\"headerlink\" title=\"DSP的特点\"></a>DSP的特点</h2><p>下图是DSP平台的广告投放流程，投放过程中涉及到广告受众，媒体网站，adx和dsp，分别标注了广告投放各阶段伴随发生的事件。从1~7步之间只允许100ms之内的延时，否则广告受众就会觉得网页加载速度太慢而选择离开。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1hj2u52ej20m507ft9e.jpg\" alt=\"微博粉丝通\" title=\"图3  dsp广告投放流程\"><br>一般市面上比较优秀的dsp存在以下几个特点</p>\n<h4 id=\"全方面的投放优化手段\"><a href=\"#全方面的投放优化手段\" class=\"headerlink\" title=\"全方面的投放优化手段\"></a>全方面的投放优化手段</h4><p>基于人群浏览轨迹综合分析，把握住用户的短期购买倾向、长期偏好等，在此基础上可动态调整定向人群等，能够实现多种全方位的定向，目前常见的dsp广告样式如下<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fn1i0a3l0rj20p00bpgnm.jpg\" alt=\"微博粉丝通\" title=\"图4  dsp广告样式\"></p>\n<h4 id=\"媒体资源丰富\"><a href=\"#媒体资源丰富\" class=\"headerlink\" title=\"媒体资源丰富\"></a>媒体资源丰富</h4><p>DSP可以投放到各家媒体的各个广告位，涵盖到目前网络上的各个站点，包括各种新闻传媒和社交工具端均可以看到dsp广告的身影，如此多的广告资源接入对于广告主而言具有很好的广告投放资源。<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fn1i05k4c3j20jg08c0tb.jpg\" alt=\"微博粉丝通\" title=\"图4  dsp支持的媒体资源\"></p>\n<h4 id=\"精准投放\"><a href=\"#精准投放\" class=\"headerlink\" title=\"精准投放\"></a>精准投放</h4><p>先进的用户定向技术(Audience Targeting)技术。服务于广告主或者广告主代理的DSP，则需要对Ad Exchange每一次传过来的曝光机会，根据关于这次曝光的相关数据来决定竞价策略。这些数据包括本次曝光所在网站、页面的信息，以及更为关键本次曝光的受众人群属性，人群定向的分析直接决定DSP的竞价策略。DSP在整个过程中，通过运用自己人群定向技术来分析，所得出的分析结果将直接影响广告主的广告投放效果</p>\n<h2 id=\"DSP系统架构\"><a href=\"#DSP系统架构\" class=\"headerlink\" title=\"DSP系统架构\"></a>DSP系统架构</h2><p><img src=\"https://pic1.zhimg.com/4c838f8e3b8912dd360476974922f683_r.jpg\" alt=\"dsp系统架构\" title=\"图5  dsp系统架构\"></p>\n<p>DSP整个流程中的角色包括广告主网站，媒体网站，广告网络和DSP，以及DSP内部的相关模块，如：RTB引擎，业务平台，日志收集系统，DMP，CM和反作弊系统。</p>\n<p>投放前DSP会要求在广告主网站布码，同时在DSP的业务平台中录入广告投放的需求，如投放金额，投放排期，投放定向（如地域，兴趣，年龄等），最高限价。</p>\n<p>当访客（即潜在的消费者）从左上角访问广告主网站开始，访客在广告主网站上的行为会被收集，同时DSP会与ADX和SSP进行Cookie Mapping，形成日志进行处理，形成回头客相关的行为数据标签。</p>\n<p>当访客完成对广告主网站的访问，去其他媒体网站进行访问时，相应的媒体广告位根据事先嵌入的广告代码向广告网络发起广告请求，广告网络会将广告请求封装成http头 pb体的格式向多个DSP发起竞价请求。</p>\n<p>当DSP接到竞价请求时会根据与广告网络约定的pb格式进行解包，拆解出相关的字段进行匹配，根据之前相关媒体积累的点击率结合点击率预测模型对出价进行预测，找出平台内在此次竞价请求能让平台利益最大化的广告主的创意进行投放，返回给广告网络出价与广告代码</p>\n<p>广告网络会在特定时间内（通常是50~100毫秒）根据多个DSP的出价高低，以第二名价格多一分的价格让出价最高的dsp胜出，并将广告代码中的展现宏和点击宏进行替换（替换过程中会根据事先与dsp约定好的公钥对价格进行加密，以防止第三方篡改和窃听）</p>\n<p>广告网络将广告代码返回给媒体，媒体会将广告代码放置在js对应的位置进行展现，展现和点击的过程中会先后触发广告网络和胜出DSP的展现代码，广告网络和DSP分别接收到展现请求会对相应的展现进行计费操作（月底会相互进行对账）</p>\n<p>DSP内部会根据收集到的展现和点击进行计费操作，形成相应的报表；而浏览、展现、点击的记录会分别进行收集形成日志，经过ETL由DMP进行抽取和分析，形成媒体数据，用户标签，CookieMatch数据以及回头客用户标签数据，这些数据会在投放过程中作为RTB竞价的参考依据。</p>\n<p>整个投放过程中其实还有一些其他的模块出现如CookieMapping、反作弊，动态创意、网站分析系统。只不过这些系统不是在主干流程上，后续单独进行描述和分析。</p>\n<p>为了保证投放，DSP系统实现了多机房部署的结构，南北方机房分别在杭州和北京部署RTB引擎、点击率预测与相关的展现点击收集节点。投放活动相关数据通过Redis进行缓存，多机房进行准实时同步，媒体展现点击数据通过kafka队列进行推送，通过Consumer进行消费统计，最后通过媒体数据分发集群分发到多个机房进行使用。</p>\n<h2 id=\"RTB投放引擎架构\"><a href=\"#RTB投放引擎架构\" class=\"headerlink\" title=\"RTB投放引擎架构\"></a>RTB投放引擎架构</h2><p>RTB引擎是DSP系统的核心，是实现高并发实时反馈的关键，RTB对外以HTTP服务形式暴露接口，当媒体上的js被触发，adx/ssp收到js请求后会将请求封装成http头+pb体(protocol buffer,谷歌定义的序列化数据交换格式)的方式作为客户端连接RTB，RTB对http消息按照事先约定解包在内部依靠相关数据进行计算，最终返回pb或json格式的出价和广告代码给广告交易平台。RTB 需要支持高并发（每天百亿级别请求）和低延时（50ms之内需要反馈）。</p>\n<p>当时我们的RTB采用Linux C++开发，通过Adapter适配器层解耦适应不同的SSP/adx，算法池内部拆分成五层，五层之间相互正交，算法模块允许热插拔，编译完成的动态链接库可根据配置文件的变化实时进行加载和卸载，允许多算法链并行拆分流量进行A/B测试，流量处理过程中会对流经不同算法链的流量打上不同的算法标签，并在后续展现，点击过程中持续带上此标签用于后续效果的跟踪和分析。<em>**</em></p>\n<h2 id=\"DMP数据处理架构\"><a href=\"#DMP数据处理架构\" class=\"headerlink\" title=\"DMP数据处理架构\"></a>DMP数据处理架构</h2><p>todo</p>\n<h2 id=\"用户画像\"><a href=\"#用户画像\" class=\"headerlink\" title=\"用户画像\"></a>用户画像</h2><p>todo</p>\n<h2 id=\"广告行业的反作弊\"><a href=\"#广告行业的反作弊\" class=\"headerlink\" title=\"广告行业的反作弊\"></a>广告行业的反作弊</h2><p>todo</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.<a href=\"http://www.360doc.com/content/15/0806/07/2909773_489803369.shtml\" target=\"_blank\" rel=\"external\">《高可用架构》2.7章</a></p>"},{"title":"Java并发-Executors框架和线程池","date":"2017-01-12T03:28:11.000Z","_content":"为了避免系统频繁的创建和销毁线程，通常会让创建的线程进行复用。一般我们进行数据库开发的时候，为了避免每次数据库查询都重新建立和销毁数据库连接，我们可以利用数据库连接池维护一些数据连接，让其长期保持在一个激活的状态，当需要使用数据库的时候，并不是创建一个连接，而是从连接池中获取一个可用的连接。\n\n线程池也是和数据库连接池类似的概念。线程池中总有几个活跃的线程，当你需要使用线程时，可以直接从池子里随便拿出一个空闲的线程，完成任务后将线程退回到池子。\n## Executors框架\nEexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。JDK提供了一整套的Executor框架来进行线程控制，其主要成员如下：\n![Executor框架结构图](http://img.blog.csdn.net/20160607192300746 \"图1 Executor框架结构图\")\n其中：\n\n* Executor 执行器接口，该接口定义执行Runnable任务的方式。\n* ExecutorService 该接口定义提供对Executor的服务。\n* ScheduledExecutorService 定时调度接口。\n* AbstractExecutorService 执行框架抽象类。\n* ThreadPoolExecutor JDK中线程池的具体实现。\n* Executors 线程池工厂类。\n\nExecutorService的生命周期包括三种状态：运行、关闭、终止。创建后便进入运行状态，当调用了shutdown()方法时，便进入关闭状态，此时意味着ExecutorService不再接受新的任务，但它还在执行已经提交了的任务，当素有已经提交了的任务执行完后，便到达终止状态。如果不调用shutdown()方法，ExecutorService会一直处在运行状态，不断接收新的任务，执行新的任务，服务器端一般不需要关闭它，保持一直运行即可。\n\nExecutor框架提供了各种类型的线程池，主要有以下几个工厂方法：\n\n```Java\n/***创建固定大小的线程池***/\npublic static ExecutorServcie newFixedThreadPool(int nThread);\n/***单线程的线程池***/\npublic static ExecutorServcie newSingleThreadExecutor();\n/***可缓存的线程池***/\npublic static ExecutorServcie newCachedThreadPool();\n/***定时任务调度的线程池***/\npublic static ExecutorServcie newSingleThreadScheduledExecutor();\n/***单线程的定时任务调度线程池***/\npublic static ExecutorServcie newScheduledThreadPool(int corePoolSize);\n\n```\n\n###  newFixedThreadPool\n返回一个包含指定数目线程的线程池，如果任务数量多于线程数目，那么没有没有执行的任务必须等待，直到有任务完成为止。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程，简单的展示一下该类线程池的使用\n \n```Java\npublic class ThreadPoolDemo {\n\n    public static void main(String[] args) {\n        int poolSize = 5;\n        ExecutorService es = Executors.newFixedThreadPool(poolSize);\n        for(int i = 0;i < 10;i++) {\n            es.submit(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(\"thread begin\");\n                }\n            });\n        }\n\n    }\n}\n\n```\n### newSingleThreadExecutor\n该方法返回一个只有一个线程的线程池，若多于一个任务被执行到该线程池，任务会被保存在一个任务队列，等到线程空闲的时候按照先入先出的顺序执行，适用于需要顺序执行的场景。\n### newCachedThreadPool\n该方法返回一个可根据实际情况调整线程数量的线程池，适用于线程池的线程数量不确定，但是又需要即时执行的场景，若当前有空闲线程可复用，则会优先使用可复用的线程，否则会创建新的线程处理任务(<font color=red>PS:如果使用不当会有OOM的风险)</font>。\n\n### newSingleThreadScheduledExecutor\n该方法返回一个ScheduledExecutorService对象，线程池大小为1, ScheduledExecutorService对象拓展了在给定时间定时执行某任务的功能，例如在某个固定的延时之后执行，或者周期性执行某个任务，其任务调度的方式有三种：\n\n* schedule() 在给定的时间，对任务执行一次调度\n* scheduleAtFixedRate() 按照一定的频率进行调度，类似于linux的定时任务，以执行时间为起点，每个一定的周期执行，它不会关注上一次执行的状态，适用于能准确估计任务执行时间的场景。\n* scheduleWithFixedDelay() 在上一次任务结束后，在经过delay时间后进行调度，它需要知道上一次任务执行的状态，适用于调度任务执行时间不确定的场景。\n\n```java\npublic static void main(String[] args) {\n        int coreSize = 10;  // the number of threads to keep in the pool\n        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor();\n        \n        //ses.scheduleWithFixedDelay(\n        ses.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"just test\");\n            }\n        }, 0, 2, TimeUnit.SECONDS);\n    }\n```\n### newScheduledThreadPool\n该方法返回一个ScheduledExecutorService对象，和newSingleThreadScheduledExecutor的区别在于可以指定线程数量\n\n## 线程池的内部实现\n对于以上介绍的核心的几个线程池，尽管在功能上具有不同的特点，但是其内部实现均使用了ThreadPoolExecutor实现，下面给出几个线程池的实现方式：\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                 0L, TimeUnit.MILLISECONDS,\n                                 new LinkedBlockingQueue<Runnable>());\n}\n    \npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n\npublic static ExecutorService newSingleThreadExecutor() {\n     return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n}\n\n```\n以上的实现代码可以看到，核心的线程实现都是ThreadPoolExecutor的封装，其构造函数如下\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)\n}\n```\n各个参数的含义如下：\n\n* corePoolSize: 指定线程池中的线程数量。\n* maximumPoolSize: 指定线程池中的最大线程数量。\n* keepAliveTime: 当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间，即超过corePoolSize的空闲线程，在多长时间内，会被销毁。\n* unit: keepAliveTime的单位。\n* workQueue: 任务队列，被提交但尚未执行的任务。\n* threadFactory: 线程工厂，用于创建线程，一般默认即可。\n* handler: 拒绝策略。当任务来不及处理时候如何拒绝任务\n\n### 任务队列\nworkQueue用于存放Runnable对象，它是一个BlockingQueue接口的对象，可以使用以下几种几种BlockingQueue。\n\n* 直接提交的队列：通过SynchronousQueue队列实现，该队列没有容量，因此每次提交的任务都不会真实的保存，如果没有空闲的线程，则会尝试创建新的线程，如果达到进程的最大值，则会执行拒绝策略，如果使用这种队列，往往需要设置较大的maximumPoolSize。\n* 有界的任务队列：通过ArrayBlockingQueue实现。由于是数组，所以其构造需要指定容量参数。当有新的任务需要执行时，如果线程池的线程数小于corePoolSize，则会创建新的线程，反之，则将该任务加入队列，如果队列装满时，则会将线程数提升到maximumPoolSize后，就不会再增加，后续仍有新任务执行则直接执行拒绝策略。\n* 无界的任务队列：通过LinkedBlockingQueue实现。由于是无解的任务队列，当系统的线程数小于corePoolSize数时，线程池会生成新的线程执行任务，反之，则任务直接加入队列进行等待，一但任务处理速度跟不上线程的创建速度，无界队列会无限增长，直到耗尽系统内存。\n* 优先任务队列：通过PriorityBlockingQueue实现，它是一个特殊的无界队列，它可以根据自身任务的优先级瞬息先后执行而不用考虑先进先出。\n\n结合目前的介绍，可以分析出newFixedThreadPool()由于固定了线程池，其使用了LinkedBlockingQueue作为任务队列。\n\nnewSingleThreadExecutor()返回的单进程线程池，是线程池数量为1的newFixedThreadPool()。\n\nnewCachedThreadPool()返回了corePoolSize为0，maximumPoolSize为无穷大的线程池，其将任务加入SynchronousQueue队列，而SynchronousQueue队列是直接提交的队列，它会迫使线程池增加新的线程执行任务。\n\n### 拒绝策略\n前面介绍到的，当任务数量超过系统实际承载压力时，这个时候对于后续进来的任务就需要进行拒绝，避免系统压力太大而直接崩掉，jdk内置的拒绝策略包含以下四种：\n\n* AbortPolicy策略: 直接抛出一场，阻止系统正常工作。\n* CallerRunsPolicy策略: 只要线程池未关闭，会直接在调用者线程中运行当前被丢弃的任务，虽然并不会丢弃任务，但是，任务提交线程的性能会急剧下降。\n* DiscardOledestPolicy策略: 丢弃最老的一个请求，也就是被执行的一个任务，并尝试再次提交当前任务。\n* DiscardPolicy策略: 丢弃无法处理的任务，不予任何处理。\n\n如果以上的策略无法满足需求，完全可以自定义拒绝策略，下面代码简单的演示自定义线程池和拒绝策略的使用：\n\n```java\npublic static void main(String[] args) {\n    ExecutorService es = new ThreadPoolExecutor(0, 100, 0L, TimeUnit.MILLISECONDS,\n           new SynchronousQueue<>(),\n           new ThreadFactory() {\n                    @Override\n                    public Thread newThread(Runnable r) {\n                    \t //  自定义线程生产\n                        return null;\n                    }\n\n           },\n           new RejectedExecutionHandler() {\n                    @Override\n                    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n\t\t\t\t\t\t\t// 自定义拒绝策略\n                    }\n           });\n    }\n```\n\n## 参考资料\n1. Java高并发程序设计","source":"_posts/executor-infrastructure.md","raw":"---\ntitle: Java并发-Executors框架和线程池\ndate: 2017-01-12 11:28:11\ncategories:\n- Java\ntags:\n- 高并发\n---\n为了避免系统频繁的创建和销毁线程，通常会让创建的线程进行复用。一般我们进行数据库开发的时候，为了避免每次数据库查询都重新建立和销毁数据库连接，我们可以利用数据库连接池维护一些数据连接，让其长期保持在一个激活的状态，当需要使用数据库的时候，并不是创建一个连接，而是从连接池中获取一个可用的连接。\n\n线程池也是和数据库连接池类似的概念。线程池中总有几个活跃的线程，当你需要使用线程时，可以直接从池子里随便拿出一个空闲的线程，完成任务后将线程退回到池子。\n## Executors框架\nEexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。JDK提供了一整套的Executor框架来进行线程控制，其主要成员如下：\n![Executor框架结构图](http://img.blog.csdn.net/20160607192300746 \"图1 Executor框架结构图\")\n其中：\n\n* Executor 执行器接口，该接口定义执行Runnable任务的方式。\n* ExecutorService 该接口定义提供对Executor的服务。\n* ScheduledExecutorService 定时调度接口。\n* AbstractExecutorService 执行框架抽象类。\n* ThreadPoolExecutor JDK中线程池的具体实现。\n* Executors 线程池工厂类。\n\nExecutorService的生命周期包括三种状态：运行、关闭、终止。创建后便进入运行状态，当调用了shutdown()方法时，便进入关闭状态，此时意味着ExecutorService不再接受新的任务，但它还在执行已经提交了的任务，当素有已经提交了的任务执行完后，便到达终止状态。如果不调用shutdown()方法，ExecutorService会一直处在运行状态，不断接收新的任务，执行新的任务，服务器端一般不需要关闭它，保持一直运行即可。\n\nExecutor框架提供了各种类型的线程池，主要有以下几个工厂方法：\n\n```Java\n/***创建固定大小的线程池***/\npublic static ExecutorServcie newFixedThreadPool(int nThread);\n/***单线程的线程池***/\npublic static ExecutorServcie newSingleThreadExecutor();\n/***可缓存的线程池***/\npublic static ExecutorServcie newCachedThreadPool();\n/***定时任务调度的线程池***/\npublic static ExecutorServcie newSingleThreadScheduledExecutor();\n/***单线程的定时任务调度线程池***/\npublic static ExecutorServcie newScheduledThreadPool(int corePoolSize);\n\n```\n\n###  newFixedThreadPool\n返回一个包含指定数目线程的线程池，如果任务数量多于线程数目，那么没有没有执行的任务必须等待，直到有任务完成为止。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程，简单的展示一下该类线程池的使用\n \n```Java\npublic class ThreadPoolDemo {\n\n    public static void main(String[] args) {\n        int poolSize = 5;\n        ExecutorService es = Executors.newFixedThreadPool(poolSize);\n        for(int i = 0;i < 10;i++) {\n            es.submit(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(\"thread begin\");\n                }\n            });\n        }\n\n    }\n}\n\n```\n### newSingleThreadExecutor\n该方法返回一个只有一个线程的线程池，若多于一个任务被执行到该线程池，任务会被保存在一个任务队列，等到线程空闲的时候按照先入先出的顺序执行，适用于需要顺序执行的场景。\n### newCachedThreadPool\n该方法返回一个可根据实际情况调整线程数量的线程池，适用于线程池的线程数量不确定，但是又需要即时执行的场景，若当前有空闲线程可复用，则会优先使用可复用的线程，否则会创建新的线程处理任务(<font color=red>PS:如果使用不当会有OOM的风险)</font>。\n\n### newSingleThreadScheduledExecutor\n该方法返回一个ScheduledExecutorService对象，线程池大小为1, ScheduledExecutorService对象拓展了在给定时间定时执行某任务的功能，例如在某个固定的延时之后执行，或者周期性执行某个任务，其任务调度的方式有三种：\n\n* schedule() 在给定的时间，对任务执行一次调度\n* scheduleAtFixedRate() 按照一定的频率进行调度，类似于linux的定时任务，以执行时间为起点，每个一定的周期执行，它不会关注上一次执行的状态，适用于能准确估计任务执行时间的场景。\n* scheduleWithFixedDelay() 在上一次任务结束后，在经过delay时间后进行调度，它需要知道上一次任务执行的状态，适用于调度任务执行时间不确定的场景。\n\n```java\npublic static void main(String[] args) {\n        int coreSize = 10;  // the number of threads to keep in the pool\n        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor();\n        \n        //ses.scheduleWithFixedDelay(\n        ses.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"just test\");\n            }\n        }, 0, 2, TimeUnit.SECONDS);\n    }\n```\n### newScheduledThreadPool\n该方法返回一个ScheduledExecutorService对象，和newSingleThreadScheduledExecutor的区别在于可以指定线程数量\n\n## 线程池的内部实现\n对于以上介绍的核心的几个线程池，尽管在功能上具有不同的特点，但是其内部实现均使用了ThreadPoolExecutor实现，下面给出几个线程池的实现方式：\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                 0L, TimeUnit.MILLISECONDS,\n                                 new LinkedBlockingQueue<Runnable>());\n}\n    \npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n\npublic static ExecutorService newSingleThreadExecutor() {\n     return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n}\n\n```\n以上的实现代码可以看到，核心的线程实现都是ThreadPoolExecutor的封装，其构造函数如下\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)\n}\n```\n各个参数的含义如下：\n\n* corePoolSize: 指定线程池中的线程数量。\n* maximumPoolSize: 指定线程池中的最大线程数量。\n* keepAliveTime: 当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间，即超过corePoolSize的空闲线程，在多长时间内，会被销毁。\n* unit: keepAliveTime的单位。\n* workQueue: 任务队列，被提交但尚未执行的任务。\n* threadFactory: 线程工厂，用于创建线程，一般默认即可。\n* handler: 拒绝策略。当任务来不及处理时候如何拒绝任务\n\n### 任务队列\nworkQueue用于存放Runnable对象，它是一个BlockingQueue接口的对象，可以使用以下几种几种BlockingQueue。\n\n* 直接提交的队列：通过SynchronousQueue队列实现，该队列没有容量，因此每次提交的任务都不会真实的保存，如果没有空闲的线程，则会尝试创建新的线程，如果达到进程的最大值，则会执行拒绝策略，如果使用这种队列，往往需要设置较大的maximumPoolSize。\n* 有界的任务队列：通过ArrayBlockingQueue实现。由于是数组，所以其构造需要指定容量参数。当有新的任务需要执行时，如果线程池的线程数小于corePoolSize，则会创建新的线程，反之，则将该任务加入队列，如果队列装满时，则会将线程数提升到maximumPoolSize后，就不会再增加，后续仍有新任务执行则直接执行拒绝策略。\n* 无界的任务队列：通过LinkedBlockingQueue实现。由于是无解的任务队列，当系统的线程数小于corePoolSize数时，线程池会生成新的线程执行任务，反之，则任务直接加入队列进行等待，一但任务处理速度跟不上线程的创建速度，无界队列会无限增长，直到耗尽系统内存。\n* 优先任务队列：通过PriorityBlockingQueue实现，它是一个特殊的无界队列，它可以根据自身任务的优先级瞬息先后执行而不用考虑先进先出。\n\n结合目前的介绍，可以分析出newFixedThreadPool()由于固定了线程池，其使用了LinkedBlockingQueue作为任务队列。\n\nnewSingleThreadExecutor()返回的单进程线程池，是线程池数量为1的newFixedThreadPool()。\n\nnewCachedThreadPool()返回了corePoolSize为0，maximumPoolSize为无穷大的线程池，其将任务加入SynchronousQueue队列，而SynchronousQueue队列是直接提交的队列，它会迫使线程池增加新的线程执行任务。\n\n### 拒绝策略\n前面介绍到的，当任务数量超过系统实际承载压力时，这个时候对于后续进来的任务就需要进行拒绝，避免系统压力太大而直接崩掉，jdk内置的拒绝策略包含以下四种：\n\n* AbortPolicy策略: 直接抛出一场，阻止系统正常工作。\n* CallerRunsPolicy策略: 只要线程池未关闭，会直接在调用者线程中运行当前被丢弃的任务，虽然并不会丢弃任务，但是，任务提交线程的性能会急剧下降。\n* DiscardOledestPolicy策略: 丢弃最老的一个请求，也就是被执行的一个任务，并尝试再次提交当前任务。\n* DiscardPolicy策略: 丢弃无法处理的任务，不予任何处理。\n\n如果以上的策略无法满足需求，完全可以自定义拒绝策略，下面代码简单的演示自定义线程池和拒绝策略的使用：\n\n```java\npublic static void main(String[] args) {\n    ExecutorService es = new ThreadPoolExecutor(0, 100, 0L, TimeUnit.MILLISECONDS,\n           new SynchronousQueue<>(),\n           new ThreadFactory() {\n                    @Override\n                    public Thread newThread(Runnable r) {\n                    \t //  自定义线程生产\n                        return null;\n                    }\n\n           },\n           new RejectedExecutionHandler() {\n                    @Override\n                    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n\t\t\t\t\t\t\t// 自定义拒绝策略\n                    }\n           });\n    }\n```\n\n## 参考资料\n1. Java高并发程序设计","slug":"executor-infrastructure","published":1,"updated":"2017-12-17T13:29:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usyp70002e1fytjud8bad","content":"<p>为了避免系统频繁的创建和销毁线程，通常会让创建的线程进行复用。一般我们进行数据库开发的时候，为了避免每次数据库查询都重新建立和销毁数据库连接，我们可以利用数据库连接池维护一些数据连接，让其长期保持在一个激活的状态，当需要使用数据库的时候，并不是创建一个连接，而是从连接池中获取一个可用的连接。</p>\n<p>线程池也是和数据库连接池类似的概念。线程池中总有几个活跃的线程，当你需要使用线程时，可以直接从池子里随便拿出一个空闲的线程，完成任务后将线程退回到池子。</p>\n<h2 id=\"Executors框架\"><a href=\"#Executors框架\" class=\"headerlink\" title=\"Executors框架\"></a>Executors框架</h2><p>Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。JDK提供了一整套的Executor框架来进行线程控制，其主要成员如下：<br><img src=\"http://img.blog.csdn.net/20160607192300746\" alt=\"Executor框架结构图\" title=\"图1 Executor框架结构图\"><br>其中：</p>\n<ul>\n<li>Executor 执行器接口，该接口定义执行Runnable任务的方式。</li>\n<li>ExecutorService 该接口定义提供对Executor的服务。</li>\n<li>ScheduledExecutorService 定时调度接口。</li>\n<li>AbstractExecutorService 执行框架抽象类。</li>\n<li>ThreadPoolExecutor JDK中线程池的具体实现。</li>\n<li>Executors 线程池工厂类。</li>\n</ul>\n<p>ExecutorService的生命周期包括三种状态：运行、关闭、终止。创建后便进入运行状态，当调用了shutdown()方法时，便进入关闭状态，此时意味着ExecutorService不再接受新的任务，但它还在执行已经提交了的任务，当素有已经提交了的任务执行完后，便到达终止状态。如果不调用shutdown()方法，ExecutorService会一直处在运行状态，不断接收新的任务，执行新的任务，服务器端一般不需要关闭它，保持一直运行即可。</p>\n<p>Executor框架提供了各种类型的线程池，主要有以下几个工厂方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***创建固定大小的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThread)</span></span>;</div><div class=\"line\"><span class=\"comment\">/***单线程的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">/***可缓存的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">/***定时任务调度的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">/***单线程的定时任务调度线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h3><p>返回一个包含指定数目线程的线程池，如果任务数量多于线程数目，那么没有没有执行的任务必须等待，直到有任务完成为止。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程，简单的展示一下该类线程池的使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> poolSize = <span class=\"number\">5</span>;</div><div class=\"line\">        ExecutorService es = Executors.newFixedThreadPool(poolSize);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++) &#123;</div><div class=\"line\">            es.submit(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"thread begin\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"newSingleThreadExecutor\"><a href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"></a>newSingleThreadExecutor</h3><p>该方法返回一个只有一个线程的线程池，若多于一个任务被执行到该线程池，任务会被保存在一个任务队列，等到线程空闲的时候按照先入先出的顺序执行，适用于需要顺序执行的场景。</p>\n<h3 id=\"newCachedThreadPool\"><a href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"></a>newCachedThreadPool</h3><p>该方法返回一个可根据实际情况调整线程数量的线程池，适用于线程池的线程数量不确定，但是又需要即时执行的场景，若当前有空闲线程可复用，则会优先使用可复用的线程，否则会创建新的线程处理任务(<font color=\"red\">PS:如果使用不当会有OOM的风险)</font>。</p>\n<h3 id=\"newSingleThreadScheduledExecutor\"><a href=\"#newSingleThreadScheduledExecutor\" class=\"headerlink\" title=\"newSingleThreadScheduledExecutor\"></a>newSingleThreadScheduledExecutor</h3><p>该方法返回一个ScheduledExecutorService对象，线程池大小为1, ScheduledExecutorService对象拓展了在给定时间定时执行某任务的功能，例如在某个固定的延时之后执行，或者周期性执行某个任务，其任务调度的方式有三种：</p>\n<ul>\n<li>schedule() 在给定的时间，对任务执行一次调度</li>\n<li>scheduleAtFixedRate() 按照一定的频率进行调度，类似于linux的定时任务，以执行时间为起点，每个一定的周期执行，它不会关注上一次执行的状态，适用于能准确估计任务执行时间的场景。</li>\n<li>scheduleWithFixedDelay() 在上一次任务结束后，在经过delay时间后进行调度，它需要知道上一次任务执行的状态，适用于调度任务执行时间不确定的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> coreSize = <span class=\"number\">10</span>;  <span class=\"comment\">// the number of threads to keep in the pool</span></div><div class=\"line\">        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//ses.scheduleWithFixedDelay(</span></div><div class=\"line\">        ses.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"just test\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">2</span>, TimeUnit.SECONDS);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"newScheduledThreadPool\"><a href=\"#newScheduledThreadPool\" class=\"headerlink\" title=\"newScheduledThreadPool\"></a>newScheduledThreadPool</h3><p>该方法返回一个ScheduledExecutorService对象，和newSingleThreadScheduledExecutor的区别在于可以指定线程数量</p>\n<h2 id=\"线程池的内部实现\"><a href=\"#线程池的内部实现\" class=\"headerlink\" title=\"线程池的内部实现\"></a>线程池的内部实现</h2><p>对于以上介绍的核心的几个线程池，尽管在功能上具有不同的特点，但是其内部实现均使用了ThreadPoolExecutor实现，下面给出几个线程池的实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                 <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                 <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</div><div class=\"line\">            (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</div><div class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的实现代码可以看到，核心的线程实现都是ThreadPoolExecutor的封装，其构造函数如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span></span></div><div class=\"line\"><span class=\"function\">&#125;</span></div></pre></td></tr></table></figure>\n<p>各个参数的含义如下：</p>\n<ul>\n<li>corePoolSize: 指定线程池中的线程数量。</li>\n<li>maximumPoolSize: 指定线程池中的最大线程数量。</li>\n<li>keepAliveTime: 当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间，即超过corePoolSize的空闲线程，在多长时间内，会被销毁。</li>\n<li>unit: keepAliveTime的单位。</li>\n<li>workQueue: 任务队列，被提交但尚未执行的任务。</li>\n<li>threadFactory: 线程工厂，用于创建线程，一般默认即可。</li>\n<li>handler: 拒绝策略。当任务来不及处理时候如何拒绝任务</li>\n</ul>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><p>workQueue用于存放Runnable对象，它是一个BlockingQueue接口的对象，可以使用以下几种几种BlockingQueue。</p>\n<ul>\n<li>直接提交的队列：通过SynchronousQueue队列实现，该队列没有容量，因此每次提交的任务都不会真实的保存，如果没有空闲的线程，则会尝试创建新的线程，如果达到进程的最大值，则会执行拒绝策略，如果使用这种队列，往往需要设置较大的maximumPoolSize。</li>\n<li>有界的任务队列：通过ArrayBlockingQueue实现。由于是数组，所以其构造需要指定容量参数。当有新的任务需要执行时，如果线程池的线程数小于corePoolSize，则会创建新的线程，反之，则将该任务加入队列，如果队列装满时，则会将线程数提升到maximumPoolSize后，就不会再增加，后续仍有新任务执行则直接执行拒绝策略。</li>\n<li>无界的任务队列：通过LinkedBlockingQueue实现。由于是无解的任务队列，当系统的线程数小于corePoolSize数时，线程池会生成新的线程执行任务，反之，则任务直接加入队列进行等待，一但任务处理速度跟不上线程的创建速度，无界队列会无限增长，直到耗尽系统内存。</li>\n<li>优先任务队列：通过PriorityBlockingQueue实现，它是一个特殊的无界队列，它可以根据自身任务的优先级瞬息先后执行而不用考虑先进先出。</li>\n</ul>\n<p>结合目前的介绍，可以分析出newFixedThreadPool()由于固定了线程池，其使用了LinkedBlockingQueue作为任务队列。</p>\n<p>newSingleThreadExecutor()返回的单进程线程池，是线程池数量为1的newFixedThreadPool()。</p>\n<p>newCachedThreadPool()返回了corePoolSize为0，maximumPoolSize为无穷大的线程池，其将任务加入SynchronousQueue队列，而SynchronousQueue队列是直接提交的队列，它会迫使线程池增加新的线程执行任务。</p>\n<h3 id=\"拒绝策略\"><a href=\"#拒绝策略\" class=\"headerlink\" title=\"拒绝策略\"></a>拒绝策略</h3><p>前面介绍到的，当任务数量超过系统实际承载压力时，这个时候对于后续进来的任务就需要进行拒绝，避免系统压力太大而直接崩掉，jdk内置的拒绝策略包含以下四种：</p>\n<ul>\n<li>AbortPolicy策略: 直接抛出一场，阻止系统正常工作。</li>\n<li>CallerRunsPolicy策略: 只要线程池未关闭，会直接在调用者线程中运行当前被丢弃的任务，虽然并不会丢弃任务，但是，任务提交线程的性能会急剧下降。</li>\n<li>DiscardOledestPolicy策略: 丢弃最老的一个请求，也就是被执行的一个任务，并尝试再次提交当前任务。</li>\n<li>DiscardPolicy策略: 丢弃无法处理的任务，不予任何处理。</li>\n</ul>\n<p>如果以上的策略无法满足需求，完全可以自定义拒绝策略，下面代码简单的演示自定义线程池和拒绝策略的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    ExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">           <span class=\"keyword\">new</span> SynchronousQueue&lt;&gt;(),</div><div class=\"line\">           <span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">                    \t <span class=\"comment\">//  自定义线程生产</span></div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">           &#125;,</div><div class=\"line\">           <span class=\"keyword\">new</span> RejectedExecutionHandler() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 自定义拒绝策略</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">           &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>Java高并发程序设计</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>为了避免系统频繁的创建和销毁线程，通常会让创建的线程进行复用。一般我们进行数据库开发的时候，为了避免每次数据库查询都重新建立和销毁数据库连接，我们可以利用数据库连接池维护一些数据连接，让其长期保持在一个激活的状态，当需要使用数据库的时候，并不是创建一个连接，而是从连接池中获取一个可用的连接。</p>\n<p>线程池也是和数据库连接池类似的概念。线程池中总有几个活跃的线程，当你需要使用线程时，可以直接从池子里随便拿出一个空闲的线程，完成任务后将线程退回到池子。</p>\n<h2 id=\"Executors框架\"><a href=\"#Executors框架\" class=\"headerlink\" title=\"Executors框架\"></a>Executors框架</h2><p>Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。JDK提供了一整套的Executor框架来进行线程控制，其主要成员如下：<br><img src=\"http://img.blog.csdn.net/20160607192300746\" alt=\"Executor框架结构图\" title=\"图1 Executor框架结构图\"><br>其中：</p>\n<ul>\n<li>Executor 执行器接口，该接口定义执行Runnable任务的方式。</li>\n<li>ExecutorService 该接口定义提供对Executor的服务。</li>\n<li>ScheduledExecutorService 定时调度接口。</li>\n<li>AbstractExecutorService 执行框架抽象类。</li>\n<li>ThreadPoolExecutor JDK中线程池的具体实现。</li>\n<li>Executors 线程池工厂类。</li>\n</ul>\n<p>ExecutorService的生命周期包括三种状态：运行、关闭、终止。创建后便进入运行状态，当调用了shutdown()方法时，便进入关闭状态，此时意味着ExecutorService不再接受新的任务，但它还在执行已经提交了的任务，当素有已经提交了的任务执行完后，便到达终止状态。如果不调用shutdown()方法，ExecutorService会一直处在运行状态，不断接收新的任务，执行新的任务，服务器端一般不需要关闭它，保持一直运行即可。</p>\n<p>Executor框架提供了各种类型的线程池，主要有以下几个工厂方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***创建固定大小的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThread)</span></span>;</div><div class=\"line\"><span class=\"comment\">/***单线程的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">/***可缓存的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">/***定时任务调度的线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">/***单线程的定时任务调度线程池***/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorServcie <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h3><p>返回一个包含指定数目线程的线程池，如果任务数量多于线程数目，那么没有没有执行的任务必须等待，直到有任务完成为止。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程，简单的展示一下该类线程池的使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> poolSize = <span class=\"number\">5</span>;</div><div class=\"line\">        ExecutorService es = Executors.newFixedThreadPool(poolSize);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++) &#123;</div><div class=\"line\">            es.submit(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"thread begin\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"newSingleThreadExecutor\"><a href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"></a>newSingleThreadExecutor</h3><p>该方法返回一个只有一个线程的线程池，若多于一个任务被执行到该线程池，任务会被保存在一个任务队列，等到线程空闲的时候按照先入先出的顺序执行，适用于需要顺序执行的场景。</p>\n<h3 id=\"newCachedThreadPool\"><a href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"></a>newCachedThreadPool</h3><p>该方法返回一个可根据实际情况调整线程数量的线程池，适用于线程池的线程数量不确定，但是又需要即时执行的场景，若当前有空闲线程可复用，则会优先使用可复用的线程，否则会创建新的线程处理任务(<font color=\"red\">PS:如果使用不当会有OOM的风险)</font>。</p>\n<h3 id=\"newSingleThreadScheduledExecutor\"><a href=\"#newSingleThreadScheduledExecutor\" class=\"headerlink\" title=\"newSingleThreadScheduledExecutor\"></a>newSingleThreadScheduledExecutor</h3><p>该方法返回一个ScheduledExecutorService对象，线程池大小为1, ScheduledExecutorService对象拓展了在给定时间定时执行某任务的功能，例如在某个固定的延时之后执行，或者周期性执行某个任务，其任务调度的方式有三种：</p>\n<ul>\n<li>schedule() 在给定的时间，对任务执行一次调度</li>\n<li>scheduleAtFixedRate() 按照一定的频率进行调度，类似于linux的定时任务，以执行时间为起点，每个一定的周期执行，它不会关注上一次执行的状态，适用于能准确估计任务执行时间的场景。</li>\n<li>scheduleWithFixedDelay() 在上一次任务结束后，在经过delay时间后进行调度，它需要知道上一次任务执行的状态，适用于调度任务执行时间不确定的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> coreSize = <span class=\"number\">10</span>;  <span class=\"comment\">// the number of threads to keep in the pool</span></div><div class=\"line\">        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//ses.scheduleWithFixedDelay(</span></div><div class=\"line\">        ses.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"just test\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">2</span>, TimeUnit.SECONDS);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"newScheduledThreadPool\"><a href=\"#newScheduledThreadPool\" class=\"headerlink\" title=\"newScheduledThreadPool\"></a>newScheduledThreadPool</h3><p>该方法返回一个ScheduledExecutorService对象，和newSingleThreadScheduledExecutor的区别在于可以指定线程数量</p>\n<h2 id=\"线程池的内部实现\"><a href=\"#线程池的内部实现\" class=\"headerlink\" title=\"线程池的内部实现\"></a>线程池的内部实现</h2><p>对于以上介绍的核心的几个线程池，尽管在功能上具有不同的特点，但是其内部实现均使用了ThreadPoolExecutor实现，下面给出几个线程池的实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                 <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                 <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</div><div class=\"line\">            (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</div><div class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的实现代码可以看到，核心的线程实现都是ThreadPoolExecutor的封装，其构造函数如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span></span></div><div class=\"line\"><span class=\"function\">&#125;</span></div></pre></td></tr></table></figure>\n<p>各个参数的含义如下：</p>\n<ul>\n<li>corePoolSize: 指定线程池中的线程数量。</li>\n<li>maximumPoolSize: 指定线程池中的最大线程数量。</li>\n<li>keepAliveTime: 当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间，即超过corePoolSize的空闲线程，在多长时间内，会被销毁。</li>\n<li>unit: keepAliveTime的单位。</li>\n<li>workQueue: 任务队列，被提交但尚未执行的任务。</li>\n<li>threadFactory: 线程工厂，用于创建线程，一般默认即可。</li>\n<li>handler: 拒绝策略。当任务来不及处理时候如何拒绝任务</li>\n</ul>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><p>workQueue用于存放Runnable对象，它是一个BlockingQueue接口的对象，可以使用以下几种几种BlockingQueue。</p>\n<ul>\n<li>直接提交的队列：通过SynchronousQueue队列实现，该队列没有容量，因此每次提交的任务都不会真实的保存，如果没有空闲的线程，则会尝试创建新的线程，如果达到进程的最大值，则会执行拒绝策略，如果使用这种队列，往往需要设置较大的maximumPoolSize。</li>\n<li>有界的任务队列：通过ArrayBlockingQueue实现。由于是数组，所以其构造需要指定容量参数。当有新的任务需要执行时，如果线程池的线程数小于corePoolSize，则会创建新的线程，反之，则将该任务加入队列，如果队列装满时，则会将线程数提升到maximumPoolSize后，就不会再增加，后续仍有新任务执行则直接执行拒绝策略。</li>\n<li>无界的任务队列：通过LinkedBlockingQueue实现。由于是无解的任务队列，当系统的线程数小于corePoolSize数时，线程池会生成新的线程执行任务，反之，则任务直接加入队列进行等待，一但任务处理速度跟不上线程的创建速度，无界队列会无限增长，直到耗尽系统内存。</li>\n<li>优先任务队列：通过PriorityBlockingQueue实现，它是一个特殊的无界队列，它可以根据自身任务的优先级瞬息先后执行而不用考虑先进先出。</li>\n</ul>\n<p>结合目前的介绍，可以分析出newFixedThreadPool()由于固定了线程池，其使用了LinkedBlockingQueue作为任务队列。</p>\n<p>newSingleThreadExecutor()返回的单进程线程池，是线程池数量为1的newFixedThreadPool()。</p>\n<p>newCachedThreadPool()返回了corePoolSize为0，maximumPoolSize为无穷大的线程池，其将任务加入SynchronousQueue队列，而SynchronousQueue队列是直接提交的队列，它会迫使线程池增加新的线程执行任务。</p>\n<h3 id=\"拒绝策略\"><a href=\"#拒绝策略\" class=\"headerlink\" title=\"拒绝策略\"></a>拒绝策略</h3><p>前面介绍到的，当任务数量超过系统实际承载压力时，这个时候对于后续进来的任务就需要进行拒绝，避免系统压力太大而直接崩掉，jdk内置的拒绝策略包含以下四种：</p>\n<ul>\n<li>AbortPolicy策略: 直接抛出一场，阻止系统正常工作。</li>\n<li>CallerRunsPolicy策略: 只要线程池未关闭，会直接在调用者线程中运行当前被丢弃的任务，虽然并不会丢弃任务，但是，任务提交线程的性能会急剧下降。</li>\n<li>DiscardOledestPolicy策略: 丢弃最老的一个请求，也就是被执行的一个任务，并尝试再次提交当前任务。</li>\n<li>DiscardPolicy策略: 丢弃无法处理的任务，不予任何处理。</li>\n</ul>\n<p>如果以上的策略无法满足需求，完全可以自定义拒绝策略，下面代码简单的演示自定义线程池和拒绝策略的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    ExecutorService es = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">           <span class=\"keyword\">new</span> SynchronousQueue&lt;&gt;(),</div><div class=\"line\">           <span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">                    \t <span class=\"comment\">//  自定义线程生产</span></div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">           &#125;,</div><div class=\"line\">           <span class=\"keyword\">new</span> RejectedExecutionHandler() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 自定义拒绝策略</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">           &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>Java高并发程序设计</li>\n</ol>\n"},{"title":"FFmpeg命令行转压视频","date":"2016-10-14T06:45:38.000Z","_content":"FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。\n![ffmpeg](http://wx2.sinaimg.cn/mw690/78d85414ly1fkhvok89i4j20m806wwif.jpg)\n<!-- more -->\n## 安装\n直接到官网[http://ffmpeg.org/download.html](http://ffmpeg.org/download.html)根据系统下载对应的版本即可，建议直接下载static版，开箱即用，对于mac用户而言，也可以直接brew安装，命令行如下：\n\n```bash\nbrew install ffmpeg --with-faac --with-fdk-aac --with-ffplay --with-fontconfig --with-freetype --with-libass --with-libbluray --with-libcaca --with-libsoxr --with-libquvi --with-frei0r --with-libvidstab --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-openssl --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theroa --with-tools --with-x265\n```\n\n## 使用\n安装好之后就可以使用ffmpeg命令来压制你的视频文件了，下面为一个简单的命令行使用，对于压缩效果不满意的可以根据ffmpeg参数进行调整\n\n```bash\nffmpeg -i your_video -vcodec libx264 -preset fast -crf 20 -y -vf \"scale=1920:-1\" -acodec libmp3lame -ab 128k your_output\n```\n\n对该命令的常用参数介绍如下\n\n| 命令行参数 | 意义 | 默认值 |\n|--------|---------|-------|\n| -i | 输入文件 | |\n| -vcodec | 编码格式，支持h264和h265 | xvid |\n| -preset | 编码速率控制，编码加快，意味着信息丢失严重，输出视频质量差 | |\n| -crt    | 控制输出质量的，范围0-51，0为无失真编码，建议18-28  | 23|\n| -y    | 覆盖输出文件，即如果 output.wmv 文件已经存在的话，不经提示就覆盖掉  | |\n| -vf    | 视频过滤器，样例中表示输出保持原始宽高比的1920视频  |  |\n| -acodec | 音频编码方式 |  |\n| -ab| 音频数据流量，一般选择32，64，96，128 | 推荐使用128 |\n\n部分参数详细说明如下\n\n<font color=red size=3>--crt:</font> 这个选项会直接影响到输出视频的码率，当设置了这个参数之后，再设置－b指定码率不会生效，本人对一个368M的avi文件进行压缩，结果如下(该视频总共450帧，时长15s)\n\n| crf值 | 压缩后文件大小 | \n|--------|---------|\n| 20 | 8.14M | \n| 20 | 8.14M | \n| 30 | 2.40M | \n\n\n<font color=red size=3>--preset:</font> 指定编码的配置,x264提供了一些预设值，而这些预设值可以通过preset指定。这些预设值有包括：ultrafast，superfast，veryfast，faster，fast，medium，slow，slower，veryslow和placebo。ultrafast编码速度最快，但压缩率低，生成的文件更大，placebo则正好相反。x264所取的默认值为medium。需要说明的是，preset主要是影响编码的速度，并不会很大的影响编码出来的结果的质量\n\n## 常用参数\n\n### 可选视频参数\nps:仅仅列出部分参数，部分高级选项请自行查阅[官方文档](http://ffmpeg.org/ffmpeg.html#Options)\n\n| 命令行参数 | 意义 | 默认值 |\n|--------|---------|-------|\n| -bitexact | 使用标准比特率 | |\n| -vb | 指定视频的比特率，也就是码率 | |\n| -s size | 指定分辨率 |  |\n| -r rate | 帧率 | 29.97 |\n\n\n### 可选音频参数\n| 命令行参数 | 意义 | \n|--------|---------|\n| -ab| 设置比特率(单位：bit/s，也许老版是kb/s)前面，-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换 默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80） | \n| -ar | 设置音频采样率, 设置音频采样率 (单位：Hz)，PSP只认24000 | \n| -ac | 设置声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2 |  \n| -an | 取消音频 |  \n| -vol | 设置录制音量大小, 在转换时可以用这个提高音量 | \n\n\n## 参考文献\n1. [ffmpeg官方文档](http://ffmpeg.org/ffmpeg.html#Options)\n\n\n\n\n\n\n\n\n","source":"_posts/ffmpeg-guide.md","raw":"---\ntitle: FFmpeg命令行转压视频\ndate: 2016-10-14 14:45:38\ncategories:\n- 技术杂谈\ntags:\n- 视频压缩\n---\nFFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。\n![ffmpeg](http://wx2.sinaimg.cn/mw690/78d85414ly1fkhvok89i4j20m806wwif.jpg)\n<!-- more -->\n## 安装\n直接到官网[http://ffmpeg.org/download.html](http://ffmpeg.org/download.html)根据系统下载对应的版本即可，建议直接下载static版，开箱即用，对于mac用户而言，也可以直接brew安装，命令行如下：\n\n```bash\nbrew install ffmpeg --with-faac --with-fdk-aac --with-ffplay --with-fontconfig --with-freetype --with-libass --with-libbluray --with-libcaca --with-libsoxr --with-libquvi --with-frei0r --with-libvidstab --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-openssl --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theroa --with-tools --with-x265\n```\n\n## 使用\n安装好之后就可以使用ffmpeg命令来压制你的视频文件了，下面为一个简单的命令行使用，对于压缩效果不满意的可以根据ffmpeg参数进行调整\n\n```bash\nffmpeg -i your_video -vcodec libx264 -preset fast -crf 20 -y -vf \"scale=1920:-1\" -acodec libmp3lame -ab 128k your_output\n```\n\n对该命令的常用参数介绍如下\n\n| 命令行参数 | 意义 | 默认值 |\n|--------|---------|-------|\n| -i | 输入文件 | |\n| -vcodec | 编码格式，支持h264和h265 | xvid |\n| -preset | 编码速率控制，编码加快，意味着信息丢失严重，输出视频质量差 | |\n| -crt    | 控制输出质量的，范围0-51，0为无失真编码，建议18-28  | 23|\n| -y    | 覆盖输出文件，即如果 output.wmv 文件已经存在的话，不经提示就覆盖掉  | |\n| -vf    | 视频过滤器，样例中表示输出保持原始宽高比的1920视频  |  |\n| -acodec | 音频编码方式 |  |\n| -ab| 音频数据流量，一般选择32，64，96，128 | 推荐使用128 |\n\n部分参数详细说明如下\n\n<font color=red size=3>--crt:</font> 这个选项会直接影响到输出视频的码率，当设置了这个参数之后，再设置－b指定码率不会生效，本人对一个368M的avi文件进行压缩，结果如下(该视频总共450帧，时长15s)\n\n| crf值 | 压缩后文件大小 | \n|--------|---------|\n| 20 | 8.14M | \n| 20 | 8.14M | \n| 30 | 2.40M | \n\n\n<font color=red size=3>--preset:</font> 指定编码的配置,x264提供了一些预设值，而这些预设值可以通过preset指定。这些预设值有包括：ultrafast，superfast，veryfast，faster，fast，medium，slow，slower，veryslow和placebo。ultrafast编码速度最快，但压缩率低，生成的文件更大，placebo则正好相反。x264所取的默认值为medium。需要说明的是，preset主要是影响编码的速度，并不会很大的影响编码出来的结果的质量\n\n## 常用参数\n\n### 可选视频参数\nps:仅仅列出部分参数，部分高级选项请自行查阅[官方文档](http://ffmpeg.org/ffmpeg.html#Options)\n\n| 命令行参数 | 意义 | 默认值 |\n|--------|---------|-------|\n| -bitexact | 使用标准比特率 | |\n| -vb | 指定视频的比特率，也就是码率 | |\n| -s size | 指定分辨率 |  |\n| -r rate | 帧率 | 29.97 |\n\n\n### 可选音频参数\n| 命令行参数 | 意义 | \n|--------|---------|\n| -ab| 设置比特率(单位：bit/s，也许老版是kb/s)前面，-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换 默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80） | \n| -ar | 设置音频采样率, 设置音频采样率 (单位：Hz)，PSP只认24000 | \n| -ac | 设置声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2 |  \n| -an | 取消音频 |  \n| -vol | 设置录制音量大小, 在转换时可以用这个提高音量 | \n\n\n## 参考文献\n1. [ffmpeg官方文档](http://ffmpeg.org/ffmpeg.html#Options)\n\n\n\n\n\n\n\n\n","slug":"ffmpeg-guide","published":1,"updated":"2017-12-10T08:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usypd0006e1fyxsdzz0v3","content":"<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。<br><img src=\"http://wx2.sinaimg.cn/mw690/78d85414ly1fkhvok89i4j20m806wwif.jpg\" alt=\"ffmpeg\"><br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>直接到官网<a href=\"http://ffmpeg.org/download.html\" target=\"_blank\" rel=\"external\">http://ffmpeg.org/download.html</a>根据系统下载对应的版本即可，建议直接下载static版，开箱即用，对于mac用户而言，也可以直接brew安装，命令行如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install ffmpeg --with-faac --with-fdk-aac --with-ffplay --with-fontconfig --with-freetype --with-libass --with-libbluray --with-libcaca --with-libsoxr --with-libquvi --with-frei0r --with-libvidstab --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-openssl --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theroa --with-tools --with-x265</div></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>安装好之后就可以使用ffmpeg命令来压制你的视频文件了，下面为一个简单的命令行使用，对于压缩效果不满意的可以根据ffmpeg参数进行调整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -i your_video -vcodec libx264 -preset fast -crf 20 -y -vf <span class=\"string\">\"scale=1920:-1\"</span> -acodec libmp3lame -ab 128k your_output</div></pre></td></tr></table></figure>\n<p>对该命令的常用参数介绍如下</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令行参数</th>\n<th>意义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i</td>\n<td>输入文件</td>\n<td></td>\n</tr>\n<tr>\n<td>-vcodec</td>\n<td>编码格式，支持h264和h265</td>\n<td>xvid</td>\n</tr>\n<tr>\n<td>-preset</td>\n<td>编码速率控制，编码加快，意味着信息丢失严重，输出视频质量差</td>\n<td></td>\n</tr>\n<tr>\n<td>-crt</td>\n<td>控制输出质量的，范围0-51，0为无失真编码，建议18-28</td>\n<td>23</td>\n</tr>\n<tr>\n<td>-y</td>\n<td>覆盖输出文件，即如果 output.wmv 文件已经存在的话，不经提示就覆盖掉</td>\n<td></td>\n</tr>\n<tr>\n<td>-vf</td>\n<td>视频过滤器，样例中表示输出保持原始宽高比的1920视频</td>\n<td></td>\n</tr>\n<tr>\n<td>-acodec</td>\n<td>音频编码方式</td>\n<td></td>\n</tr>\n<tr>\n<td>-ab</td>\n<td>音频数据流量，一般选择32，64，96，128</td>\n<td>推荐使用128</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>部分参数详细说明如下</p>\n<p><font color=\"red\" size=\"3\">—crt:</font> 这个选项会直接影响到输出视频的码率，当设置了这个参数之后，再设置－b指定码率不会生效，本人对一个368M的avi文件进行压缩，结果如下(该视频总共450帧，时长15s)</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>crf值</th>\n<th>压缩后文件大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20</td>\n<td>8.14M</td>\n</tr>\n<tr>\n<td>20</td>\n<td>8.14M</td>\n</tr>\n<tr>\n<td>30</td>\n<td>2.40M</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><font color=\"red\" size=\"3\">—preset:</font> 指定编码的配置,x264提供了一些预设值，而这些预设值可以通过preset指定。这些预设值有包括：ultrafast，superfast，veryfast，faster，fast，medium，slow，slower，veryslow和placebo。ultrafast编码速度最快，但压缩率低，生成的文件更大，placebo则正好相反。x264所取的默认值为medium。需要说明的是，preset主要是影响编码的速度，并不会很大的影响编码出来的结果的质量</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><h3 id=\"可选视频参数\"><a href=\"#可选视频参数\" class=\"headerlink\" title=\"可选视频参数\"></a>可选视频参数</h3><p>ps:仅仅列出部分参数，部分高级选项请自行查阅<a href=\"http://ffmpeg.org/ffmpeg.html#Options\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令行参数</th>\n<th>意义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-bitexact</td>\n<td>使用标准比特率</td>\n<td></td>\n</tr>\n<tr>\n<td>-vb</td>\n<td>指定视频的比特率，也就是码率</td>\n<td></td>\n</tr>\n<tr>\n<td>-s size</td>\n<td>指定分辨率</td>\n<td></td>\n</tr>\n<tr>\n<td>-r rate</td>\n<td>帧率</td>\n<td>29.97</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"可选音频参数\"><a href=\"#可选音频参数\" class=\"headerlink\" title=\"可选音频参数\"></a>可选音频参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令行参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-ab</td>\n<td>设置比特率(单位：bit/s，也许老版是kb/s)前面，-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换 默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）</td>\n</tr>\n<tr>\n<td>-ar</td>\n<td>设置音频采样率, 设置音频采样率 (单位：Hz)，PSP只认24000</td>\n</tr>\n<tr>\n<td>-ac</td>\n<td>设置声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2</td>\n</tr>\n<tr>\n<td>-an</td>\n<td>取消音频</td>\n</tr>\n<tr>\n<td>-vol</td>\n<td>设置录制音量大小, 在转换时可以用这个提高音量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://ffmpeg.org/ffmpeg.html#Options\" target=\"_blank\" rel=\"external\">ffmpeg官方文档</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。<br><img src=\"http://wx2.sinaimg.cn/mw690/78d85414ly1fkhvok89i4j20m806wwif.jpg\" alt=\"ffmpeg\"><br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>直接到官网<a href=\"http://ffmpeg.org/download.html\" target=\"_blank\" rel=\"external\">http://ffmpeg.org/download.html</a>根据系统下载对应的版本即可，建议直接下载static版，开箱即用，对于mac用户而言，也可以直接brew安装，命令行如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install ffmpeg --with-faac --with-fdk-aac --with-ffplay --with-fontconfig --with-freetype --with-libass --with-libbluray --with-libcaca --with-libsoxr --with-libquvi --with-frei0r --with-libvidstab --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-openssl --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theroa --with-tools --with-x265</div></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>安装好之后就可以使用ffmpeg命令来压制你的视频文件了，下面为一个简单的命令行使用，对于压缩效果不满意的可以根据ffmpeg参数进行调整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -i your_video -vcodec libx264 -preset fast -crf 20 -y -vf <span class=\"string\">\"scale=1920:-1\"</span> -acodec libmp3lame -ab 128k your_output</div></pre></td></tr></table></figure>\n<p>对该命令的常用参数介绍如下</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令行参数</th>\n<th>意义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i</td>\n<td>输入文件</td>\n<td></td>\n</tr>\n<tr>\n<td>-vcodec</td>\n<td>编码格式，支持h264和h265</td>\n<td>xvid</td>\n</tr>\n<tr>\n<td>-preset</td>\n<td>编码速率控制，编码加快，意味着信息丢失严重，输出视频质量差</td>\n<td></td>\n</tr>\n<tr>\n<td>-crt</td>\n<td>控制输出质量的，范围0-51，0为无失真编码，建议18-28</td>\n<td>23</td>\n</tr>\n<tr>\n<td>-y</td>\n<td>覆盖输出文件，即如果 output.wmv 文件已经存在的话，不经提示就覆盖掉</td>\n<td></td>\n</tr>\n<tr>\n<td>-vf</td>\n<td>视频过滤器，样例中表示输出保持原始宽高比的1920视频</td>\n<td></td>\n</tr>\n<tr>\n<td>-acodec</td>\n<td>音频编码方式</td>\n<td></td>\n</tr>\n<tr>\n<td>-ab</td>\n<td>音频数据流量，一般选择32，64，96，128</td>\n<td>推荐使用128</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>部分参数详细说明如下</p>\n<p><font color=\"red\" size=\"3\">—crt:</font> 这个选项会直接影响到输出视频的码率，当设置了这个参数之后，再设置－b指定码率不会生效，本人对一个368M的avi文件进行压缩，结果如下(该视频总共450帧，时长15s)</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>crf值</th>\n<th>压缩后文件大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20</td>\n<td>8.14M</td>\n</tr>\n<tr>\n<td>20</td>\n<td>8.14M</td>\n</tr>\n<tr>\n<td>30</td>\n<td>2.40M</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><font color=\"red\" size=\"3\">—preset:</font> 指定编码的配置,x264提供了一些预设值，而这些预设值可以通过preset指定。这些预设值有包括：ultrafast，superfast，veryfast，faster，fast，medium，slow，slower，veryslow和placebo。ultrafast编码速度最快，但压缩率低，生成的文件更大，placebo则正好相反。x264所取的默认值为medium。需要说明的是，preset主要是影响编码的速度，并不会很大的影响编码出来的结果的质量</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><h3 id=\"可选视频参数\"><a href=\"#可选视频参数\" class=\"headerlink\" title=\"可选视频参数\"></a>可选视频参数</h3><p>ps:仅仅列出部分参数，部分高级选项请自行查阅<a href=\"http://ffmpeg.org/ffmpeg.html#Options\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令行参数</th>\n<th>意义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-bitexact</td>\n<td>使用标准比特率</td>\n<td></td>\n</tr>\n<tr>\n<td>-vb</td>\n<td>指定视频的比特率，也就是码率</td>\n<td></td>\n</tr>\n<tr>\n<td>-s size</td>\n<td>指定分辨率</td>\n<td></td>\n</tr>\n<tr>\n<td>-r rate</td>\n<td>帧率</td>\n<td>29.97</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"可选音频参数\"><a href=\"#可选音频参数\" class=\"headerlink\" title=\"可选音频参数\"></a>可选音频参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令行参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-ab</td>\n<td>设置比特率(单位：bit/s，也许老版是kb/s)前面，-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换 默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）</td>\n</tr>\n<tr>\n<td>-ar</td>\n<td>设置音频采样率, 设置音频采样率 (单位：Hz)，PSP只认24000</td>\n</tr>\n<tr>\n<td>-ac</td>\n<td>设置声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2</td>\n</tr>\n<tr>\n<td>-an</td>\n<td>取消音频</td>\n</tr>\n<tr>\n<td>-vol</td>\n<td>设置录制音量大小, 在转换时可以用这个提高音量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://ffmpeg.org/ffmpeg.html#Options\" target=\"_blank\" rel=\"external\">ffmpeg官方文档</a></li>\n</ol>"},{"title":"Gitlab-CI持续集成","date":"2016-11-27T05:57:27.000Z","_content":"持续集成 (Continuous Integration) 是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误，同样在《Code Complete》里提到了，对于持续集成（在书中，Steve McConnell使用Incremental Integration的术语）有以下几点好处：\n\n* 易于定位错误，当集成失败后很容易及时的找到问题所在\n* 模拟生产环境的自动测试\n* 与其它工具结合的持续代码改进，比如Sonar,findbug等\n* 方便进行Code Review\n\n## Gitlab-Runner\n在Gitlab-CI中有一个叫 Runner 的概念, 按照官方定义, Runner一共有三种类型\n\n* 本地Runner (优点:部署方便, 缺点:使用的是开发机器的资源， Runner服务无法持久化)\n* 普通的服务器上的Runner (本文主要用的这种Runner)\n* 基于Docker的Runner (没有较好的docker环境，如果存在docker集群的话推荐使用)\n\nGitLab-Runner类似于一个用来执行软件集成脚本的东西，它负责将Git仓库的代码 Clone 到 Runner所在到服务器上，然后运行软件集成脚本，同时将脚本输出的内容写回Git,如下图所示\n\n![gitlab-ci](http://upload-images.jianshu.io/upload_images/525728-4339103186d2b1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\nRunner 可以分布在不同的主机上，同一个主机上可以根据不同的项目注册多个 Runner。\n\n## Gitlab-Runner安装\n直接参考[官网教程](https://docs.gitlab.com/runner/install/)安装\n\n```bash\n# For MacOS \nbrew install gitlab-ci-multi-runner\n\n# For Debian/Ubuntu \ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash\nsudo apt-get install gitlab-ci-multi-runner\n\n# For RHEL/CentOS \ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\nsudo yum install gitlab-ci-multi-runner\n```\n\n## 使用gitlab-ci-multi-runner注册Runner\n安装好gitlab-ci-multi-runner这个软件之后，我们就可以用它向GitLab-CI注册Runner了，Gitlab-Runner可以分为两种类型:\n\n* Shared Runner: 共享型，这个需要gitlab管理员创建。\n* Specific Runner: 指定型，拥有项目工程访问权限的人都可以创建(本文主要创建该类型Runner)\n\n向GitLab-CI注册一个Runner需要两样东西：GitLab-CI的url和注册token。其中，token是为了确定你这个Runner是所有工程都能够使用的Shared Runner还是具体某一个工程才能使用的Specific Runner。\n\n首先，在gitlab项目配置上选中 Runners, 然后会出现相应的ci绑定Runner的配置选项\n![gitlab-runner](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwt8499g7j21kw0u5gwc.jpg)\n根据项目设置中的 url 和 token , 在服务器上注册Runner，\n\n```bash\n#然后启动Runner去和CI进行绑定\n$ gitlab-ci-multi-runner register\nRunning in System-mode\nPlease enter the gitlab-ci coordinator Url:\n#-->然后让你输入上图的CI URL\nPlease enter the gitlab-ci token for thus runner:\n#-->然后让你输入上图的Token\nPlease enter the gitlab-ci description for this runner:\n#-->然后随便给Runner命名\nPlease enter the gitlab-ci tags for thus runner(comma separated):\nPlease enter the executor:\n#-->然后类型的话， 请务必选 Shell\n#-->完毕\n\n$ gitlab-ci-multi-runner list   // 查看是否注册成功\n$ gitlab-ci-multi-runner start  // 把Runner当成Service启动\n```\n如果注册的Runner和Gitlab连接上则会出现绿色Runner证明可用\n![gitlab-runner](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwubaypawj21kw0iodm5.jpg)\n\n## Runner使用\n在git项目根目录下创建文件 .gitlab-ci.yml 脚本\n\n```bash\nbuild:\n\tscript: \"pwd & mvn test\"\n```\n在 Pipelines 中运行，即会自动运行脚本进行构建并输出构建结果，之后每次提交代码都会进行集成测试，保证每次的提交都是正确的\n![gitlab-ci](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwujg6ti7j21kw0l00z6.jpg)\n\n\n## 参考资料\n1. [Gitlab-Runner](网站https://docs.gitlab.com/runner/install/)\n2. [GitLab CI持续集成配置方案](http://www.cnblogs.com/newP/p/5735366.html)\n\n\n","source":"_posts/gitlab-ci.md","raw":"---\ntitle: Gitlab-CI持续集成\ndate: 2016-11-27 13:57:27\ncategories:\n- 技术杂谈\ntags:\n- 持续集成\n---\n持续集成 (Continuous Integration) 是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误，同样在《Code Complete》里提到了，对于持续集成（在书中，Steve McConnell使用Incremental Integration的术语）有以下几点好处：\n\n* 易于定位错误，当集成失败后很容易及时的找到问题所在\n* 模拟生产环境的自动测试\n* 与其它工具结合的持续代码改进，比如Sonar,findbug等\n* 方便进行Code Review\n\n## Gitlab-Runner\n在Gitlab-CI中有一个叫 Runner 的概念, 按照官方定义, Runner一共有三种类型\n\n* 本地Runner (优点:部署方便, 缺点:使用的是开发机器的资源， Runner服务无法持久化)\n* 普通的服务器上的Runner (本文主要用的这种Runner)\n* 基于Docker的Runner (没有较好的docker环境，如果存在docker集群的话推荐使用)\n\nGitLab-Runner类似于一个用来执行软件集成脚本的东西，它负责将Git仓库的代码 Clone 到 Runner所在到服务器上，然后运行软件集成脚本，同时将脚本输出的内容写回Git,如下图所示\n\n![gitlab-ci](http://upload-images.jianshu.io/upload_images/525728-4339103186d2b1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\nRunner 可以分布在不同的主机上，同一个主机上可以根据不同的项目注册多个 Runner。\n\n## Gitlab-Runner安装\n直接参考[官网教程](https://docs.gitlab.com/runner/install/)安装\n\n```bash\n# For MacOS \nbrew install gitlab-ci-multi-runner\n\n# For Debian/Ubuntu \ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash\nsudo apt-get install gitlab-ci-multi-runner\n\n# For RHEL/CentOS \ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\nsudo yum install gitlab-ci-multi-runner\n```\n\n## 使用gitlab-ci-multi-runner注册Runner\n安装好gitlab-ci-multi-runner这个软件之后，我们就可以用它向GitLab-CI注册Runner了，Gitlab-Runner可以分为两种类型:\n\n* Shared Runner: 共享型，这个需要gitlab管理员创建。\n* Specific Runner: 指定型，拥有项目工程访问权限的人都可以创建(本文主要创建该类型Runner)\n\n向GitLab-CI注册一个Runner需要两样东西：GitLab-CI的url和注册token。其中，token是为了确定你这个Runner是所有工程都能够使用的Shared Runner还是具体某一个工程才能使用的Specific Runner。\n\n首先，在gitlab项目配置上选中 Runners, 然后会出现相应的ci绑定Runner的配置选项\n![gitlab-runner](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwt8499g7j21kw0u5gwc.jpg)\n根据项目设置中的 url 和 token , 在服务器上注册Runner，\n\n```bash\n#然后启动Runner去和CI进行绑定\n$ gitlab-ci-multi-runner register\nRunning in System-mode\nPlease enter the gitlab-ci coordinator Url:\n#-->然后让你输入上图的CI URL\nPlease enter the gitlab-ci token for thus runner:\n#-->然后让你输入上图的Token\nPlease enter the gitlab-ci description for this runner:\n#-->然后随便给Runner命名\nPlease enter the gitlab-ci tags for thus runner(comma separated):\nPlease enter the executor:\n#-->然后类型的话， 请务必选 Shell\n#-->完毕\n\n$ gitlab-ci-multi-runner list   // 查看是否注册成功\n$ gitlab-ci-multi-runner start  // 把Runner当成Service启动\n```\n如果注册的Runner和Gitlab连接上则会出现绿色Runner证明可用\n![gitlab-runner](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwubaypawj21kw0iodm5.jpg)\n\n## Runner使用\n在git项目根目录下创建文件 .gitlab-ci.yml 脚本\n\n```bash\nbuild:\n\tscript: \"pwd & mvn test\"\n```\n在 Pipelines 中运行，即会自动运行脚本进行构建并输出构建结果，之后每次提交代码都会进行集成测试，保证每次的提交都是正确的\n![gitlab-ci](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwujg6ti7j21kw0l00z6.jpg)\n\n\n## 参考资料\n1. [Gitlab-Runner](网站https://docs.gitlab.com/runner/install/)\n2. [GitLab CI持续集成配置方案](http://www.cnblogs.com/newP/p/5735366.html)\n\n\n","slug":"gitlab-ci","published":1,"updated":"2017-12-10T08:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usype0008e1fyyj8ckveg","content":"<p>持续集成 (Continuous Integration) 是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误，同样在《Code Complete》里提到了，对于持续集成（在书中，Steve McConnell使用Incremental Integration的术语）有以下几点好处：</p>\n<ul>\n<li>易于定位错误，当集成失败后很容易及时的找到问题所在</li>\n<li>模拟生产环境的自动测试</li>\n<li>与其它工具结合的持续代码改进，比如Sonar,findbug等</li>\n<li>方便进行Code Review</li>\n</ul>\n<h2 id=\"Gitlab-Runner\"><a href=\"#Gitlab-Runner\" class=\"headerlink\" title=\"Gitlab-Runner\"></a>Gitlab-Runner</h2><p>在Gitlab-CI中有一个叫 Runner 的概念, 按照官方定义, Runner一共有三种类型</p>\n<ul>\n<li>本地Runner (优点:部署方便, 缺点:使用的是开发机器的资源， Runner服务无法持久化)</li>\n<li>普通的服务器上的Runner (本文主要用的这种Runner)</li>\n<li>基于Docker的Runner (没有较好的docker环境，如果存在docker集群的话推荐使用)</li>\n</ul>\n<p>GitLab-Runner类似于一个用来执行软件集成脚本的东西，它负责将Git仓库的代码 Clone 到 Runner所在到服务器上，然后运行软件集成脚本，同时将脚本输出的内容写回Git,如下图所示</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/525728-4339103186d2b1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"gitlab-ci\"></p>\n<p>Runner 可以分布在不同的主机上，同一个主机上可以根据不同的项目注册多个 Runner。</p>\n<h2 id=\"Gitlab-Runner安装\"><a href=\"#Gitlab-Runner安装\" class=\"headerlink\" title=\"Gitlab-Runner安装\"></a>Gitlab-Runner安装</h2><p>直接参考<a href=\"https://docs.gitlab.com/runner/install/\" target=\"_blank\" rel=\"external\">官网教程</a>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># For MacOS </span></div><div class=\"line\">brew install gitlab-ci-multi-runner</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># For Debian/Ubuntu </span></div><div class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</div><div class=\"line\">sudo apt-get install gitlab-ci-multi-runner</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># For RHEL/CentOS </span></div><div class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</div><div class=\"line\">sudo yum install gitlab-ci-multi-runner</div></pre></td></tr></table></figure>\n<h2 id=\"使用gitlab-ci-multi-runner注册Runner\"><a href=\"#使用gitlab-ci-multi-runner注册Runner\" class=\"headerlink\" title=\"使用gitlab-ci-multi-runner注册Runner\"></a>使用gitlab-ci-multi-runner注册Runner</h2><p>安装好gitlab-ci-multi-runner这个软件之后，我们就可以用它向GitLab-CI注册Runner了，Gitlab-Runner可以分为两种类型:</p>\n<ul>\n<li>Shared Runner: 共享型，这个需要gitlab管理员创建。</li>\n<li>Specific Runner: 指定型，拥有项目工程访问权限的人都可以创建(本文主要创建该类型Runner)</li>\n</ul>\n<p>向GitLab-CI注册一个Runner需要两样东西：GitLab-CI的url和注册token。其中，token是为了确定你这个Runner是所有工程都能够使用的Shared Runner还是具体某一个工程才能使用的Specific Runner。</p>\n<p>首先，在gitlab项目配置上选中 Runners, 然后会出现相应的ci绑定Runner的配置选项<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwt8499g7j21kw0u5gwc.jpg\" alt=\"gitlab-runner\"><br>根据项目设置中的 url 和 token , 在服务器上注册Runner，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#然后启动Runner去和CI进行绑定</span></div><div class=\"line\">$ gitlab-ci-multi-runner register</div><div class=\"line\">Running <span class=\"keyword\">in</span> System-mode</div><div class=\"line\">Please enter the gitlab-ci coordinator Url:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后让你输入上图的CI URL</span></div><div class=\"line\">Please enter the gitlab-ci token <span class=\"keyword\">for</span> thus runner:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后让你输入上图的Token</span></div><div class=\"line\">Please enter the gitlab-ci description <span class=\"keyword\">for</span> this runner:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后随便给Runner命名</span></div><div class=\"line\">Please enter the gitlab-ci tags <span class=\"keyword\">for</span> thus runner(comma separated):</div><div class=\"line\">Please enter the executor:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后类型的话， 请务必选 Shell</span></div><div class=\"line\"><span class=\"comment\">#--&gt;完毕</span></div><div class=\"line\"></div><div class=\"line\">$ gitlab-ci-multi-runner list   // 查看是否注册成功</div><div class=\"line\">$ gitlab-ci-multi-runner start  // 把Runner当成Service启动</div></pre></td></tr></table></figure>\n<p>如果注册的Runner和Gitlab连接上则会出现绿色Runner证明可用<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwubaypawj21kw0iodm5.jpg\" alt=\"gitlab-runner\"></p>\n<h2 id=\"Runner使用\"><a href=\"#Runner使用\" class=\"headerlink\" title=\"Runner使用\"></a>Runner使用</h2><p>在git项目根目录下创建文件 .gitlab-ci.yml 脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">build:</div><div class=\"line\">\tscript: <span class=\"string\">\"pwd &amp; mvn test\"</span></div></pre></td></tr></table></figure>\n<p>在 Pipelines 中运行，即会自动运行脚本进行构建并输出构建结果，之后每次提交代码都会进行集成测试，保证每次的提交都是正确的<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwujg6ti7j21kw0l00z6.jpg\" alt=\"gitlab-ci\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"网站https://docs.gitlab.com/runner/install/\">Gitlab-Runner</a></li>\n<li><a href=\"http://www.cnblogs.com/newP/p/5735366.html\" target=\"_blank\" rel=\"external\">GitLab CI持续集成配置方案</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>持续集成 (Continuous Integration) 是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误，同样在《Code Complete》里提到了，对于持续集成（在书中，Steve McConnell使用Incremental Integration的术语）有以下几点好处：</p>\n<ul>\n<li>易于定位错误，当集成失败后很容易及时的找到问题所在</li>\n<li>模拟生产环境的自动测试</li>\n<li>与其它工具结合的持续代码改进，比如Sonar,findbug等</li>\n<li>方便进行Code Review</li>\n</ul>\n<h2 id=\"Gitlab-Runner\"><a href=\"#Gitlab-Runner\" class=\"headerlink\" title=\"Gitlab-Runner\"></a>Gitlab-Runner</h2><p>在Gitlab-CI中有一个叫 Runner 的概念, 按照官方定义, Runner一共有三种类型</p>\n<ul>\n<li>本地Runner (优点:部署方便, 缺点:使用的是开发机器的资源， Runner服务无法持久化)</li>\n<li>普通的服务器上的Runner (本文主要用的这种Runner)</li>\n<li>基于Docker的Runner (没有较好的docker环境，如果存在docker集群的话推荐使用)</li>\n</ul>\n<p>GitLab-Runner类似于一个用来执行软件集成脚本的东西，它负责将Git仓库的代码 Clone 到 Runner所在到服务器上，然后运行软件集成脚本，同时将脚本输出的内容写回Git,如下图所示</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/525728-4339103186d2b1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"gitlab-ci\"></p>\n<p>Runner 可以分布在不同的主机上，同一个主机上可以根据不同的项目注册多个 Runner。</p>\n<h2 id=\"Gitlab-Runner安装\"><a href=\"#Gitlab-Runner安装\" class=\"headerlink\" title=\"Gitlab-Runner安装\"></a>Gitlab-Runner安装</h2><p>直接参考<a href=\"https://docs.gitlab.com/runner/install/\" target=\"_blank\" rel=\"external\">官网教程</a>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># For MacOS </span></div><div class=\"line\">brew install gitlab-ci-multi-runner</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># For Debian/Ubuntu </span></div><div class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</div><div class=\"line\">sudo apt-get install gitlab-ci-multi-runner</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># For RHEL/CentOS </span></div><div class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</div><div class=\"line\">sudo yum install gitlab-ci-multi-runner</div></pre></td></tr></table></figure>\n<h2 id=\"使用gitlab-ci-multi-runner注册Runner\"><a href=\"#使用gitlab-ci-multi-runner注册Runner\" class=\"headerlink\" title=\"使用gitlab-ci-multi-runner注册Runner\"></a>使用gitlab-ci-multi-runner注册Runner</h2><p>安装好gitlab-ci-multi-runner这个软件之后，我们就可以用它向GitLab-CI注册Runner了，Gitlab-Runner可以分为两种类型:</p>\n<ul>\n<li>Shared Runner: 共享型，这个需要gitlab管理员创建。</li>\n<li>Specific Runner: 指定型，拥有项目工程访问权限的人都可以创建(本文主要创建该类型Runner)</li>\n</ul>\n<p>向GitLab-CI注册一个Runner需要两样东西：GitLab-CI的url和注册token。其中，token是为了确定你这个Runner是所有工程都能够使用的Shared Runner还是具体某一个工程才能使用的Specific Runner。</p>\n<p>首先，在gitlab项目配置上选中 Runners, 然后会出现相应的ci绑定Runner的配置选项<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwt8499g7j21kw0u5gwc.jpg\" alt=\"gitlab-runner\"><br>根据项目设置中的 url 和 token , 在服务器上注册Runner，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#然后启动Runner去和CI进行绑定</span></div><div class=\"line\">$ gitlab-ci-multi-runner register</div><div class=\"line\">Running <span class=\"keyword\">in</span> System-mode</div><div class=\"line\">Please enter the gitlab-ci coordinator Url:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后让你输入上图的CI URL</span></div><div class=\"line\">Please enter the gitlab-ci token <span class=\"keyword\">for</span> thus runner:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后让你输入上图的Token</span></div><div class=\"line\">Please enter the gitlab-ci description <span class=\"keyword\">for</span> this runner:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后随便给Runner命名</span></div><div class=\"line\">Please enter the gitlab-ci tags <span class=\"keyword\">for</span> thus runner(comma separated):</div><div class=\"line\">Please enter the executor:</div><div class=\"line\"><span class=\"comment\">#--&gt;然后类型的话， 请务必选 Shell</span></div><div class=\"line\"><span class=\"comment\">#--&gt;完毕</span></div><div class=\"line\"></div><div class=\"line\">$ gitlab-ci-multi-runner list   // 查看是否注册成功</div><div class=\"line\">$ gitlab-ci-multi-runner start  // 把Runner当成Service启动</div></pre></td></tr></table></figure>\n<p>如果注册的Runner和Gitlab连接上则会出现绿色Runner证明可用<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwubaypawj21kw0iodm5.jpg\" alt=\"gitlab-runner\"></p>\n<h2 id=\"Runner使用\"><a href=\"#Runner使用\" class=\"headerlink\" title=\"Runner使用\"></a>Runner使用</h2><p>在git项目根目录下创建文件 .gitlab-ci.yml 脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">build:</div><div class=\"line\">\tscript: <span class=\"string\">\"pwd &amp; mvn test\"</span></div></pre></td></tr></table></figure>\n<p>在 Pipelines 中运行，即会自动运行脚本进行构建并输出构建结果，之后每次提交代码都会进行集成测试，保证每次的提交都是正确的<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwujg6ti7j21kw0l00z6.jpg\" alt=\"gitlab-ci\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"网站https://docs.gitlab.com/runner/install/\">Gitlab-Runner</a></li>\n<li><a href=\"http://www.cnblogs.com/newP/p/5735366.html\" target=\"_blank\" rel=\"external\">GitLab CI持续集成配置方案</a></li>\n</ol>\n"},{"title":"Pinpoint简单介绍以及应用实例","date":"2016-12-28T06:37:03.000Z","_content":"Pinpoint是一个开源的APM(Application Performance Management/应用性能管理)工具，用于基于Java的大规模分布式系统，思路基于google Dapper，用于基于java的大规模分布式系统，通过跟踪分布式应用之间的调用来提供解决方案，以帮助分析系统的总体结构和内部模块之间如何相互联系，其开发的初衷主要基于以下思考元素。\n\n![pinpoint](http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64c51y2dj21ct0o5afl.jpg \"图1 监控的提出\")\n\n<!-- more -->\n## 系统架构\nPoint是基于Google Dapper，主要有三个组件：\n\n* pinpoint-collector，日志收集器模块，主要手收集从agent端传来的数据信息并存储\n* pinpoint-web，控制台视图模块，主要将collector的数据可视化的展示给用户\n* pinpoint-agent，日志代理客户端模块，用于在客户段进行埋点来获取到监控信息\n\n![](http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65eq70ilj21800oin63.jpg \"图2 Pinpoint架构\")\n\n\n同时使用Hbase作为存储，point主要特点如下图，包括以下几点\n\n* 分布式事务跟踪，跟踪跨越分布式应用的消息\n* 自动检测应用拓扑，帮助你搞清楚应用的架构\n* 水平拓展以便支持大规模服务器集群\n* 提供代码级别的可见性以便轻松定位失败点和瓶颈\n* 使用字节码增强技术，添加新功能无需修改代码(AOP技术)\n\n![pinpoint](http://wx3.sinaimg.cn/mw1024/78d85414ly1fl64t0zuysj21b70n843m.jpg \"图3 Pinpoint主要特点\")\n\n在比较复杂的系统中利用pinpoint可以有效的看到系统的瓶颈，其常用功能如下所示：\n\n![pinpoint](http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64t43mu4j21e70l0k0k.jpg \"图4 Pinpoint主要功能\")\n\n## 主要技术\nPinpoint的主要技术设计到分布式事务跟踪，主要分为两个主要技术：事务追踪技术以及字节码增强技术来实现无侵入式的性能监控\n### 数据结构\nPinpoint跟踪单个事务的分布式请求，分布式追踪系统的核心是在分布式系统中识别在Node1中处理的消息和在Node2中出的消息之间的关系。HTTP请求中的HTTP header中为消息添加一个标签信息并使用这个标签跟踪消息，即TraceID，Pinpoint中，核心数据结构由Span，Trace和TraceID组成:\n\n* Span:跟踪的基本单元，包含一个TraceId\n* Trace:多个Span集合，由关联的RPC（Spans）组成，同一个trace共享一个相同的TransactionID,Trace通过SpanId和ParentSpanId整理继承树结构。\n* TraceID:由 TransactionId, SpanId(64位长度的整型), 和 ParentSpanId(64位长度的整型) 组成的key的集合. TransactionId 指明消息ID，而SpanId 和 ParentSpanId 表示RPC的父-子关系\n* TransactionId：AgentIDs(建议使用hostname，服务器IP),JVM启动时间以及序列号组成\n\n生成唯一性ID的方法，通过中央key服务器来生成key。如果实现这个模式，可能导致性能问题和网络错误，因此，大量生成key被考虑作为备选。\n\n![](http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65rkvn6qj215w0niae6.jpg '图5 核心数据结构')\n\n### Trace行为\n下图5描述在4个节点之间进行3次rpc调用：\n\n![](http://wx1.sinaimg.cn/mw1024/78d85414ly1fl65rqgpx9j21bs0nmtdx.jpg '图6 trace行为')\n\n上图中，TransactionID(TxId) 体现了三次不同的rpc作为单个事务被相互关联，由于 TransactionID 本身不能精确描述rpc之间的关系，为了识别 rpc 之间的关系，需要 SpanId 和 ParentSpanId， 假设一个节点是 Tomcat， 可以将 SpanId 想象为出力http请求的线程，ParentSpanId 代表发起这个rpc调用的 SpanId。\n\nSpanId 和 ParentSpanId 是64位长度的整型，由于这个数字是任意生成的，但是考虑到值的范围从 -2^64 ~ 2^64， 不太可能发生冲突，如果发生冲突，系统会让开发者知道发生了什么，而不是去解决冲突。\n\n### 字节码增强\n\n实现分布式事务跟踪的实现方法之一是开发人员自己修改代码，在发生rpc调用的地方开发人员自己添加标签信息，这就需要修改到项目代码，对代码有一定的侵入性，为了解决这个问题，pinpoint中使用了字节码增强技术，由 pinpoint-agent 干预发起rpc的代码来实现自动处理标签信息，如下图\n\n![](http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65ryql33j21990mzgom.jpg '图7 字节码增强')\n\n在程序编译阶段通过反射方式注入代码来实现无侵入的埋点，这种代码跟踪方式于手工跟踪对比如下图8所示\n\n![](http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65rvfmpsj21520nete5.jpg '图8 性能对比')\n\n只需要在项目启动的过程中加入 agent 即可实现性能监控\n\n```\njavaagent:$AGENR_PATH/pinpoint-bootstrap.jar\n-Dpinpoint.agentId=<Agent’s UniqueId>\n-Dpinpoint.applicationName=<the name of service>\n```\n\n## 应用分析\n阐述point为每个方法做了什么：\n\n1.  请求到达tomcatA时，Pinpoint agent产生TraceID\n2.  从springMVC控制器记录数据\n3.  插入HttpClient.execute()方法的调用并在HttpGet中配置TraceId\n4.  传输打好tag的请求到tomcatB\n5.  从springmvc控制器中记录数据并完成请求\n6.  从tomcatB回来的请求完成时，pp-agent发送跟踪数据到pp-collector存储在hbase\n7.  在对tomcatB的http调用结束后，tomcatA的请求也完成，pp-agent发送跟踪数据到pp-collector存储在HBase中\n8.  UI从Hbase中读取数据并通过排序树来创建调用栈\n\n整体的应用分析如下图所示\n\n![](http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65s2cda8j21eu0r0k0v.jpg '图9 应用分析')\n\n## 参考文献\n1. [Pinpoint源码](https://github.com/naver/pinpoint)\n2. [Techinal Overview Of Pinpoint (包含中文手册)](https://github.com/naver/pinpoint/wiki/Technical-Overview-Of-Pinpoint)\n\n\n\n\n\n                                                                  \n                                                                         \n                     \n","source":"_posts/pinpoint.md","raw":"---\ntitle: Pinpoint简单介绍以及应用实例\ndate: 2016-12-28 14:37:03\ncategories:\n- 技术杂谈\ntags:\n- 性能监控\n---\nPinpoint是一个开源的APM(Application Performance Management/应用性能管理)工具，用于基于Java的大规模分布式系统，思路基于google Dapper，用于基于java的大规模分布式系统，通过跟踪分布式应用之间的调用来提供解决方案，以帮助分析系统的总体结构和内部模块之间如何相互联系，其开发的初衷主要基于以下思考元素。\n\n![pinpoint](http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64c51y2dj21ct0o5afl.jpg \"图1 监控的提出\")\n\n<!-- more -->\n## 系统架构\nPoint是基于Google Dapper，主要有三个组件：\n\n* pinpoint-collector，日志收集器模块，主要手收集从agent端传来的数据信息并存储\n* pinpoint-web，控制台视图模块，主要将collector的数据可视化的展示给用户\n* pinpoint-agent，日志代理客户端模块，用于在客户段进行埋点来获取到监控信息\n\n![](http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65eq70ilj21800oin63.jpg \"图2 Pinpoint架构\")\n\n\n同时使用Hbase作为存储，point主要特点如下图，包括以下几点\n\n* 分布式事务跟踪，跟踪跨越分布式应用的消息\n* 自动检测应用拓扑，帮助你搞清楚应用的架构\n* 水平拓展以便支持大规模服务器集群\n* 提供代码级别的可见性以便轻松定位失败点和瓶颈\n* 使用字节码增强技术，添加新功能无需修改代码(AOP技术)\n\n![pinpoint](http://wx3.sinaimg.cn/mw1024/78d85414ly1fl64t0zuysj21b70n843m.jpg \"图3 Pinpoint主要特点\")\n\n在比较复杂的系统中利用pinpoint可以有效的看到系统的瓶颈，其常用功能如下所示：\n\n![pinpoint](http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64t43mu4j21e70l0k0k.jpg \"图4 Pinpoint主要功能\")\n\n## 主要技术\nPinpoint的主要技术设计到分布式事务跟踪，主要分为两个主要技术：事务追踪技术以及字节码增强技术来实现无侵入式的性能监控\n### 数据结构\nPinpoint跟踪单个事务的分布式请求，分布式追踪系统的核心是在分布式系统中识别在Node1中处理的消息和在Node2中出的消息之间的关系。HTTP请求中的HTTP header中为消息添加一个标签信息并使用这个标签跟踪消息，即TraceID，Pinpoint中，核心数据结构由Span，Trace和TraceID组成:\n\n* Span:跟踪的基本单元，包含一个TraceId\n* Trace:多个Span集合，由关联的RPC（Spans）组成，同一个trace共享一个相同的TransactionID,Trace通过SpanId和ParentSpanId整理继承树结构。\n* TraceID:由 TransactionId, SpanId(64位长度的整型), 和 ParentSpanId(64位长度的整型) 组成的key的集合. TransactionId 指明消息ID，而SpanId 和 ParentSpanId 表示RPC的父-子关系\n* TransactionId：AgentIDs(建议使用hostname，服务器IP),JVM启动时间以及序列号组成\n\n生成唯一性ID的方法，通过中央key服务器来生成key。如果实现这个模式，可能导致性能问题和网络错误，因此，大量生成key被考虑作为备选。\n\n![](http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65rkvn6qj215w0niae6.jpg '图5 核心数据结构')\n\n### Trace行为\n下图5描述在4个节点之间进行3次rpc调用：\n\n![](http://wx1.sinaimg.cn/mw1024/78d85414ly1fl65rqgpx9j21bs0nmtdx.jpg '图6 trace行为')\n\n上图中，TransactionID(TxId) 体现了三次不同的rpc作为单个事务被相互关联，由于 TransactionID 本身不能精确描述rpc之间的关系，为了识别 rpc 之间的关系，需要 SpanId 和 ParentSpanId， 假设一个节点是 Tomcat， 可以将 SpanId 想象为出力http请求的线程，ParentSpanId 代表发起这个rpc调用的 SpanId。\n\nSpanId 和 ParentSpanId 是64位长度的整型，由于这个数字是任意生成的，但是考虑到值的范围从 -2^64 ~ 2^64， 不太可能发生冲突，如果发生冲突，系统会让开发者知道发生了什么，而不是去解决冲突。\n\n### 字节码增强\n\n实现分布式事务跟踪的实现方法之一是开发人员自己修改代码，在发生rpc调用的地方开发人员自己添加标签信息，这就需要修改到项目代码，对代码有一定的侵入性，为了解决这个问题，pinpoint中使用了字节码增强技术，由 pinpoint-agent 干预发起rpc的代码来实现自动处理标签信息，如下图\n\n![](http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65ryql33j21990mzgom.jpg '图7 字节码增强')\n\n在程序编译阶段通过反射方式注入代码来实现无侵入的埋点，这种代码跟踪方式于手工跟踪对比如下图8所示\n\n![](http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65rvfmpsj21520nete5.jpg '图8 性能对比')\n\n只需要在项目启动的过程中加入 agent 即可实现性能监控\n\n```\njavaagent:$AGENR_PATH/pinpoint-bootstrap.jar\n-Dpinpoint.agentId=<Agent’s UniqueId>\n-Dpinpoint.applicationName=<the name of service>\n```\n\n## 应用分析\n阐述point为每个方法做了什么：\n\n1.  请求到达tomcatA时，Pinpoint agent产生TraceID\n2.  从springMVC控制器记录数据\n3.  插入HttpClient.execute()方法的调用并在HttpGet中配置TraceId\n4.  传输打好tag的请求到tomcatB\n5.  从springmvc控制器中记录数据并完成请求\n6.  从tomcatB回来的请求完成时，pp-agent发送跟踪数据到pp-collector存储在hbase\n7.  在对tomcatB的http调用结束后，tomcatA的请求也完成，pp-agent发送跟踪数据到pp-collector存储在HBase中\n8.  UI从Hbase中读取数据并通过排序树来创建调用栈\n\n整体的应用分析如下图所示\n\n![](http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65s2cda8j21eu0r0k0v.jpg '图9 应用分析')\n\n## 参考文献\n1. [Pinpoint源码](https://github.com/naver/pinpoint)\n2. [Techinal Overview Of Pinpoint (包含中文手册)](https://github.com/naver/pinpoint/wiki/Technical-Overview-Of-Pinpoint)\n\n\n\n\n\n                                                                  \n                                                                         \n                     \n","slug":"pinpoint","published":1,"updated":"2017-12-10T08:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usypf0009e1fyv6zhsy77","content":"<p>Pinpoint是一个开源的APM(Application Performance Management/应用性能管理)工具，用于基于Java的大规模分布式系统，思路基于google Dapper，用于基于java的大规模分布式系统，通过跟踪分布式应用之间的调用来提供解决方案，以帮助分析系统的总体结构和内部模块之间如何相互联系，其开发的初衷主要基于以下思考元素。</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64c51y2dj21ct0o5afl.jpg\" alt=\"pinpoint\" title=\"图1 监控的提出\"></p>\n<a id=\"more\"></a>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>Point是基于Google Dapper，主要有三个组件：</p>\n<ul>\n<li>pinpoint-collector，日志收集器模块，主要手收集从agent端传来的数据信息并存储</li>\n<li>pinpoint-web，控制台视图模块，主要将collector的数据可视化的展示给用户</li>\n<li>pinpoint-agent，日志代理客户端模块，用于在客户段进行埋点来获取到监控信息</li>\n</ul>\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65eq70ilj21800oin63.jpg\" alt=\"\" title=\"图2 Pinpoint架构\"></p>\n<p>同时使用Hbase作为存储，point主要特点如下图，包括以下几点</p>\n<ul>\n<li>分布式事务跟踪，跟踪跨越分布式应用的消息</li>\n<li>自动检测应用拓扑，帮助你搞清楚应用的架构</li>\n<li>水平拓展以便支持大规模服务器集群</li>\n<li>提供代码级别的可见性以便轻松定位失败点和瓶颈</li>\n<li>使用字节码增强技术，添加新功能无需修改代码(AOP技术)</li>\n</ul>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fl64t0zuysj21b70n843m.jpg\" alt=\"pinpoint\" title=\"图3 Pinpoint主要特点\"></p>\n<p>在比较复杂的系统中利用pinpoint可以有效的看到系统的瓶颈，其常用功能如下所示：</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64t43mu4j21e70l0k0k.jpg\" alt=\"pinpoint\" title=\"图4 Pinpoint主要功能\"></p>\n<h2 id=\"主要技术\"><a href=\"#主要技术\" class=\"headerlink\" title=\"主要技术\"></a>主要技术</h2><p>Pinpoint的主要技术设计到分布式事务跟踪，主要分为两个主要技术：事务追踪技术以及字节码增强技术来实现无侵入式的性能监控</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>Pinpoint跟踪单个事务的分布式请求，分布式追踪系统的核心是在分布式系统中识别在Node1中处理的消息和在Node2中出的消息之间的关系。HTTP请求中的HTTP header中为消息添加一个标签信息并使用这个标签跟踪消息，即TraceID，Pinpoint中，核心数据结构由Span，Trace和TraceID组成:</p>\n<ul>\n<li>Span:跟踪的基本单元，包含一个TraceId</li>\n<li>Trace:多个Span集合，由关联的RPC（Spans）组成，同一个trace共享一个相同的TransactionID,Trace通过SpanId和ParentSpanId整理继承树结构。</li>\n<li>TraceID:由 TransactionId, SpanId(64位长度的整型), 和 ParentSpanId(64位长度的整型) 组成的key的集合. TransactionId 指明消息ID，而SpanId 和 ParentSpanId 表示RPC的父-子关系</li>\n<li>TransactionId：AgentIDs(建议使用hostname，服务器IP),JVM启动时间以及序列号组成</li>\n</ul>\n<p>生成唯一性ID的方法，通过中央key服务器来生成key。如果实现这个模式，可能导致性能问题和网络错误，因此，大量生成key被考虑作为备选。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65rkvn6qj215w0niae6.jpg\" alt=\"\" title=\"图5 核心数据结构\"></p>\n<h3 id=\"Trace行为\"><a href=\"#Trace行为\" class=\"headerlink\" title=\"Trace行为\"></a>Trace行为</h3><p>下图5描述在4个节点之间进行3次rpc调用：</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fl65rqgpx9j21bs0nmtdx.jpg\" alt=\"\" title=\"图6 trace行为\"></p>\n<p>上图中，TransactionID(TxId) 体现了三次不同的rpc作为单个事务被相互关联，由于 TransactionID 本身不能精确描述rpc之间的关系，为了识别 rpc 之间的关系，需要 SpanId 和 ParentSpanId， 假设一个节点是 Tomcat， 可以将 SpanId 想象为出力http请求的线程，ParentSpanId 代表发起这个rpc调用的 SpanId。</p>\n<p>SpanId 和 ParentSpanId 是64位长度的整型，由于这个数字是任意生成的，但是考虑到值的范围从 -2^64 ~ 2^64， 不太可能发生冲突，如果发生冲突，系统会让开发者知道发生了什么，而不是去解决冲突。</p>\n<h3 id=\"字节码增强\"><a href=\"#字节码增强\" class=\"headerlink\" title=\"字节码增强\"></a>字节码增强</h3><p>实现分布式事务跟踪的实现方法之一是开发人员自己修改代码，在发生rpc调用的地方开发人员自己添加标签信息，这就需要修改到项目代码，对代码有一定的侵入性，为了解决这个问题，pinpoint中使用了字节码增强技术，由 pinpoint-agent 干预发起rpc的代码来实现自动处理标签信息，如下图</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65ryql33j21990mzgom.jpg\" alt=\"\" title=\"图7 字节码增强\"></p>\n<p>在程序编译阶段通过反射方式注入代码来实现无侵入的埋点，这种代码跟踪方式于手工跟踪对比如下图8所示</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65rvfmpsj21520nete5.jpg\" alt=\"\" title=\"图8 性能对比\"></p>\n<p>只需要在项目启动的过程中加入 agent 即可实现性能监控</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">javaagent:$AGENR_PATH/pinpoint-bootstrap.jar</div><div class=\"line\">-Dpinpoint.agentId=&lt;Agent’s UniqueId&gt;</div><div class=\"line\">-Dpinpoint.applicationName=&lt;the name of service&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"应用分析\"><a href=\"#应用分析\" class=\"headerlink\" title=\"应用分析\"></a>应用分析</h2><p>阐述point为每个方法做了什么：</p>\n<ol>\n<li>请求到达tomcatA时，Pinpoint agent产生TraceID</li>\n<li>从springMVC控制器记录数据</li>\n<li>插入HttpClient.execute()方法的调用并在HttpGet中配置TraceId</li>\n<li>传输打好tag的请求到tomcatB</li>\n<li>从springmvc控制器中记录数据并完成请求</li>\n<li>从tomcatB回来的请求完成时，pp-agent发送跟踪数据到pp-collector存储在hbase</li>\n<li>在对tomcatB的http调用结束后，tomcatA的请求也完成，pp-agent发送跟踪数据到pp-collector存储在HBase中</li>\n<li>UI从Hbase中读取数据并通过排序树来创建调用栈</li>\n</ol>\n<p>整体的应用分析如下图所示</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65s2cda8j21eu0r0k0v.jpg\" alt=\"\" title=\"图9 应用分析\"></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://github.com/naver/pinpoint\" target=\"_blank\" rel=\"external\">Pinpoint源码</a></li>\n<li><a href=\"https://github.com/naver/pinpoint/wiki/Technical-Overview-Of-Pinpoint\" target=\"_blank\" rel=\"external\">Techinal Overview Of Pinpoint (包含中文手册)</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Pinpoint是一个开源的APM(Application Performance Management/应用性能管理)工具，用于基于Java的大规模分布式系统，思路基于google Dapper，用于基于java的大规模分布式系统，通过跟踪分布式应用之间的调用来提供解决方案，以帮助分析系统的总体结构和内部模块之间如何相互联系，其开发的初衷主要基于以下思考元素。</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64c51y2dj21ct0o5afl.jpg\" alt=\"pinpoint\" title=\"图1 监控的提出\"></p>","more":"<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>Point是基于Google Dapper，主要有三个组件：</p>\n<ul>\n<li>pinpoint-collector，日志收集器模块，主要手收集从agent端传来的数据信息并存储</li>\n<li>pinpoint-web，控制台视图模块，主要将collector的数据可视化的展示给用户</li>\n<li>pinpoint-agent，日志代理客户端模块，用于在客户段进行埋点来获取到监控信息</li>\n</ul>\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65eq70ilj21800oin63.jpg\" alt=\"\" title=\"图2 Pinpoint架构\"></p>\n<p>同时使用Hbase作为存储，point主要特点如下图，包括以下几点</p>\n<ul>\n<li>分布式事务跟踪，跟踪跨越分布式应用的消息</li>\n<li>自动检测应用拓扑，帮助你搞清楚应用的架构</li>\n<li>水平拓展以便支持大规模服务器集群</li>\n<li>提供代码级别的可见性以便轻松定位失败点和瓶颈</li>\n<li>使用字节码增强技术，添加新功能无需修改代码(AOP技术)</li>\n</ul>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fl64t0zuysj21b70n843m.jpg\" alt=\"pinpoint\" title=\"图3 Pinpoint主要特点\"></p>\n<p>在比较复杂的系统中利用pinpoint可以有效的看到系统的瓶颈，其常用功能如下所示：</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fl64t43mu4j21e70l0k0k.jpg\" alt=\"pinpoint\" title=\"图4 Pinpoint主要功能\"></p>\n<h2 id=\"主要技术\"><a href=\"#主要技术\" class=\"headerlink\" title=\"主要技术\"></a>主要技术</h2><p>Pinpoint的主要技术设计到分布式事务跟踪，主要分为两个主要技术：事务追踪技术以及字节码增强技术来实现无侵入式的性能监控</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>Pinpoint跟踪单个事务的分布式请求，分布式追踪系统的核心是在分布式系统中识别在Node1中处理的消息和在Node2中出的消息之间的关系。HTTP请求中的HTTP header中为消息添加一个标签信息并使用这个标签跟踪消息，即TraceID，Pinpoint中，核心数据结构由Span，Trace和TraceID组成:</p>\n<ul>\n<li>Span:跟踪的基本单元，包含一个TraceId</li>\n<li>Trace:多个Span集合，由关联的RPC（Spans）组成，同一个trace共享一个相同的TransactionID,Trace通过SpanId和ParentSpanId整理继承树结构。</li>\n<li>TraceID:由 TransactionId, SpanId(64位长度的整型), 和 ParentSpanId(64位长度的整型) 组成的key的集合. TransactionId 指明消息ID，而SpanId 和 ParentSpanId 表示RPC的父-子关系</li>\n<li>TransactionId：AgentIDs(建议使用hostname，服务器IP),JVM启动时间以及序列号组成</li>\n</ul>\n<p>生成唯一性ID的方法，通过中央key服务器来生成key。如果实现这个模式，可能导致性能问题和网络错误，因此，大量生成key被考虑作为备选。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65rkvn6qj215w0niae6.jpg\" alt=\"\" title=\"图5 核心数据结构\"></p>\n<h3 id=\"Trace行为\"><a href=\"#Trace行为\" class=\"headerlink\" title=\"Trace行为\"></a>Trace行为</h3><p>下图5描述在4个节点之间进行3次rpc调用：</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fl65rqgpx9j21bs0nmtdx.jpg\" alt=\"\" title=\"图6 trace行为\"></p>\n<p>上图中，TransactionID(TxId) 体现了三次不同的rpc作为单个事务被相互关联，由于 TransactionID 本身不能精确描述rpc之间的关系，为了识别 rpc 之间的关系，需要 SpanId 和 ParentSpanId， 假设一个节点是 Tomcat， 可以将 SpanId 想象为出力http请求的线程，ParentSpanId 代表发起这个rpc调用的 SpanId。</p>\n<p>SpanId 和 ParentSpanId 是64位长度的整型，由于这个数字是任意生成的，但是考虑到值的范围从 -2^64 ~ 2^64， 不太可能发生冲突，如果发生冲突，系统会让开发者知道发生了什么，而不是去解决冲突。</p>\n<h3 id=\"字节码增强\"><a href=\"#字节码增强\" class=\"headerlink\" title=\"字节码增强\"></a>字节码增强</h3><p>实现分布式事务跟踪的实现方法之一是开发人员自己修改代码，在发生rpc调用的地方开发人员自己添加标签信息，这就需要修改到项目代码，对代码有一定的侵入性，为了解决这个问题，pinpoint中使用了字节码增强技术，由 pinpoint-agent 干预发起rpc的代码来实现自动处理标签信息，如下图</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fl65ryql33j21990mzgom.jpg\" alt=\"\" title=\"图7 字节码增强\"></p>\n<p>在程序编译阶段通过反射方式注入代码来实现无侵入的埋点，这种代码跟踪方式于手工跟踪对比如下图8所示</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65rvfmpsj21520nete5.jpg\" alt=\"\" title=\"图8 性能对比\"></p>\n<p>只需要在项目启动的过程中加入 agent 即可实现性能监控</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">javaagent:$AGENR_PATH/pinpoint-bootstrap.jar</div><div class=\"line\">-Dpinpoint.agentId=&lt;Agent’s UniqueId&gt;</div><div class=\"line\">-Dpinpoint.applicationName=&lt;the name of service&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"应用分析\"><a href=\"#应用分析\" class=\"headerlink\" title=\"应用分析\"></a>应用分析</h2><p>阐述point为每个方法做了什么：</p>\n<ol>\n<li>请求到达tomcatA时，Pinpoint agent产生TraceID</li>\n<li>从springMVC控制器记录数据</li>\n<li>插入HttpClient.execute()方法的调用并在HttpGet中配置TraceId</li>\n<li>传输打好tag的请求到tomcatB</li>\n<li>从springmvc控制器中记录数据并完成请求</li>\n<li>从tomcatB回来的请求完成时，pp-agent发送跟踪数据到pp-collector存储在hbase</li>\n<li>在对tomcatB的http调用结束后，tomcatA的请求也完成，pp-agent发送跟踪数据到pp-collector存储在HBase中</li>\n<li>UI从Hbase中读取数据并通过排序树来创建调用栈</li>\n</ol>\n<p>整体的应用分析如下图所示</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/78d85414ly1fl65s2cda8j21eu0r0k0v.jpg\" alt=\"\" title=\"图9 应用分析\"></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://github.com/naver/pinpoint\" target=\"_blank\" rel=\"external\">Pinpoint源码</a></li>\n<li><a href=\"https://github.com/naver/pinpoint/wiki/Technical-Overview-Of-Pinpoint\" target=\"_blank\" rel=\"external\">Techinal Overview Of Pinpoint (包含中文手册)</a></li>\n</ol>"},{"title":"Sonar代码质量分析使用","date":"2016-12-17T10:47:09.000Z","_content":"## Sonar概述\nSonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。\n\n与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。\n\n![ffmpeg](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouel8vmj21kw0ua0zk.jpg)\n<!-- more -->\n\n在对其他工具的支持方面，Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse 和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。\n此外，Sonar的插件还可以对 Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。\n\n## Sonar安装\n本文主要介绍 Sonar 的使用方法，直接到[Sonar官网](https://www.sonarqube.org)下载最近的发型包即可，本文使用的为最新的版本为6.5(推荐使用最新版)，其源代码可以参考[github地址](https://github.com/SonarSource/sonarqube)。\n\n下载zip包后，直接解压，然后根据应用服务器环境启动 bin 目录下的脚本即可\n\n\n```\nbin/linux-x86-64/sonar.sh -h          // 显示所有命令\nbin/linux-x86-64/sonar.sh start       // 启动，默认为9000端口\n```\n\n然后在浏览器中访问 http://localhost:9000 即可, 初始化用户名和密码为: admin/admin\n\n## Sonar数据库配置\nSonar 默认使用的是 Derby 数据库，但这个数据库一般用于评估版本或者测试用途。商用及对数据库要求较高时，建议使用其他数据库。Sonar 可以支持大多数主流关系型数据库（例如 Microsoft SQL Server, MySQL, Oracle, PostgreSQL 等，本文以 MySQL 为例说明如何更改 Sonar 的数据库设置:\n\n```bash,monokai\nmysql> CREATE USER sonar IDENTIFIED BY 'sonar';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar' WITH GRANT OPTION;\n```\n配置好数据库权限后，修改 sonar.properties 文件配置如下(数据库用户名密码为：sonar/sonar)\n![sonar_config](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwoukblqyj20nr07s404.jpg)\n配置后重新启动sonar即可，此次因为需要创建数据库，重启较慢，重启成功后会在数据库中生成sonar相关的表。\n\n## 使用Sonar进行代码质量管理\n由于本人主要使用 Java 作为开发工具，主要介绍对 Java 代码代码质量管理，sonar默认是不需要登录权限认证就可以上传代码监测报告的，在生产环境中需要打开用户权限，在[配置]->[通用配置]->[权限]中打开即可，如下图所示\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg)\n### Maven集成Sonar\nMaven 插件会自动把所需数据（如单元测试结果、静态检测结果等）上传到 Sonar 服务器上，需要说明的是，关于 Sonar 的配置并不在每个工程的 pom.xml 文件里，而是在 Maven 的配置文件 settings.xml 文件里，涉及到以下 maven 配置项目:\n\n| 配置项 | 作用 | 默认值 |\n|--------|---------|-------|\n| sonar.host.url | sonar服务器地址文件 | http://127.0.0.1:9000|\n| sonar.login | sonar用户名 | 用户或者token(如果利用token则不用密码，推荐这种方式登陆) |\n| sonar.password | sonar密码 | admin |\n#### sonar生成登陆token\n为了强化安全，避免直接暴露出分析用户的密码，使用用户令牌来代替用户登陆,如下图\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouqs7woj21d20vkk4l.jpg)\n\n#### Maven配置文件修改\n具体配置如下:\n\n```bash\n<profile>\n        <id>sonar</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n            <sonar.host.url>http://localhost:9000</sonar.host.url>\n            <sonar.login>93a87b9d138cd836b65c2c52fc5578fc71270707</sonar.login>\n        </properties>\n    </profile>\n```\n编译命令如下\n\n```bash\nmvn clean install\nmvn sonar:sonar\n```\n将 Soanr 所需要的数据上传到 Sonar 服务器上之后，Sonar 安装的插件会对这些数据进行分析和处理，并以各种方式显示给用户，从而使用户方便地对代码质量的监测和管理，之后可以在sonar服务器得到上此次提交代码分析的结果信息，包括代码覆盖率等信息。\n![sonar_auth](http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwouu8uz2j21h00zugr6.jpg)\n\n\n### Sonar配置Gitlab可持续集成\n#### 自动化脚本集成\n如果对项目有持续即成的需要，同时项目是利用gitlab进行托管，给项目配置好runner，则需要在项目目录下建.gitlab-ci.yml文件来自定义命令，具体参照[gitlab-ci使用](https://segmentfault.com/a/1190000006120164)简介 ，这样每次提交的时候都会自动运行脚本，并将生成的报告直接上传到服务器，下面提供一个参考脚本如下\n\n```yml\n# 定义 stages\nstages:\n - review\n - analyze\n# 定义 review\njob1:\n stage: review\n script:\n - /usr/local/sbin/code_analyze --preview    #这条命令主要是将代码分析的信息输出到gitlab的Discussions，只会在分支上运行\n except:\n - master\n# 定义 analyze\njob2:\n stage: analyze\n script:\n - /usr/local/sbin/code_analyze             #这条命令主要是将代码分析的信息同步到sonar服务器，只针对master\n only:\n - master\n```\n\ncode_analyze为脚本文件，主要是对git项目内容进行打包并将相应的代码分析报告上传到sonar服务器，其内容如下\n\n```bash\n#!/bin/bash\nset -e\necho \"test\"\nif [ \"$1\" = \"--preview\" ];then\n    echo ${CI_BUILD_REF}\n    echo ${CI_BUILD_REF_NAME}\n    echo ${CI_PROJECT_DIR}\n    echo ${CI_PROJECT_ID}\n\tsonar_prop=\"-Dsonar.issuesReport.console.enable=true -Dsonar.analysis.mode=preview  -Dsonar.preview.excludePlugins=issueassign,scmstats -Dsonar.gitlab.commit_sha=${CI_BUILD_REF} -Dsonar.gitlab.ref=${CI_BUILD_REF_NAME} -Dsonar.gitlab.project_id=${CI_PROJECT_ID}\"\n    if [ -f \"gradlew\" ]; then\n\t    ./gradlew clean check sonarqube $sonar_prop\n    else\n\t    mvn --batch-mode clean verify sonar:sonar $sonar_prop\n    fi\nelse\n\tsonar_prop=\"-Dsonar.preview.excludePlugins=gitlab\"\n\tif [ -f \"gradlew\" ]; then\n\t\t./gradlew clean check sonarqube $sonar_prop\n\telse\n        #mvn clean org.codehaus.mojo:cobertura-maven-plugin:2.7:cobertura -Dcobertura.report.format=xml -Dcobertura.aggregate=true\n\t\tmvn --batch-mode verify sonar:sonar $sonar_prop\n    fi\nfi\n\n```\n\n#### Sonar写入Gitlab Discussion\n如果希望直接在 gitlab 的每次 Merge_requesrs 中在 gitlab 的 Discussion 中显示出此次代码分析的结果，效果如下\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowereo8j21fg0j6dk1.jpg)\n\n首先，需要gitlab给sonar授权，在 gitlab 中 ［User Settings］中生成 Access Tokens \n![sonar_auth](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwowhpph2j21kw0ubdnt.jpg)\n\n然后在 sonar 的配置页写入token, 如下，由于申请的 token 的作用域为 api, sonar里面配置 scope 为 api\n![sonar_auth](http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwowk9xhsj20x006wwfb.jpg)\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg)\n\n配置完后，在gitlab上之执行Merge Request时候会出发自动构建，同时生成相应的isscus。\n\n## 参考资料 \n1. [Sonar官方文档](https://docs.sonarqube.org/display/SONAR/Documentation)\n2. [Sonar插件下载地址](https://docs.sonarqube.org/display/PLUG/Plugin+Library)\n\n\n\n","source":"_posts/sonar-mannual.md","raw":"---\ntitle: Sonar代码质量分析使用\ndate: 2016-12-17 18:47:09\ncategories:\n- 技术杂谈\ntags:\n- 代码质量分析\n---\n## Sonar概述\nSonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。\n\n与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。\n\n![ffmpeg](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouel8vmj21kw0ua0zk.jpg)\n<!-- more -->\n\n在对其他工具的支持方面，Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse 和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。\n此外，Sonar的插件还可以对 Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。\n\n## Sonar安装\n本文主要介绍 Sonar 的使用方法，直接到[Sonar官网](https://www.sonarqube.org)下载最近的发型包即可，本文使用的为最新的版本为6.5(推荐使用最新版)，其源代码可以参考[github地址](https://github.com/SonarSource/sonarqube)。\n\n下载zip包后，直接解压，然后根据应用服务器环境启动 bin 目录下的脚本即可\n\n\n```\nbin/linux-x86-64/sonar.sh -h          // 显示所有命令\nbin/linux-x86-64/sonar.sh start       // 启动，默认为9000端口\n```\n\n然后在浏览器中访问 http://localhost:9000 即可, 初始化用户名和密码为: admin/admin\n\n## Sonar数据库配置\nSonar 默认使用的是 Derby 数据库，但这个数据库一般用于评估版本或者测试用途。商用及对数据库要求较高时，建议使用其他数据库。Sonar 可以支持大多数主流关系型数据库（例如 Microsoft SQL Server, MySQL, Oracle, PostgreSQL 等，本文以 MySQL 为例说明如何更改 Sonar 的数据库设置:\n\n```bash,monokai\nmysql> CREATE USER sonar IDENTIFIED BY 'sonar';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar' WITH GRANT OPTION;\n```\n配置好数据库权限后，修改 sonar.properties 文件配置如下(数据库用户名密码为：sonar/sonar)\n![sonar_config](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwoukblqyj20nr07s404.jpg)\n配置后重新启动sonar即可，此次因为需要创建数据库，重启较慢，重启成功后会在数据库中生成sonar相关的表。\n\n## 使用Sonar进行代码质量管理\n由于本人主要使用 Java 作为开发工具，主要介绍对 Java 代码代码质量管理，sonar默认是不需要登录权限认证就可以上传代码监测报告的，在生产环境中需要打开用户权限，在[配置]->[通用配置]->[权限]中打开即可，如下图所示\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg)\n### Maven集成Sonar\nMaven 插件会自动把所需数据（如单元测试结果、静态检测结果等）上传到 Sonar 服务器上，需要说明的是，关于 Sonar 的配置并不在每个工程的 pom.xml 文件里，而是在 Maven 的配置文件 settings.xml 文件里，涉及到以下 maven 配置项目:\n\n| 配置项 | 作用 | 默认值 |\n|--------|---------|-------|\n| sonar.host.url | sonar服务器地址文件 | http://127.0.0.1:9000|\n| sonar.login | sonar用户名 | 用户或者token(如果利用token则不用密码，推荐这种方式登陆) |\n| sonar.password | sonar密码 | admin |\n#### sonar生成登陆token\n为了强化安全，避免直接暴露出分析用户的密码，使用用户令牌来代替用户登陆,如下图\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouqs7woj21d20vkk4l.jpg)\n\n#### Maven配置文件修改\n具体配置如下:\n\n```bash\n<profile>\n        <id>sonar</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n            <sonar.host.url>http://localhost:9000</sonar.host.url>\n            <sonar.login>93a87b9d138cd836b65c2c52fc5578fc71270707</sonar.login>\n        </properties>\n    </profile>\n```\n编译命令如下\n\n```bash\nmvn clean install\nmvn sonar:sonar\n```\n将 Soanr 所需要的数据上传到 Sonar 服务器上之后，Sonar 安装的插件会对这些数据进行分析和处理，并以各种方式显示给用户，从而使用户方便地对代码质量的监测和管理，之后可以在sonar服务器得到上此次提交代码分析的结果信息，包括代码覆盖率等信息。\n![sonar_auth](http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwouu8uz2j21h00zugr6.jpg)\n\n\n### Sonar配置Gitlab可持续集成\n#### 自动化脚本集成\n如果对项目有持续即成的需要，同时项目是利用gitlab进行托管，给项目配置好runner，则需要在项目目录下建.gitlab-ci.yml文件来自定义命令，具体参照[gitlab-ci使用](https://segmentfault.com/a/1190000006120164)简介 ，这样每次提交的时候都会自动运行脚本，并将生成的报告直接上传到服务器，下面提供一个参考脚本如下\n\n```yml\n# 定义 stages\nstages:\n - review\n - analyze\n# 定义 review\njob1:\n stage: review\n script:\n - /usr/local/sbin/code_analyze --preview    #这条命令主要是将代码分析的信息输出到gitlab的Discussions，只会在分支上运行\n except:\n - master\n# 定义 analyze\njob2:\n stage: analyze\n script:\n - /usr/local/sbin/code_analyze             #这条命令主要是将代码分析的信息同步到sonar服务器，只针对master\n only:\n - master\n```\n\ncode_analyze为脚本文件，主要是对git项目内容进行打包并将相应的代码分析报告上传到sonar服务器，其内容如下\n\n```bash\n#!/bin/bash\nset -e\necho \"test\"\nif [ \"$1\" = \"--preview\" ];then\n    echo ${CI_BUILD_REF}\n    echo ${CI_BUILD_REF_NAME}\n    echo ${CI_PROJECT_DIR}\n    echo ${CI_PROJECT_ID}\n\tsonar_prop=\"-Dsonar.issuesReport.console.enable=true -Dsonar.analysis.mode=preview  -Dsonar.preview.excludePlugins=issueassign,scmstats -Dsonar.gitlab.commit_sha=${CI_BUILD_REF} -Dsonar.gitlab.ref=${CI_BUILD_REF_NAME} -Dsonar.gitlab.project_id=${CI_PROJECT_ID}\"\n    if [ -f \"gradlew\" ]; then\n\t    ./gradlew clean check sonarqube $sonar_prop\n    else\n\t    mvn --batch-mode clean verify sonar:sonar $sonar_prop\n    fi\nelse\n\tsonar_prop=\"-Dsonar.preview.excludePlugins=gitlab\"\n\tif [ -f \"gradlew\" ]; then\n\t\t./gradlew clean check sonarqube $sonar_prop\n\telse\n        #mvn clean org.codehaus.mojo:cobertura-maven-plugin:2.7:cobertura -Dcobertura.report.format=xml -Dcobertura.aggregate=true\n\t\tmvn --batch-mode verify sonar:sonar $sonar_prop\n    fi\nfi\n\n```\n\n#### Sonar写入Gitlab Discussion\n如果希望直接在 gitlab 的每次 Merge_requesrs 中在 gitlab 的 Discussion 中显示出此次代码分析的结果，效果如下\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowereo8j21fg0j6dk1.jpg)\n\n首先，需要gitlab给sonar授权，在 gitlab 中 ［User Settings］中生成 Access Tokens \n![sonar_auth](http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwowhpph2j21kw0ubdnt.jpg)\n\n然后在 sonar 的配置页写入token, 如下，由于申请的 token 的作用域为 api, sonar里面配置 scope 为 api\n![sonar_auth](http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwowk9xhsj20x006wwfb.jpg)\n![sonar_auth](http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg)\n\n配置完后，在gitlab上之执行Merge Request时候会出发自动构建，同时生成相应的isscus。\n\n## 参考资料 \n1. [Sonar官方文档](https://docs.sonarqube.org/display/SONAR/Documentation)\n2. [Sonar插件下载地址](https://docs.sonarqube.org/display/PLUG/Plugin+Library)\n\n\n\n","slug":"sonar-mannual","published":1,"updated":"2017-12-10T08:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usypi000de1fyagixpwq5","content":"<h2 id=\"Sonar概述\"><a href=\"#Sonar概述\" class=\"headerlink\" title=\"Sonar概述\"></a>Sonar概述</h2><p>Sonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。</p>\n<p>与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouel8vmj21kw0ua0zk.jpg\" alt=\"ffmpeg\"><br><a id=\"more\"></a></p>\n<p>在对其他工具的支持方面，Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse 和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。<br>此外，Sonar的插件还可以对 Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。</p>\n<h2 id=\"Sonar安装\"><a href=\"#Sonar安装\" class=\"headerlink\" title=\"Sonar安装\"></a>Sonar安装</h2><p>本文主要介绍 Sonar 的使用方法，直接到<a href=\"https://www.sonarqube.org\" target=\"_blank\" rel=\"external\">Sonar官网</a>下载最近的发型包即可，本文使用的为最新的版本为6.5(推荐使用最新版)，其源代码可以参考<a href=\"https://github.com/SonarSource/sonarqube\" target=\"_blank\" rel=\"external\">github地址</a>。</p>\n<p>下载zip包后，直接解压，然后根据应用服务器环境启动 bin 目录下的脚本即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/linux-x86-64/sonar.sh -h          // 显示所有命令</div><div class=\"line\">bin/linux-x86-64/sonar.sh start       // 启动，默认为9000端口</div></pre></td></tr></table></figure>\n<p>然后在浏览器中访问 <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"external\">http://localhost:9000</a> 即可, 初始化用户名和密码为: admin/admin</p>\n<h2 id=\"Sonar数据库配置\"><a href=\"#Sonar数据库配置\" class=\"headerlink\" title=\"Sonar数据库配置\"></a>Sonar数据库配置</h2><p>Sonar 默认使用的是 Derby 数据库，但这个数据库一般用于评估版本或者测试用途。商用及对数据库要求较高时，建议使用其他数据库。Sonar 可以支持大多数主流关系型数据库（例如 Microsoft SQL Server, MySQL, Oracle, PostgreSQL 等，本文以 MySQL 为例说明如何更改 Sonar 的数据库设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; CREATE USER sonar IDENTIFIED BY &apos;sonar&apos;;</div><div class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;sonar&apos; WITH GRANT OPTION;</div></pre></td></tr></table></figure>\n<p>配置好数据库权限后，修改 sonar.properties 文件配置如下(数据库用户名密码为：sonar/sonar)<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwoukblqyj20nr07s404.jpg\" alt=\"sonar_config\"><br>配置后重新启动sonar即可，此次因为需要创建数据库，重启较慢，重启成功后会在数据库中生成sonar相关的表。</p>\n<h2 id=\"使用Sonar进行代码质量管理\"><a href=\"#使用Sonar进行代码质量管理\" class=\"headerlink\" title=\"使用Sonar进行代码质量管理\"></a>使用Sonar进行代码质量管理</h2><p>由于本人主要使用 Java 作为开发工具，主要介绍对 Java 代码代码质量管理，sonar默认是不需要登录权限认证就可以上传代码监测报告的，在生产环境中需要打开用户权限，在[配置]-&gt;[通用配置]-&gt;[权限]中打开即可，如下图所示<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg\" alt=\"sonar_auth\"></p>\n<h3 id=\"Maven集成Sonar\"><a href=\"#Maven集成Sonar\" class=\"headerlink\" title=\"Maven集成Sonar\"></a>Maven集成Sonar</h3><p>Maven 插件会自动把所需数据（如单元测试结果、静态检测结果等）上传到 Sonar 服务器上，需要说明的是，关于 Sonar 的配置并不在每个工程的 pom.xml 文件里，而是在 Maven 的配置文件 settings.xml 文件里，涉及到以下 maven 配置项目:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sonar.host.url</td>\n<td>sonar服务器地址文件</td>\n<td><a href=\"http://127.0.0.1:9000\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9000</a></td>\n</tr>\n<tr>\n<td>sonar.login</td>\n<td>sonar用户名</td>\n<td>用户或者token(如果利用token则不用密码，推荐这种方式登陆)</td>\n</tr>\n<tr>\n<td>sonar.password</td>\n<td>sonar密码</td>\n<td>admin</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"sonar生成登陆token\"><a href=\"#sonar生成登陆token\" class=\"headerlink\" title=\"sonar生成登陆token\"></a>sonar生成登陆token</h4><p>为了强化安全，避免直接暴露出分析用户的密码，使用用户令牌来代替用户登陆,如下图<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouqs7woj21d20vkk4l.jpg\" alt=\"sonar_auth\"></p>\n<h4 id=\"Maven配置文件修改\"><a href=\"#Maven配置文件修改\" class=\"headerlink\" title=\"Maven配置文件修改\"></a>Maven配置文件修改</h4><p>具体配置如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;profile&gt;</div><div class=\"line\">        &lt;id&gt;sonar&lt;/id&gt;</div><div class=\"line\">        &lt;activation&gt;</div><div class=\"line\">            &lt;activeByDefault&gt;<span class=\"literal\">true</span>&lt;/activeByDefault&gt;</div><div class=\"line\">        &lt;/activation&gt;</div><div class=\"line\">        &lt;properties&gt;</div><div class=\"line\">            &lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;</div><div class=\"line\">            &lt;sonar.login&gt;93a87b9d138cd836b65c2c52fc5578fc71270707&lt;/sonar.login&gt;</div><div class=\"line\">        &lt;/properties&gt;</div><div class=\"line\">    &lt;/profile&gt;</div></pre></td></tr></table></figure>\n<p>编译命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean install</div><div class=\"line\">mvn sonar:sonar</div></pre></td></tr></table></figure>\n<p>将 Soanr 所需要的数据上传到 Sonar 服务器上之后，Sonar 安装的插件会对这些数据进行分析和处理，并以各种方式显示给用户，从而使用户方便地对代码质量的监测和管理，之后可以在sonar服务器得到上此次提交代码分析的结果信息，包括代码覆盖率等信息。<br><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwouu8uz2j21h00zugr6.jpg\" alt=\"sonar_auth\"></p>\n<h3 id=\"Sonar配置Gitlab可持续集成\"><a href=\"#Sonar配置Gitlab可持续集成\" class=\"headerlink\" title=\"Sonar配置Gitlab可持续集成\"></a>Sonar配置Gitlab可持续集成</h3><h4 id=\"自动化脚本集成\"><a href=\"#自动化脚本集成\" class=\"headerlink\" title=\"自动化脚本集成\"></a>自动化脚本集成</h4><p>如果对项目有持续即成的需要，同时项目是利用gitlab进行托管，给项目配置好runner，则需要在项目目录下建.gitlab-ci.yml文件来自定义命令，具体参照<a href=\"https://segmentfault.com/a/1190000006120164\" target=\"_blank\" rel=\"external\">gitlab-ci使用</a>简介 ，这样每次提交的时候都会自动运行脚本，并将生成的报告直接上传到服务器，下面提供一个参考脚本如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义 stages</span></div><div class=\"line\"><span class=\"attr\">stages:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">review</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">analyze</span></div><div class=\"line\"><span class=\"comment\"># 定义 review</span></div><div class=\"line\"><span class=\"attr\">job1:</span></div><div class=\"line\"><span class=\"attr\"> stage:</span> <span class=\"string\">review</span></div><div class=\"line\"><span class=\"attr\"> script:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">/usr/local/sbin/code_analyze</span> <span class=\"bullet\">--preview</span>    <span class=\"comment\">#这条命令主要是将代码分析的信息输出到gitlab的Discussions，只会在分支上运行</span></div><div class=\"line\"><span class=\"attr\"> except:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">master</span></div><div class=\"line\"><span class=\"comment\"># 定义 analyze</span></div><div class=\"line\"><span class=\"attr\">job2:</span></div><div class=\"line\"><span class=\"attr\"> stage:</span> <span class=\"string\">analyze</span></div><div class=\"line\"><span class=\"attr\"> script:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">/usr/local/sbin/code_analyze</span>             <span class=\"comment\">#这条命令主要是将代码分析的信息同步到sonar服务器，只针对master</span></div><div class=\"line\"><span class=\"attr\"> only:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">master</span></div></pre></td></tr></table></figure>\n<p>code_analyze为脚本文件，主要是对git项目内容进行打包并将相应的代码分析报告上传到sonar服务器，其内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">set</span> -e</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"test\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> = <span class=\"string\">\"--preview\"</span> ];<span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_BUILD_REF&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_BUILD_REF_NAME&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_PROJECT_DIR&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_PROJECT_ID&#125;</span></div><div class=\"line\">\tsonar_prop=<span class=\"string\">\"-Dsonar.issuesReport.console.enable=true -Dsonar.analysis.mode=preview  -Dsonar.preview.excludePlugins=issueassign,scmstats -Dsonar.gitlab.commit_sha=<span class=\"variable\">$&#123;CI_BUILD_REF&#125;</span> -Dsonar.gitlab.ref=<span class=\"variable\">$&#123;CI_BUILD_REF_NAME&#125;</span> -Dsonar.gitlab.project_id=<span class=\"variable\">$&#123;CI_PROJECT_ID&#125;</span>\"</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"gradlew\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">\t    ./gradlew clean check sonarqube <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">\t    mvn --batch-mode clean verify sonar:sonar <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\tsonar_prop=<span class=\"string\">\"-Dsonar.preview.excludePlugins=gitlab\"</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> [ -f <span class=\"string\">\"gradlew\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">\t\t./gradlew clean check sonarqube <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"comment\">#mvn clean org.codehaus.mojo:cobertura-maven-plugin:2.7:cobertura -Dcobertura.report.format=xml -Dcobertura.aggregate=true</span></div><div class=\"line\">\t\tmvn --batch-mode verify sonar:sonar <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h4 id=\"Sonar写入Gitlab-Discussion\"><a href=\"#Sonar写入Gitlab-Discussion\" class=\"headerlink\" title=\"Sonar写入Gitlab Discussion\"></a>Sonar写入Gitlab Discussion</h4><p>如果希望直接在 gitlab 的每次 Merge_requesrs 中在 gitlab 的 Discussion 中显示出此次代码分析的结果，效果如下<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowereo8j21fg0j6dk1.jpg\" alt=\"sonar_auth\"></p>\n<p>首先，需要gitlab给sonar授权，在 gitlab 中 ［User Settings］中生成 Access Tokens<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwowhpph2j21kw0ubdnt.jpg\" alt=\"sonar_auth\"></p>\n<p>然后在 sonar 的配置页写入token, 如下，由于申请的 token 的作用域为 api, sonar里面配置 scope 为 api<br><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwowk9xhsj20x006wwfb.jpg\" alt=\"sonar_auth\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg\" alt=\"sonar_auth\"></p>\n<p>配置完后，在gitlab上之执行Merge Request时候会出发自动构建，同时生成相应的isscus。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://docs.sonarqube.org/display/SONAR/Documentation\" target=\"_blank\" rel=\"external\">Sonar官方文档</a></li>\n<li><a href=\"https://docs.sonarqube.org/display/PLUG/Plugin+Library\" target=\"_blank\" rel=\"external\">Sonar插件下载地址</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Sonar概述\"><a href=\"#Sonar概述\" class=\"headerlink\" title=\"Sonar概述\"></a>Sonar概述</h2><p>Sonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。</p>\n<p>与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouel8vmj21kw0ua0zk.jpg\" alt=\"ffmpeg\"><br>","more":"</p>\n<p>在对其他工具的支持方面，Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse 和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。<br>此外，Sonar的插件还可以对 Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。</p>\n<h2 id=\"Sonar安装\"><a href=\"#Sonar安装\" class=\"headerlink\" title=\"Sonar安装\"></a>Sonar安装</h2><p>本文主要介绍 Sonar 的使用方法，直接到<a href=\"https://www.sonarqube.org\" target=\"_blank\" rel=\"external\">Sonar官网</a>下载最近的发型包即可，本文使用的为最新的版本为6.5(推荐使用最新版)，其源代码可以参考<a href=\"https://github.com/SonarSource/sonarqube\" target=\"_blank\" rel=\"external\">github地址</a>。</p>\n<p>下载zip包后，直接解压，然后根据应用服务器环境启动 bin 目录下的脚本即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/linux-x86-64/sonar.sh -h          // 显示所有命令</div><div class=\"line\">bin/linux-x86-64/sonar.sh start       // 启动，默认为9000端口</div></pre></td></tr></table></figure>\n<p>然后在浏览器中访问 <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"external\">http://localhost:9000</a> 即可, 初始化用户名和密码为: admin/admin</p>\n<h2 id=\"Sonar数据库配置\"><a href=\"#Sonar数据库配置\" class=\"headerlink\" title=\"Sonar数据库配置\"></a>Sonar数据库配置</h2><p>Sonar 默认使用的是 Derby 数据库，但这个数据库一般用于评估版本或者测试用途。商用及对数据库要求较高时，建议使用其他数据库。Sonar 可以支持大多数主流关系型数据库（例如 Microsoft SQL Server, MySQL, Oracle, PostgreSQL 等，本文以 MySQL 为例说明如何更改 Sonar 的数据库设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; CREATE USER sonar IDENTIFIED BY &apos;sonar&apos;;</div><div class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;sonar&apos; WITH GRANT OPTION;</div></pre></td></tr></table></figure>\n<p>配置好数据库权限后，修改 sonar.properties 文件配置如下(数据库用户名密码为：sonar/sonar)<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwoukblqyj20nr07s404.jpg\" alt=\"sonar_config\"><br>配置后重新启动sonar即可，此次因为需要创建数据库，重启较慢，重启成功后会在数据库中生成sonar相关的表。</p>\n<h2 id=\"使用Sonar进行代码质量管理\"><a href=\"#使用Sonar进行代码质量管理\" class=\"headerlink\" title=\"使用Sonar进行代码质量管理\"></a>使用Sonar进行代码质量管理</h2><p>由于本人主要使用 Java 作为开发工具，主要介绍对 Java 代码代码质量管理，sonar默认是不需要登录权限认证就可以上传代码监测报告的，在生产环境中需要打开用户权限，在[配置]-&gt;[通用配置]-&gt;[权限]中打开即可，如下图所示<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg\" alt=\"sonar_auth\"></p>\n<h3 id=\"Maven集成Sonar\"><a href=\"#Maven集成Sonar\" class=\"headerlink\" title=\"Maven集成Sonar\"></a>Maven集成Sonar</h3><p>Maven 插件会自动把所需数据（如单元测试结果、静态检测结果等）上传到 Sonar 服务器上，需要说明的是，关于 Sonar 的配置并不在每个工程的 pom.xml 文件里，而是在 Maven 的配置文件 settings.xml 文件里，涉及到以下 maven 配置项目:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sonar.host.url</td>\n<td>sonar服务器地址文件</td>\n<td><a href=\"http://127.0.0.1:9000\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9000</a></td>\n</tr>\n<tr>\n<td>sonar.login</td>\n<td>sonar用户名</td>\n<td>用户或者token(如果利用token则不用密码，推荐这种方式登陆)</td>\n</tr>\n<tr>\n<td>sonar.password</td>\n<td>sonar密码</td>\n<td>admin</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"sonar生成登陆token\"><a href=\"#sonar生成登陆token\" class=\"headerlink\" title=\"sonar生成登陆token\"></a>sonar生成登陆token</h4><p>为了强化安全，避免直接暴露出分析用户的密码，使用用户令牌来代替用户登陆,如下图<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwouqs7woj21d20vkk4l.jpg\" alt=\"sonar_auth\"></p>\n<h4 id=\"Maven配置文件修改\"><a href=\"#Maven配置文件修改\" class=\"headerlink\" title=\"Maven配置文件修改\"></a>Maven配置文件修改</h4><p>具体配置如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;profile&gt;</div><div class=\"line\">        &lt;id&gt;sonar&lt;/id&gt;</div><div class=\"line\">        &lt;activation&gt;</div><div class=\"line\">            &lt;activeByDefault&gt;<span class=\"literal\">true</span>&lt;/activeByDefault&gt;</div><div class=\"line\">        &lt;/activation&gt;</div><div class=\"line\">        &lt;properties&gt;</div><div class=\"line\">            &lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;</div><div class=\"line\">            &lt;sonar.login&gt;93a87b9d138cd836b65c2c52fc5578fc71270707&lt;/sonar.login&gt;</div><div class=\"line\">        &lt;/properties&gt;</div><div class=\"line\">    &lt;/profile&gt;</div></pre></td></tr></table></figure>\n<p>编译命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean install</div><div class=\"line\">mvn sonar:sonar</div></pre></td></tr></table></figure>\n<p>将 Soanr 所需要的数据上传到 Sonar 服务器上之后，Sonar 安装的插件会对这些数据进行分析和处理，并以各种方式显示给用户，从而使用户方便地对代码质量的监测和管理，之后可以在sonar服务器得到上此次提交代码分析的结果信息，包括代码覆盖率等信息。<br><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwouu8uz2j21h00zugr6.jpg\" alt=\"sonar_auth\"></p>\n<h3 id=\"Sonar配置Gitlab可持续集成\"><a href=\"#Sonar配置Gitlab可持续集成\" class=\"headerlink\" title=\"Sonar配置Gitlab可持续集成\"></a>Sonar配置Gitlab可持续集成</h3><h4 id=\"自动化脚本集成\"><a href=\"#自动化脚本集成\" class=\"headerlink\" title=\"自动化脚本集成\"></a>自动化脚本集成</h4><p>如果对项目有持续即成的需要，同时项目是利用gitlab进行托管，给项目配置好runner，则需要在项目目录下建.gitlab-ci.yml文件来自定义命令，具体参照<a href=\"https://segmentfault.com/a/1190000006120164\" target=\"_blank\" rel=\"external\">gitlab-ci使用</a>简介 ，这样每次提交的时候都会自动运行脚本，并将生成的报告直接上传到服务器，下面提供一个参考脚本如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义 stages</span></div><div class=\"line\"><span class=\"attr\">stages:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">review</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">analyze</span></div><div class=\"line\"><span class=\"comment\"># 定义 review</span></div><div class=\"line\"><span class=\"attr\">job1:</span></div><div class=\"line\"><span class=\"attr\"> stage:</span> <span class=\"string\">review</span></div><div class=\"line\"><span class=\"attr\"> script:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">/usr/local/sbin/code_analyze</span> <span class=\"bullet\">--preview</span>    <span class=\"comment\">#这条命令主要是将代码分析的信息输出到gitlab的Discussions，只会在分支上运行</span></div><div class=\"line\"><span class=\"attr\"> except:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">master</span></div><div class=\"line\"><span class=\"comment\"># 定义 analyze</span></div><div class=\"line\"><span class=\"attr\">job2:</span></div><div class=\"line\"><span class=\"attr\"> stage:</span> <span class=\"string\">analyze</span></div><div class=\"line\"><span class=\"attr\"> script:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">/usr/local/sbin/code_analyze</span>             <span class=\"comment\">#这条命令主要是将代码分析的信息同步到sonar服务器，只针对master</span></div><div class=\"line\"><span class=\"attr\"> only:</span></div><div class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">master</span></div></pre></td></tr></table></figure>\n<p>code_analyze为脚本文件，主要是对git项目内容进行打包并将相应的代码分析报告上传到sonar服务器，其内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">set</span> -e</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"test\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> = <span class=\"string\">\"--preview\"</span> ];<span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_BUILD_REF&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_BUILD_REF_NAME&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_PROJECT_DIR&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;CI_PROJECT_ID&#125;</span></div><div class=\"line\">\tsonar_prop=<span class=\"string\">\"-Dsonar.issuesReport.console.enable=true -Dsonar.analysis.mode=preview  -Dsonar.preview.excludePlugins=issueassign,scmstats -Dsonar.gitlab.commit_sha=<span class=\"variable\">$&#123;CI_BUILD_REF&#125;</span> -Dsonar.gitlab.ref=<span class=\"variable\">$&#123;CI_BUILD_REF_NAME&#125;</span> -Dsonar.gitlab.project_id=<span class=\"variable\">$&#123;CI_PROJECT_ID&#125;</span>\"</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"gradlew\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">\t    ./gradlew clean check sonarqube <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">\t    mvn --batch-mode clean verify sonar:sonar <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\tsonar_prop=<span class=\"string\">\"-Dsonar.preview.excludePlugins=gitlab\"</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> [ -f <span class=\"string\">\"gradlew\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">\t\t./gradlew clean check sonarqube <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"comment\">#mvn clean org.codehaus.mojo:cobertura-maven-plugin:2.7:cobertura -Dcobertura.report.format=xml -Dcobertura.aggregate=true</span></div><div class=\"line\">\t\tmvn --batch-mode verify sonar:sonar <span class=\"variable\">$sonar_prop</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h4 id=\"Sonar写入Gitlab-Discussion\"><a href=\"#Sonar写入Gitlab-Discussion\" class=\"headerlink\" title=\"Sonar写入Gitlab Discussion\"></a>Sonar写入Gitlab Discussion</h4><p>如果希望直接在 gitlab 的每次 Merge_requesrs 中在 gitlab 的 Discussion 中显示出此次代码分析的结果，效果如下<br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowereo8j21fg0j6dk1.jpg\" alt=\"sonar_auth\"></p>\n<p>首先，需要gitlab给sonar授权，在 gitlab 中 ［User Settings］中生成 Access Tokens<br><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fkwowhpph2j21kw0ubdnt.jpg\" alt=\"sonar_auth\"></p>\n<p>然后在 sonar 的配置页写入token, 如下，由于申请的 token 的作用域为 api, sonar里面配置 scope 为 api<br><img src=\"http://wx1.sinaimg.cn/mw1024/78d85414ly1fkwowk9xhsj20x006wwfb.jpg\" alt=\"sonar_auth\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/78d85414ly1fkwowmxps5j20wi06mq3r.jpg\" alt=\"sonar_auth\"></p>\n<p>配置完后，在gitlab上之执行Merge Request时候会出发自动构建，同时生成相应的isscus。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://docs.sonarqube.org/display/SONAR/Documentation\" target=\"_blank\" rel=\"external\">Sonar官方文档</a></li>\n<li><a href=\"https://docs.sonarqube.org/display/PLUG/Plugin+Library\" target=\"_blank\" rel=\"external\">Sonar插件下载地址</a></li>\n</ol>"},{"title":"用 Quartz 进行作业调度","date":"2017-02-15T22:27:29.000Z","_content":"\n","source":"_posts/springboot-quartz.md","raw":"---\ntitle: 用 Quartz 进行作业调度\ndate: 2017-02-16 06:27:29\ncategories:\n- 技术杂谈\ntags:\n- Java\n---\n\n","slug":"springboot-quartz","published":1,"updated":"2018-01-01T22:48:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usypl000ee1fyyt0u1e5o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"针对在线广告系统流量预估的研究","date":"2017-03-14T06:45:38.000Z","mathjax":true,"_content":"<script type=\"text/javascript\" async\n  src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\">\n</script>\n\n> 本文主要是针对国外的计算广告论文 Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b 进行技术学习的一次分享，\b同时拓\b\b展性的研究了竞价\b预算和流量预测的方法，具体的参考论文见最后的参考文献地址\n\n随着互联网的发展和用户的增长，广告行业从传统的线下广告模式，逐步转变为线上广告模式，同时，由于大数据分析技术的运用，线上广告模式相比于传统广告也体现了巨大的优越性。广告主之间相互竞争，通过竞价的方式，将自己的广告投放在运营媒体的广告位上。\n\n对需求方\b平台算法的优化是广大广告主的诉求，是广告网络产品透明化和开放化的催生产物，使得线上广告变得越来越依赖大数据和计算导向的方向发展。\b预算控制和流量预估\b的研究是\b当前的一个热点，流量预测直接影响到广告主获得优质广告流量的能力，\b进而决定广告预算的性价比\b并影响广告营销的效果，成为\bDSP系统(Demand Side Platfrom, 需求方平台)中十分重要的一个环节。\n\n![](http://wx2.sinaimg.cn/mw690/78d85414ly1fo48r9x850j20x40hagtp.jpg \"图1 实时竞价系统的工作流\")\n\n## 预算控制(Budget Control)\n### 预算控制的意义\n通过实时竞价方式投放在线广告，能够更为准确地将广告的预算花费到那些更有可能产生回报的广告展示机会上，从而使广告收益得到优化，通常情况下，广告商需要为\b每个广告营销\b活动设置投放\b周期内的预算，需求方平台按照一系列优化算法买下尽可能多的\b符合广告目标\b群体的广告展示\b机会，\b因此，在有限预算的情况下对每次广告展示机会进行出价并给出合理的竞标价格是实时竞价的关键，而针对此的优化算法的主要目标分为\b以下几点：\n\n1. 满足广告预算的花销计划，广告主希望在广告活动周期内相对平稳的消耗预算，保证在更长时间内有曝光效果，拥有持续性的广告推广效果。\n2. 降低数据资讯花费，DSP 通常需要结合自己的第一方数据和来自 DMP 的\b第三方数据，更好的进行性能评估而做出更理想的决策，减少不必要的数据咨询次数可以降低这方面的经济花销。\n3. 同时得到广告的投放和性能\b目标，对效果\b类广告来说首要任务是获得性能目标，尽可能的找到更多潜在的客户，对于品牌广告而言则需要达到更多的人群接触，获得\b更多的投放机会。\n\n\b为了实现后两个目标，\b需要依赖广告预算步进算法(Budget Pacing)，步进算法是指对于各种历史行为数据的分析，得出一个符合近期趋势的广告预算的分配计划，这个分配计划是预算的花销额与实践的变化趋势，\b且去要控制时机的花销进度去\b接近这个分配计划来最终保证预算的按计划分配。\n\n对于\b那些没有预算分配计划的广告活动，如图上图所示，可能出现集中恶性的结果：\n\n1. 广告主的\b广告活动在一天中较早\b的时间就完全耗尽。而错失之后可能出现的高价值广告流量购买机会。\n2. 广告主的出价整体偏低的，难以\b赢得adx的竞拍，导致预算花费进度不如预期而出现预算剩余，难以达到广告投放目标。\n\n\n### 理想的预算控制\n![](http://wx2.sinaimg.cn/mw1024/78d85414ly1fo4g8zaomvj211y0i3mx7.jpg \"图2 竞标和曝光次数趋势图\")\n\n为了解决上面的问题，Joaquin等人利用动态规划和变分法证明了理想的预算花费不是线性也不是均匀的，而是正比于广告交易量，也就是广告流量，因此，就产生了一种根据广告流量变化趋势的分配计划，如上图所示。将分配计划正比于广告流量的变化趋势能够使的广告投放到一天内任何一个用户的几率均等，最大程度地保证广告均匀的分配到受众群体上，而不是均匀分布在每个时间段内。\n\n### 流量预测(Traffic Prediction)\n论文\b中提到的流量预测的方法都是基于高维度的\b特征\b提取然后建模\b\b预估\b流量，由于\b可能存在上万种特征，\b如果不进行降维处理，\b很难进行运算，因此，从\b用户特征，上下文，广告属性上万个特征\b中抽取出具有代表性的基准特征，当产生一次预测时，通过这几种基准特征为标准建立模型来预测流量，这种\b方法需要极大的训练样本和训练时间，很难在工程上实现。\n\n## 论文具体算法实现\n\n### 流量问题分析\n在实际的广告系统中，\b\b广告请求数高度依赖于用户的行为，与此同时，用户的行为模式具有一定的规律性，工作日和休息日，白天和晚上所带来的流量请求均有即可循，因此，通过分析用户的行为来预测在线广告的流量走势具有一定的可操作性。\n\n由于不同的时间段流量差异较大，该文将一天按时间分为T个时间段，如果取$T = 24$， 则每天的每个时间段为一\b个小时，因此，对流量问题的分析模型可以量化为以下公式的求极值的问题。\n\n{% raw %}\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(h({X_{d,t}};\\Theta ),{Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n{% endraw %}\n其中，$D$ 为\b训练数据的天数， ${Y_{d,t}}$ 为在 d \b天的 t 时刻的实际流量，${h({X_{d,t}};\\Theta )}$ 为预测模型函数，计算值和实际值的均方差为损失函数，通过训练，寻找\b最优的模型来\b\b使得损失函数最小。\n\n### 系统框架\n\n\n\n\n### 特征选取\n从dsp的角度出发，而不是单纯的利用在线广告的一些特征，提取出一下三个特征\n\n1. LastNDayReqs: 最近N天的当前Slot点的请求数\n2. LastSlotReqs: 上一次Slot点的请求数(主要针对流量异常的解决方案)\n3. SlotNumber: 当前的时间段\n\n其中前两个参数分别代表了长期和短期因素对流量的影响，如果仅仅使用这两个元素的，进行流量预测产生的结果如下所示，\n\n![](http://wx3.sinaimg.cn/mw690/78d85414ly1fnylmc94zaj215w0i60x0.jpg \"图2 忽略SlotNumber预测结果对比\")\n\n通过图中的对比可以发现，在任意时段对于流量的预测都过高或者过低，当流量发生变化的时候，对于流量的预测总是滞后于实际的流量值，因此，选择 SlotNumber 这一特征来弥补这种差距。\n\nSlotNum 是长度为 T 的一个二进制的一维数组，对于其定义如下\n{% raw %}\n$$SlotNu{m^k}(i) = 1,k = i$$\n$$SlotNu{m^k}(i) = 0,k \\ne i$$\n{% endraw %}\n其中 ${i \\in (1,T)}$，\b举个例子，\b\b\b当T=24时，则\n{% raw %}\n$$SlotNu{m^1} = [1,0.......0,0]$$\n{% endraw %}\n### 流量异常处理\n由于在\b实际的线上广告系统中，其\b每天的流量规律往往不是一成不变的，\b对于流量的预测需要将流量异常的情况考虑在内，产生异常流量的原因主要包括两个部分，一是\b由于突发性事件造成的流量异常，例如某次事件的爆发，某次网络的迁移等，还有一种就是一种流量趋势的变化，在对流量建模的过程中需要将这种异常情况对于因变量进行一种平滑处理，为了解决流量异常的问题，通过综合考虑前k天的数据来对异常点的流量进行平滑处理。\n### SmoothedLastSlotReqs\n通过均衡前k天的t时间点的流量来判断t时间点的流量是否正常，其具体的步骤如下:\n\n1. 获取到上一个时间点t的流量值, 计为\n{% raw %}\n  $$originalLastReqs = Reqs(0,t)$$\n{% endraw %}  \n其中 $t$ 为\b\b当天的时间点，$Reqs$ 为前k天的流量数据，其为二维数组 \n\n2. \b计算前k\b天的算术平均值和几何平均值\n{% raw %}\n$$avg = {1 \\over k}\\sum\\limits_{i = 1}^k {Reqs(i,t)} $$\n$$st{d^2} = {1 \\over k}\\sum\\limits_i^k {{{(reqs(i,t) - avg)}^2}} $$\n{% endraw %} \n3. 判断实际流量是否是异常流量，如果是正常流量，则不\b进行平滑，否则进行平滑操作得到最终的 \n{% raw %}\n$${{\\left\\| {originalLastReqs - avg} \\right\\|} \\over {std}} > tol$$\n{% endraw %} \n其中tol为设定的阈值，根据\b经验值取，如果该计算结果大于预知，则\n{% raw %}\n$$lastSlotReq{s^{k + 1}} = {\\rm{ }}\\prod\\limits_{i = 0}^k {Reqs(k,t)} $$\n{% endraw %}\n反之，则\n{% raw %}\n$$lastSlotReqs = originalLastReqs$$\n{% endraw %}\n### SmoothedNDayReqs\n对于 $SmoothedNDayReqs$ 参数的平滑操作类似，由于该特征代表着对于流量的一种长期的效应，如果流量呈现一种上升或者下降的趋势，该特征需要能反映出这种趋势，\b对于该特征的值的计算如下：\n{% raw %}\n$$lastNDaysReq{s^k} = \\prod\\limits_{i = 1}^k {Reqs(t + 1,i)} $$\n{% endraw %}\n### PredictTraffic\n\b由于对于损失函数的最优化计算是一个不适定的过程，\b\b通过引入正则项来求出其最优解，对于公式1增加正则项目\b修改如下：\n{% raw %}\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(({\\omega ^T}{X_{d,t}} + b) - {Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n{% endraw %}\n其中， {% raw %}${X_{d,t}} = [lastNDayreqs,lastSLotreqs,slotNum]$ , ${{\\omega ^T}}$ {% endraw %}和$b$为正则项，\b通过\b找到\b使得损失函数最小的$({\\omega ^T},b)$来求的最优化模型，\b\b得到最优化模型后对于流量预测到步骤如下所示：\n\n1. 获取到最新的最近的流量计为$Reqs(i,j)$,其中 $i$ 为\b\b\b\b\b\b天数，$j$ 为时间片的值。\n2. 获取到需要进行预测的时间片的值，计为 $t$。\n3. 计算参数 \b$lastNDayReq{s_t} = SmoothNDayReqs(Reqs,t,T,k)$\n4. 计算参数\b $lastSlotReq{s_t} = SmoothLastSlotReqs(Reqs,t,T,k)$\n5. \b\b${X_{t}} = [lastNDayreqs_{t},lastSLotreqs_{t},slotNum_{t}]$\n6. 将参数带入模型计算预测值$h({X_t};\\omega ,b)$\n\n## 参考文献\n\n1. [ Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b](https://github.com/wzhe06/Ad-papers/blob/master/Budget%20Control/Predicting%20Traffic%20of%20Online%20Advertising%20in%20Real-time%20Bidding%20Systems%20from%20Perspective%20of%20Demand-Side%20Platforms.pdf)\n2. [Facebook 广告系统背后的Pacing算法](https://developers.facebook.com/docs/marketing-api/pacing)\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/traffic.md","raw":"---\ntitle: 针对在线广告系统流量预估的研究\ndate: 2017-03-14 14:45:38\ncategories:\n- 技术杂谈\ntags:\n- 计算广告\nmathjax: true\n---\n<script type=\"text/javascript\" async\n  src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\">\n</script>\n\n> 本文主要是针对国外的计算广告论文 Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b 进行技术学习的一次分享，\b同时拓\b\b展性的研究了竞价\b预算和流量预测的方法，具体的参考论文见最后的参考文献地址\n\n随着互联网的发展和用户的增长，广告行业从传统的线下广告模式，逐步转变为线上广告模式，同时，由于大数据分析技术的运用，线上广告模式相比于传统广告也体现了巨大的优越性。广告主之间相互竞争，通过竞价的方式，将自己的广告投放在运营媒体的广告位上。\n\n对需求方\b平台算法的优化是广大广告主的诉求，是广告网络产品透明化和开放化的催生产物，使得线上广告变得越来越依赖大数据和计算导向的方向发展。\b预算控制和流量预估\b的研究是\b当前的一个热点，流量预测直接影响到广告主获得优质广告流量的能力，\b进而决定广告预算的性价比\b并影响广告营销的效果，成为\bDSP系统(Demand Side Platfrom, 需求方平台)中十分重要的一个环节。\n\n![](http://wx2.sinaimg.cn/mw690/78d85414ly1fo48r9x850j20x40hagtp.jpg \"图1 实时竞价系统的工作流\")\n\n## 预算控制(Budget Control)\n### 预算控制的意义\n通过实时竞价方式投放在线广告，能够更为准确地将广告的预算花费到那些更有可能产生回报的广告展示机会上，从而使广告收益得到优化，通常情况下，广告商需要为\b每个广告营销\b活动设置投放\b周期内的预算，需求方平台按照一系列优化算法买下尽可能多的\b符合广告目标\b群体的广告展示\b机会，\b因此，在有限预算的情况下对每次广告展示机会进行出价并给出合理的竞标价格是实时竞价的关键，而针对此的优化算法的主要目标分为\b以下几点：\n\n1. 满足广告预算的花销计划，广告主希望在广告活动周期内相对平稳的消耗预算，保证在更长时间内有曝光效果，拥有持续性的广告推广效果。\n2. 降低数据资讯花费，DSP 通常需要结合自己的第一方数据和来自 DMP 的\b第三方数据，更好的进行性能评估而做出更理想的决策，减少不必要的数据咨询次数可以降低这方面的经济花销。\n3. 同时得到广告的投放和性能\b目标，对效果\b类广告来说首要任务是获得性能目标，尽可能的找到更多潜在的客户，对于品牌广告而言则需要达到更多的人群接触，获得\b更多的投放机会。\n\n\b为了实现后两个目标，\b需要依赖广告预算步进算法(Budget Pacing)，步进算法是指对于各种历史行为数据的分析，得出一个符合近期趋势的广告预算的分配计划，这个分配计划是预算的花销额与实践的变化趋势，\b且去要控制时机的花销进度去\b接近这个分配计划来最终保证预算的按计划分配。\n\n对于\b那些没有预算分配计划的广告活动，如图上图所示，可能出现集中恶性的结果：\n\n1. 广告主的\b广告活动在一天中较早\b的时间就完全耗尽。而错失之后可能出现的高价值广告流量购买机会。\n2. 广告主的出价整体偏低的，难以\b赢得adx的竞拍，导致预算花费进度不如预期而出现预算剩余，难以达到广告投放目标。\n\n\n### 理想的预算控制\n![](http://wx2.sinaimg.cn/mw1024/78d85414ly1fo4g8zaomvj211y0i3mx7.jpg \"图2 竞标和曝光次数趋势图\")\n\n为了解决上面的问题，Joaquin等人利用动态规划和变分法证明了理想的预算花费不是线性也不是均匀的，而是正比于广告交易量，也就是广告流量，因此，就产生了一种根据广告流量变化趋势的分配计划，如上图所示。将分配计划正比于广告流量的变化趋势能够使的广告投放到一天内任何一个用户的几率均等，最大程度地保证广告均匀的分配到受众群体上，而不是均匀分布在每个时间段内。\n\n### 流量预测(Traffic Prediction)\n论文\b中提到的流量预测的方法都是基于高维度的\b特征\b提取然后建模\b\b预估\b流量，由于\b可能存在上万种特征，\b如果不进行降维处理，\b很难进行运算，因此，从\b用户特征，上下文，广告属性上万个特征\b中抽取出具有代表性的基准特征，当产生一次预测时，通过这几种基准特征为标准建立模型来预测流量，这种\b方法需要极大的训练样本和训练时间，很难在工程上实现。\n\n## 论文具体算法实现\n\n### 流量问题分析\n在实际的广告系统中，\b\b广告请求数高度依赖于用户的行为，与此同时，用户的行为模式具有一定的规律性，工作日和休息日，白天和晚上所带来的流量请求均有即可循，因此，通过分析用户的行为来预测在线广告的流量走势具有一定的可操作性。\n\n由于不同的时间段流量差异较大，该文将一天按时间分为T个时间段，如果取$T = 24$， 则每天的每个时间段为一\b个小时，因此，对流量问题的分析模型可以量化为以下公式的求极值的问题。\n\n{% raw %}\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(h({X_{d,t}};\\Theta ),{Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n{% endraw %}\n其中，$D$ 为\b训练数据的天数， ${Y_{d,t}}$ 为在 d \b天的 t 时刻的实际流量，${h({X_{d,t}};\\Theta )}$ 为预测模型函数，计算值和实际值的均方差为损失函数，通过训练，寻找\b最优的模型来\b\b使得损失函数最小。\n\n### 系统框架\n\n\n\n\n### 特征选取\n从dsp的角度出发，而不是单纯的利用在线广告的一些特征，提取出一下三个特征\n\n1. LastNDayReqs: 最近N天的当前Slot点的请求数\n2. LastSlotReqs: 上一次Slot点的请求数(主要针对流量异常的解决方案)\n3. SlotNumber: 当前的时间段\n\n其中前两个参数分别代表了长期和短期因素对流量的影响，如果仅仅使用这两个元素的，进行流量预测产生的结果如下所示，\n\n![](http://wx3.sinaimg.cn/mw690/78d85414ly1fnylmc94zaj215w0i60x0.jpg \"图2 忽略SlotNumber预测结果对比\")\n\n通过图中的对比可以发现，在任意时段对于流量的预测都过高或者过低，当流量发生变化的时候，对于流量的预测总是滞后于实际的流量值，因此，选择 SlotNumber 这一特征来弥补这种差距。\n\nSlotNum 是长度为 T 的一个二进制的一维数组，对于其定义如下\n{% raw %}\n$$SlotNu{m^k}(i) = 1,k = i$$\n$$SlotNu{m^k}(i) = 0,k \\ne i$$\n{% endraw %}\n其中 ${i \\in (1,T)}$，\b举个例子，\b\b\b当T=24时，则\n{% raw %}\n$$SlotNu{m^1} = [1,0.......0,0]$$\n{% endraw %}\n### 流量异常处理\n由于在\b实际的线上广告系统中，其\b每天的流量规律往往不是一成不变的，\b对于流量的预测需要将流量异常的情况考虑在内，产生异常流量的原因主要包括两个部分，一是\b由于突发性事件造成的流量异常，例如某次事件的爆发，某次网络的迁移等，还有一种就是一种流量趋势的变化，在对流量建模的过程中需要将这种异常情况对于因变量进行一种平滑处理，为了解决流量异常的问题，通过综合考虑前k天的数据来对异常点的流量进行平滑处理。\n### SmoothedLastSlotReqs\n通过均衡前k天的t时间点的流量来判断t时间点的流量是否正常，其具体的步骤如下:\n\n1. 获取到上一个时间点t的流量值, 计为\n{% raw %}\n  $$originalLastReqs = Reqs(0,t)$$\n{% endraw %}  \n其中 $t$ 为\b\b当天的时间点，$Reqs$ 为前k天的流量数据，其为二维数组 \n\n2. \b计算前k\b天的算术平均值和几何平均值\n{% raw %}\n$$avg = {1 \\over k}\\sum\\limits_{i = 1}^k {Reqs(i,t)} $$\n$$st{d^2} = {1 \\over k}\\sum\\limits_i^k {{{(reqs(i,t) - avg)}^2}} $$\n{% endraw %} \n3. 判断实际流量是否是异常流量，如果是正常流量，则不\b进行平滑，否则进行平滑操作得到最终的 \n{% raw %}\n$${{\\left\\| {originalLastReqs - avg} \\right\\|} \\over {std}} > tol$$\n{% endraw %} \n其中tol为设定的阈值，根据\b经验值取，如果该计算结果大于预知，则\n{% raw %}\n$$lastSlotReq{s^{k + 1}} = {\\rm{ }}\\prod\\limits_{i = 0}^k {Reqs(k,t)} $$\n{% endraw %}\n反之，则\n{% raw %}\n$$lastSlotReqs = originalLastReqs$$\n{% endraw %}\n### SmoothedNDayReqs\n对于 $SmoothedNDayReqs$ 参数的平滑操作类似，由于该特征代表着对于流量的一种长期的效应，如果流量呈现一种上升或者下降的趋势，该特征需要能反映出这种趋势，\b对于该特征的值的计算如下：\n{% raw %}\n$$lastNDaysReq{s^k} = \\prod\\limits_{i = 1}^k {Reqs(t + 1,i)} $$\n{% endraw %}\n### PredictTraffic\n\b由于对于损失函数的最优化计算是一个不适定的过程，\b\b通过引入正则项来求出其最优解，对于公式1增加正则项目\b修改如下：\n{% raw %}\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(({\\omega ^T}{X_{d,t}} + b) - {Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n{% endraw %}\n其中， {% raw %}${X_{d,t}} = [lastNDayreqs,lastSLotreqs,slotNum]$ , ${{\\omega ^T}}$ {% endraw %}和$b$为正则项，\b通过\b找到\b使得损失函数最小的$({\\omega ^T},b)$来求的最优化模型，\b\b得到最优化模型后对于流量预测到步骤如下所示：\n\n1. 获取到最新的最近的流量计为$Reqs(i,j)$,其中 $i$ 为\b\b\b\b\b\b天数，$j$ 为时间片的值。\n2. 获取到需要进行预测的时间片的值，计为 $t$。\n3. 计算参数 \b$lastNDayReq{s_t} = SmoothNDayReqs(Reqs,t,T,k)$\n4. 计算参数\b $lastSlotReq{s_t} = SmoothLastSlotReqs(Reqs,t,T,k)$\n5. \b\b${X_{t}} = [lastNDayreqs_{t},lastSLotreqs_{t},slotNum_{t}]$\n6. 将参数带入模型计算预测值$h({X_t};\\omega ,b)$\n\n## 参考文献\n\n1. [ Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b](https://github.com/wzhe06/Ad-papers/blob/master/Budget%20Control/Predicting%20Traffic%20of%20Online%20Advertising%20in%20Real-time%20Bidding%20Systems%20from%20Perspective%20of%20Demand-Side%20Platforms.pdf)\n2. [Facebook 广告系统背后的Pacing算法](https://developers.facebook.com/docs/marketing-api/pacing)\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"traffic","published":1,"updated":"2018-02-04T14:13:01.000Z","_id":"cjd8usypp000ie1fycssk45t8","comments":1,"layout":"post","photos":[],"link":"","content":"<script type=\"text/javascript\" async src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\">\n</script>\n\n<blockquote>\n<p>本文主要是针对国外的计算广告论文 Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b 进行技术学习的一次分享，\b同时拓\b\b展性的研究了竞价\b预算和流量预测的方法，具体的参考论文见最后的参考文献地址</p>\n</blockquote>\n<p>随着互联网的发展和用户的增长，广告行业从传统的线下广告模式，逐步转变为线上广告模式，同时，由于大数据分析技术的运用，线上广告模式相比于传统广告也体现了巨大的优越性。广告主之间相互竞争，通过竞价的方式，将自己的广告投放在运营媒体的广告位上。</p>\n<p>对需求方\b平台算法的优化是广大广告主的诉求，是广告网络产品透明化和开放化的催生产物，使得线上广告变得越来越依赖大数据和计算导向的方向发展。\b预算控制和流量预估\b的研究是\b当前的一个热点，流量预测直接影响到广告主获得优质广告流量的能力，\b进而决定广告预算的性价比\b并影响广告营销的效果，成为\bDSP系统(Demand Side Platfrom, 需求方平台)中十分重要的一个环节。</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/78d85414ly1fo48r9x850j20x40hagtp.jpg\" alt=\"\" title=\"图1 实时竞价系统的工作流\"></p>\n<h2 id=\"预算控制-Budget-Control\"><a href=\"#预算控制-Budget-Control\" class=\"headerlink\" title=\"预算控制(Budget Control)\"></a>预算控制(Budget Control)</h2><h3 id=\"预算控制的意义\"><a href=\"#预算控制的意义\" class=\"headerlink\" title=\"预算控制的意义\"></a>预算控制的意义</h3><p>通过实时竞价方式投放在线广告，能够更为准确地将广告的预算花费到那些更有可能产生回报的广告展示机会上，从而使广告收益得到优化，通常情况下，广告商需要为\b每个广告营销\b活动设置投放\b周期内的预算，需求方平台按照一系列优化算法买下尽可能多的\b符合广告目标\b群体的广告展示\b机会，\b因此，在有限预算的情况下对每次广告展示机会进行出价并给出合理的竞标价格是实时竞价的关键，而针对此的优化算法的主要目标分为\b以下几点：</p>\n<ol>\n<li>满足广告预算的花销计划，广告主希望在广告活动周期内相对平稳的消耗预算，保证在更长时间内有曝光效果，拥有持续性的广告推广效果。</li>\n<li>降低数据资讯花费，DSP 通常需要结合自己的第一方数据和来自 DMP 的\b第三方数据，更好的进行性能评估而做出更理想的决策，减少不必要的数据咨询次数可以降低这方面的经济花销。</li>\n<li>同时得到广告的投放和性能\b目标，对效果\b类广告来说首要任务是获得性能目标，尽可能的找到更多潜在的客户，对于品牌广告而言则需要达到更多的人群接触，获得\b更多的投放机会。</li>\n</ol>\n<p>\b为了实现后两个目标，\b需要依赖广告预算步进算法(Budget Pacing)，步进算法是指对于各种历史行为数据的分析，得出一个符合近期趋势的广告预算的分配计划，这个分配计划是预算的花销额与实践的变化趋势，\b且去要控制时机的花销进度去\b接近这个分配计划来最终保证预算的按计划分配。</p>\n<p>对于\b那些没有预算分配计划的广告活动，如图上图所示，可能出现集中恶性的结果：</p>\n<ol>\n<li>广告主的\b广告活动在一天中较早\b的时间就完全耗尽。而错失之后可能出现的高价值广告流量购买机会。</li>\n<li>广告主的出价整体偏低的，难以\b赢得adx的竞拍，导致预算花费进度不如预期而出现预算剩余，难以达到广告投放目标。</li>\n</ol>\n<h3 id=\"理想的预算控制\"><a href=\"#理想的预算控制\" class=\"headerlink\" title=\"理想的预算控制\"></a>理想的预算控制</h3><p><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fo4g8zaomvj211y0i3mx7.jpg\" alt=\"\" title=\"图2 竞标和曝光次数趋势图\"></p>\n<p>为了解决上面的问题，Joaquin等人利用动态规划和变分法证明了理想的预算花费不是线性也不是均匀的，而是正比于广告交易量，也就是广告流量，因此，就产生了一种根据广告流量变化趋势的分配计划，如上图所示。将分配计划正比于广告流量的变化趋势能够使的广告投放到一天内任何一个用户的几率均等，最大程度地保证广告均匀的分配到受众群体上，而不是均匀分布在每个时间段内。</p>\n<h3 id=\"流量预测-Traffic-Prediction\"><a href=\"#流量预测-Traffic-Prediction\" class=\"headerlink\" title=\"流量预测(Traffic Prediction)\"></a>流量预测(Traffic Prediction)</h3><p>论文\b中提到的流量预测的方法都是基于高维度的\b特征\b提取然后建模\b\b预估\b流量，由于\b可能存在上万种特征，\b如果不进行降维处理，\b很难进行运算，因此，从\b用户特征，上下文，广告属性上万个特征\b中抽取出具有代表性的基准特征，当产生一次预测时，通过这几种基准特征为标准建立模型来预测流量，这种\b方法需要极大的训练样本和训练时间，很难在工程上实现。</p>\n<h2 id=\"论文具体算法实现\"><a href=\"#论文具体算法实现\" class=\"headerlink\" title=\"论文具体算法实现\"></a>论文具体算法实现</h2><h3 id=\"流量问题分析\"><a href=\"#流量问题分析\" class=\"headerlink\" title=\"流量问题分析\"></a>流量问题分析</h3><p>在实际的广告系统中，\b\b广告请求数高度依赖于用户的行为，与此同时，用户的行为模式具有一定的规律性，工作日和休息日，白天和晚上所带来的流量请求均有即可循，因此，通过分析用户的行为来预测在线广告的流量走势具有一定的可操作性。</p>\n<p>由于不同的时间段流量差异较大，该文将一天按时间分为T个时间段，如果取$T = 24$， 则每天的每个时间段为一\b个小时，因此，对流量问题的分析模型可以量化为以下公式的求极值的问题。</p>\n\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(h({X_{d,t}};\\Theta ),{Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n\n<p>其中，$D$ 为\b训练数据的天数， ${Y_{d,t}}$ 为在 d \b天的 t 时刻的实际流量，${h({X_{d,t}};\\Theta )}$ 为预测模型函数，计算值和实际值的均方差为损失函数，通过训练，寻找\b最优的模型来\b\b使得损失函数最小。</p>\n<h3 id=\"系统框架\"><a href=\"#系统框架\" class=\"headerlink\" title=\"系统框架\"></a>系统框架</h3><h3 id=\"特征选取\"><a href=\"#特征选取\" class=\"headerlink\" title=\"特征选取\"></a>特征选取</h3><p>从dsp的角度出发，而不是单纯的利用在线广告的一些特征，提取出一下三个特征</p>\n<ol>\n<li>LastNDayReqs: 最近N天的当前Slot点的请求数</li>\n<li>LastSlotReqs: 上一次Slot点的请求数(主要针对流量异常的解决方案)</li>\n<li>SlotNumber: 当前的时间段</li>\n</ol>\n<p>其中前两个参数分别代表了长期和短期因素对流量的影响，如果仅仅使用这两个元素的，进行流量预测产生的结果如下所示，</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/78d85414ly1fnylmc94zaj215w0i60x0.jpg\" alt=\"\" title=\"图2 忽略SlotNumber预测结果对比\"></p>\n<p>通过图中的对比可以发现，在任意时段对于流量的预测都过高或者过低，当流量发生变化的时候，对于流量的预测总是滞后于实际的流量值，因此，选择 SlotNumber 这一特征来弥补这种差距。</p>\n<p>SlotNum 是长度为 T 的一个二进制的一维数组，对于其定义如下<br>\n$$SlotNu{m^k}(i) = 1,k = i$$\n$$SlotNu{m^k}(i) = 0,k \\ne i$$\n<br>其中 ${i \\in (1,T)}$，\b举个例子，\b\b\b当T=24时，则<br>\n$$SlotNu{m^1} = [1,0.......0,0]$$\n</p>\n<h3 id=\"流量异常处理\"><a href=\"#流量异常处理\" class=\"headerlink\" title=\"流量异常处理\"></a>流量异常处理</h3><p>由于在\b实际的线上广告系统中，其\b每天的流量规律往往不是一成不变的，\b对于流量的预测需要将流量异常的情况考虑在内，产生异常流量的原因主要包括两个部分，一是\b由于突发性事件造成的流量异常，例如某次事件的爆发，某次网络的迁移等，还有一种就是一种流量趋势的变化，在对流量建模的过程中需要将这种异常情况对于因变量进行一种平滑处理，为了解决流量异常的问题，通过综合考虑前k天的数据来对异常点的流量进行平滑处理。</p>\n<h3 id=\"SmoothedLastSlotReqs\"><a href=\"#SmoothedLastSlotReqs\" class=\"headerlink\" title=\"SmoothedLastSlotReqs\"></a>SmoothedLastSlotReqs</h3><p>通过均衡前k天的t时间点的流量来判断t时间点的流量是否正常，其具体的步骤如下:</p>\n<ol>\n<li><p>获取到上一个时间点t的流量值, 计为</p>\n\n  $$originalLastReqs = Reqs(0,t)$$\n  \n<p>其中 $t$ 为\b\b当天的时间点，$Reqs$ 为前k天的流量数据，其为二维数组 </p>\n</li>\n<li><p>\b计算前k\b天的算术平均值和几何平均值</p>\n\n$$avg = {1 \\over k}\\sum\\limits_{i = 1}^k {Reqs(i,t)} $$\n$$st{d^2} = {1 \\over k}\\sum\\limits_i^k {{{(reqs(i,t) - avg)}^2}} $$\n </li>\n<li><p>判断实际流量是否是异常流量，如果是正常流量，则不\b进行平滑，否则进行平滑操作得到最终的 </p>\n\n$${{\\left\\| {originalLastReqs - avg} \\right\\|} \\over {std}} > tol$$\n \n<p>其中tol为设定的阈值，根据\b经验值取，如果该计算结果大于预知，则</p>\n\n$$lastSlotReq{s^{k + 1}} = {\\rm{ }}\\prod\\limits_{i = 0}^k {Reqs(k,t)} $$\n\n<p>反之，则</p>\n\n$$lastSlotReqs = originalLastReqs$$\n\n<h3 id=\"SmoothedNDayReqs\"><a href=\"#SmoothedNDayReqs\" class=\"headerlink\" title=\"SmoothedNDayReqs\"></a>SmoothedNDayReqs</h3><p>对于 $SmoothedNDayReqs$ 参数的平滑操作类似，由于该特征代表着对于流量的一种长期的效应，如果流量呈现一种上升或者下降的趋势，该特征需要能反映出这种趋势，\b对于该特征的值的计算如下：</p>\n\n$$lastNDaysReq{s^k} = \\prod\\limits_{i = 1}^k {Reqs(t + 1,i)} $$\n\n<h3 id=\"PredictTraffic\"><a href=\"#PredictTraffic\" class=\"headerlink\" title=\"PredictTraffic\"></a>PredictTraffic</h3><p>\b由于对于损失函数的最优化计算是一个不适定的过程，\b\b通过引入正则项来求出其最优解，对于公式1增加正则项目\b修改如下：</p>\n\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(({\\omega ^T}{X_{d,t}} + b) - {Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n\n<p>其中， ${X_{d,t}} = [lastNDayreqs,lastSLotreqs,slotNum]$ , ${{\\omega ^T}}$ 和$b$为正则项，\b通过\b找到\b使得损失函数最小的$({\\omega ^T},b)$来求的最优化模型，\b\b得到最优化模型后对于流量预测到步骤如下所示：</p>\n</li>\n<li><p>获取到最新的最近的流量计为$Reqs(i,j)$,其中 $i$ 为\b\b\b\b\b\b天数，$j$ 为时间片的值。</p>\n</li>\n<li>获取到需要进行预测的时间片的值，计为 $t$。</li>\n<li>计算参数 \b$lastNDayReq{s_t} = SmoothNDayReqs(Reqs,t,T,k)$</li>\n<li>计算参数\b $lastSlotReq{s_t} = SmoothLastSlotReqs(Reqs,t,T,k)$</li>\n<li>\b\b${X_{t}} = [lastNDayreqs_{t},lastSLotreqs_{t},slotNum_{t}]$</li>\n<li>将参数带入模型计算预测值$h({X_t};\\omega ,b)$</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://github.com/wzhe06/Ad-papers/blob/master/Budget%20Control/Predicting%20Traffic%20of%20Online%20Advertising%20in%20Real-time%20Bidding%20Systems%20from%20Perspective%20of%20Demand-Side%20Platforms.pdf\" target=\"_blank\" rel=\"external\"> Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b</a></li>\n<li><a href=\"https://developers.facebook.com/docs/marketing-api/pacing\" target=\"_blank\" rel=\"external\">Facebook 广告系统背后的Pacing算法</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" async src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\">\n</script>\n\n<blockquote>\n<p>本文主要是针对国外的计算广告论文 Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b 进行技术学习的一次分享，\b同时拓\b\b展性的研究了竞价\b预算和流量预测的方法，具体的参考论文见最后的参考文献地址</p>\n</blockquote>\n<p>随着互联网的发展和用户的增长，广告行业从传统的线下广告模式，逐步转变为线上广告模式，同时，由于大数据分析技术的运用，线上广告模式相比于传统广告也体现了巨大的优越性。广告主之间相互竞争，通过竞价的方式，将自己的广告投放在运营媒体的广告位上。</p>\n<p>对需求方\b平台算法的优化是广大广告主的诉求，是广告网络产品透明化和开放化的催生产物，使得线上广告变得越来越依赖大数据和计算导向的方向发展。\b预算控制和流量预估\b的研究是\b当前的一个热点，流量预测直接影响到广告主获得优质广告流量的能力，\b进而决定广告预算的性价比\b并影响广告营销的效果，成为\bDSP系统(Demand Side Platfrom, 需求方平台)中十分重要的一个环节。</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/78d85414ly1fo48r9x850j20x40hagtp.jpg\" alt=\"\" title=\"图1 实时竞价系统的工作流\"></p>\n<h2 id=\"预算控制-Budget-Control\"><a href=\"#预算控制-Budget-Control\" class=\"headerlink\" title=\"预算控制(Budget Control)\"></a>预算控制(Budget Control)</h2><h3 id=\"预算控制的意义\"><a href=\"#预算控制的意义\" class=\"headerlink\" title=\"预算控制的意义\"></a>预算控制的意义</h3><p>通过实时竞价方式投放在线广告，能够更为准确地将广告的预算花费到那些更有可能产生回报的广告展示机会上，从而使广告收益得到优化，通常情况下，广告商需要为\b每个广告营销\b活动设置投放\b周期内的预算，需求方平台按照一系列优化算法买下尽可能多的\b符合广告目标\b群体的广告展示\b机会，\b因此，在有限预算的情况下对每次广告展示机会进行出价并给出合理的竞标价格是实时竞价的关键，而针对此的优化算法的主要目标分为\b以下几点：</p>\n<ol>\n<li>满足广告预算的花销计划，广告主希望在广告活动周期内相对平稳的消耗预算，保证在更长时间内有曝光效果，拥有持续性的广告推广效果。</li>\n<li>降低数据资讯花费，DSP 通常需要结合自己的第一方数据和来自 DMP 的\b第三方数据，更好的进行性能评估而做出更理想的决策，减少不必要的数据咨询次数可以降低这方面的经济花销。</li>\n<li>同时得到广告的投放和性能\b目标，对效果\b类广告来说首要任务是获得性能目标，尽可能的找到更多潜在的客户，对于品牌广告而言则需要达到更多的人群接触，获得\b更多的投放机会。</li>\n</ol>\n<p>\b为了实现后两个目标，\b需要依赖广告预算步进算法(Budget Pacing)，步进算法是指对于各种历史行为数据的分析，得出一个符合近期趋势的广告预算的分配计划，这个分配计划是预算的花销额与实践的变化趋势，\b且去要控制时机的花销进度去\b接近这个分配计划来最终保证预算的按计划分配。</p>\n<p>对于\b那些没有预算分配计划的广告活动，如图上图所示，可能出现集中恶性的结果：</p>\n<ol>\n<li>广告主的\b广告活动在一天中较早\b的时间就完全耗尽。而错失之后可能出现的高价值广告流量购买机会。</li>\n<li>广告主的出价整体偏低的，难以\b赢得adx的竞拍，导致预算花费进度不如预期而出现预算剩余，难以达到广告投放目标。</li>\n</ol>\n<h3 id=\"理想的预算控制\"><a href=\"#理想的预算控制\" class=\"headerlink\" title=\"理想的预算控制\"></a>理想的预算控制</h3><p><img src=\"http://wx2.sinaimg.cn/mw1024/78d85414ly1fo4g8zaomvj211y0i3mx7.jpg\" alt=\"\" title=\"图2 竞标和曝光次数趋势图\"></p>\n<p>为了解决上面的问题，Joaquin等人利用动态规划和变分法证明了理想的预算花费不是线性也不是均匀的，而是正比于广告交易量，也就是广告流量，因此，就产生了一种根据广告流量变化趋势的分配计划，如上图所示。将分配计划正比于广告流量的变化趋势能够使的广告投放到一天内任何一个用户的几率均等，最大程度地保证广告均匀的分配到受众群体上，而不是均匀分布在每个时间段内。</p>\n<h3 id=\"流量预测-Traffic-Prediction\"><a href=\"#流量预测-Traffic-Prediction\" class=\"headerlink\" title=\"流量预测(Traffic Prediction)\"></a>流量预测(Traffic Prediction)</h3><p>论文\b中提到的流量预测的方法都是基于高维度的\b特征\b提取然后建模\b\b预估\b流量，由于\b可能存在上万种特征，\b如果不进行降维处理，\b很难进行运算，因此，从\b用户特征，上下文，广告属性上万个特征\b中抽取出具有代表性的基准特征，当产生一次预测时，通过这几种基准特征为标准建立模型来预测流量，这种\b方法需要极大的训练样本和训练时间，很难在工程上实现。</p>\n<h2 id=\"论文具体算法实现\"><a href=\"#论文具体算法实现\" class=\"headerlink\" title=\"论文具体算法实现\"></a>论文具体算法实现</h2><h3 id=\"流量问题分析\"><a href=\"#流量问题分析\" class=\"headerlink\" title=\"流量问题分析\"></a>流量问题分析</h3><p>在实际的广告系统中，\b\b广告请求数高度依赖于用户的行为，与此同时，用户的行为模式具有一定的规律性，工作日和休息日，白天和晚上所带来的流量请求均有即可循，因此，通过分析用户的行为来预测在线广告的流量走势具有一定的可操作性。</p>\n<p>由于不同的时间段流量差异较大，该文将一天按时间分为T个时间段，如果取$T = 24$， 则每天的每个时间段为一\b个小时，因此，对流量问题的分析模型可以量化为以下公式的求极值的问题。</p>\n\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(h({X_{d,t}};\\Theta ),{Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n\n<p>其中，$D$ 为\b训练数据的天数， ${Y_{d,t}}$ 为在 d \b天的 t 时刻的实际流量，${h({X_{d,t}};\\Theta )}$ 为预测模型函数，计算值和实际值的均方差为损失函数，通过训练，寻找\b最优的模型来\b\b使得损失函数最小。</p>\n<h3 id=\"系统框架\"><a href=\"#系统框架\" class=\"headerlink\" title=\"系统框架\"></a>系统框架</h3><h3 id=\"特征选取\"><a href=\"#特征选取\" class=\"headerlink\" title=\"特征选取\"></a>特征选取</h3><p>从dsp的角度出发，而不是单纯的利用在线广告的一些特征，提取出一下三个特征</p>\n<ol>\n<li>LastNDayReqs: 最近N天的当前Slot点的请求数</li>\n<li>LastSlotReqs: 上一次Slot点的请求数(主要针对流量异常的解决方案)</li>\n<li>SlotNumber: 当前的时间段</li>\n</ol>\n<p>其中前两个参数分别代表了长期和短期因素对流量的影响，如果仅仅使用这两个元素的，进行流量预测产生的结果如下所示，</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/78d85414ly1fnylmc94zaj215w0i60x0.jpg\" alt=\"\" title=\"图2 忽略SlotNumber预测结果对比\"></p>\n<p>通过图中的对比可以发现，在任意时段对于流量的预测都过高或者过低，当流量发生变化的时候，对于流量的预测总是滞后于实际的流量值，因此，选择 SlotNumber 这一特征来弥补这种差距。</p>\n<p>SlotNum 是长度为 T 的一个二进制的一维数组，对于其定义如下<br>\n$$SlotNu{m^k}(i) = 1,k = i$$\n$$SlotNu{m^k}(i) = 0,k \\ne i$$\n<br>其中 ${i \\in (1,T)}$，\b举个例子，\b\b\b当T=24时，则<br>\n$$SlotNu{m^1} = [1,0.......0,0]$$\n</p>\n<h3 id=\"流量异常处理\"><a href=\"#流量异常处理\" class=\"headerlink\" title=\"流量异常处理\"></a>流量异常处理</h3><p>由于在\b实际的线上广告系统中，其\b每天的流量规律往往不是一成不变的，\b对于流量的预测需要将流量异常的情况考虑在内，产生异常流量的原因主要包括两个部分，一是\b由于突发性事件造成的流量异常，例如某次事件的爆发，某次网络的迁移等，还有一种就是一种流量趋势的变化，在对流量建模的过程中需要将这种异常情况对于因变量进行一种平滑处理，为了解决流量异常的问题，通过综合考虑前k天的数据来对异常点的流量进行平滑处理。</p>\n<h3 id=\"SmoothedLastSlotReqs\"><a href=\"#SmoothedLastSlotReqs\" class=\"headerlink\" title=\"SmoothedLastSlotReqs\"></a>SmoothedLastSlotReqs</h3><p>通过均衡前k天的t时间点的流量来判断t时间点的流量是否正常，其具体的步骤如下:</p>\n<ol>\n<li><p>获取到上一个时间点t的流量值, 计为</p>\n\n  $$originalLastReqs = Reqs(0,t)$$\n  \n<p>其中 $t$ 为\b\b当天的时间点，$Reqs$ 为前k天的流量数据，其为二维数组 </p>\n</li>\n<li><p>\b计算前k\b天的算术平均值和几何平均值</p>\n\n$$avg = {1 \\over k}\\sum\\limits_{i = 1}^k {Reqs(i,t)} $$\n$$st{d^2} = {1 \\over k}\\sum\\limits_i^k {{{(reqs(i,t) - avg)}^2}} $$\n </li>\n<li><p>判断实际流量是否是异常流量，如果是正常流量，则不\b进行平滑，否则进行平滑操作得到最终的 </p>\n\n$${{\\left\\| {originalLastReqs - avg} \\right\\|} \\over {std}} > tol$$\n \n<p>其中tol为设定的阈值，根据\b经验值取，如果该计算结果大于预知，则</p>\n\n$$lastSlotReq{s^{k + 1}} = {\\rm{ }}\\prod\\limits_{i = 0}^k {Reqs(k,t)} $$\n\n<p>反之，则</p>\n\n$$lastSlotReqs = originalLastReqs$$\n\n<h3 id=\"SmoothedNDayReqs\"><a href=\"#SmoothedNDayReqs\" class=\"headerlink\" title=\"SmoothedNDayReqs\"></a>SmoothedNDayReqs</h3><p>对于 $SmoothedNDayReqs$ 参数的平滑操作类似，由于该特征代表着对于流量的一种长期的效应，如果流量呈现一种上升或者下降的趋势，该特征需要能反映出这种趋势，\b对于该特征的值的计算如下：</p>\n\n$$lastNDaysReq{s^k} = \\prod\\limits_{i = 1}^k {Reqs(t + 1,i)} $$\n\n<h3 id=\"PredictTraffic\"><a href=\"#PredictTraffic\" class=\"headerlink\" title=\"PredictTraffic\"></a>PredictTraffic</h3><p>\b由于对于损失函数的最优化计算是一个不适定的过程，\b\b通过引入正则项来求出其最优解，对于公式1增加正则项目\b修改如下：</p>\n\n$${\\arg _\\Theta }\\min \\sum\\limits_{\\forall d,t} {loss(({\\omega ^T}{X_{d,t}} + b) - {Y_{d,t}}),1 \\le d \\le D,1 \\le t \\le T} $$\n\n<p>其中， ${X_{d,t}} = [lastNDayreqs,lastSLotreqs,slotNum]$ , ${{\\omega ^T}}$ 和$b$为正则项，\b通过\b找到\b使得损失函数最小的$({\\omega ^T},b)$来求的最优化模型，\b\b得到最优化模型后对于流量预测到步骤如下所示：</p>\n</li>\n<li><p>获取到最新的最近的流量计为$Reqs(i,j)$,其中 $i$ 为\b\b\b\b\b\b天数，$j$ 为时间片的值。</p>\n</li>\n<li>获取到需要进行预测的时间片的值，计为 $t$。</li>\n<li>计算参数 \b$lastNDayReq{s_t} = SmoothNDayReqs(Reqs,t,T,k)$</li>\n<li>计算参数\b $lastSlotReq{s_t} = SmoothLastSlotReqs(Reqs,t,T,k)$</li>\n<li>\b\b${X_{t}} = [lastNDayreqs_{t},lastSLotreqs_{t},slotNum_{t}]$</li>\n<li>将参数带入模型计算预测值$h({X_t};\\omega ,b)$</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://github.com/wzhe06/Ad-papers/blob/master/Budget%20Control/Predicting%20Traffic%20of%20Online%20Advertising%20in%20Real-time%20Bidding%20Systems%20from%20Perspective%20of%20Demand-Side%20Platforms.pdf\" target=\"_blank\" rel=\"external\"> Predicting Traffic of Online Advertising in Real-time Bidding Systems from Perspective of Demand-Side Platforms\b</a></li>\n<li><a href=\"https://developers.facebook.com/docs/marketing-api/pacing\" target=\"_blank\" rel=\"external\">Facebook 广告系统背后的Pacing算法</a></li>\n</ol>\n"},{"title":"xmpp协议解析与使用","date":"2017-01-07T14:58:37.000Z","_content":"XMPP 是基于 XML 的协议，用于即时消息( IM )以及在线现场探测。最初, XMPP 作为一个框架开发, 目标是支持企业环境内的即时消息传递和联机状态应用程序 。当时的即时消息传递网络是私有的,不适合企业使用\n\nXMPP 前身是 Jabber ( 1998 年) ,是一个开源组织定义的网络即时通信协议XMPP 是一个分散型通信网络 ,这意味着,只要网络基础设施允许,任何XMPP 用户都可以向其他任何 XMPP 用户传递消息。多个 XMPP 服务器也可以通过一个专门的“服务器 - 服务器 \"协议相互通信,提供了创建分散型社交网络和协作框架的可能性。\n![pinpoint](http://7xkrul.com1.z1.glb.clouddn.com/XMPP%E6%9E%B6%E6%9E%84.png \"图1 xmpp通用框架\")\n<!-- more -->\n注意，分属于不同server的client之间要通信的话，中间不能再经过其他server，这2个server必须直接通信。对于XMPP来说，server不能象email server那样，中间可以经过若干个server才能把邮件发送到目的地\n## XMPP协议优缺点\n- 优点 \n   - 开放 \n   - 标准( XMPP 的技术规格已被定义在 RFC 3920 及 RFC 3921 ) \n   - 证实可用 \n   - 分散 \n   - 安全 \n   - 可扩展 \n- 缺点 \n   - 数据负载过重 \n   - 没有二进制传输\n\n## 为什么选择XMPP\n>1.通信原语  Message Stanza、Presence Stanza和IQ Stanza(IQ节)\n>\n>2.XMPP协议引入了XML Stream(XML流)和XML Stanza(XML节)\n>\n>\n\n## 伸缩架构\n> 负载均衡：是通过负载策略分发客户端请求，后端的连接管理器退出服务后，请求不在分发给本台连接管理器。\n\n> 连接管理器：是保存客户端连接，实现系统用户并发上的可伸缩，连接服务器不包含业务逻辑代码它的功能只是负载保持客户连接和转发客户请求。\n\n>业务服务器：业务逻辑都实现在业务服务器包括用户验证模块、用户会话模块、在线状态模块、路由模块、文本消息模块等。\n\n>组件服务器：是用于扩展非即时通讯本身核心功能的业务，是通过业务服务器包路由过来的客户端请求，并通过组件服务器应答客户端。\n\n>代理服务器：是负责适配不同即时通讯协议实现不同即时通讯的互联。\n\n## 为什么使用openfire\nA、Openfire为Java开源项目\n\nB、采用开放的XMPP协议\n\nC、有多种针对不通系统的版本\n\nD、使用Socket通讯\n\nE、 单台服务器可支持上万并发用户,搭建分布式云服务器可轻松提供大量并发用户。\n\nF、 Socket长连接\n\nG、服务器稳定小\n\nH、提供接口，可自己开发插件 \n\n## JabberD2\n\n### 组件\n\n- 路由(router):路由器是jabberd的核心组件，它从其他组件接受信息，并把各个组件间传递xml数据包\n- 服务器－服务器(s2s):S2S控制和其他服务器的通信，并实现服务器回呼和远程jabber服务器的验证\n- 分解器(resolver):分解器是为支持S2S工作的.他为S2S回呼中验证部分提供分解主机名服务\n- 会话管理(Session Manager):SM(会话管理)实现了即时消息的大部分  \n      - 消息传送  \n      - 状态管理(Presence)  \n      - 帐户管理(Rosters)  \n      - 订阅(Subscriptions)  \n- 客户端－服务器端(c2s): C2S组件控制与客户端的通信  \n      - 和jabbar客户端连接  \n      - 传递包给SM  \n      - 验证客户端  \n      - 注册用户  \n      - 同SM引发活动  \n\n### 数据控制\njabberd 使用数据控制(data handing)的概念以便适应各类数据处理包。数据控制(data handling)的核心是收集器(Collection)对象概念。每个收集器(Collection)都有类型(Type)和拥有者(Owner)两个属性.类型(Type)指明什么类型的数据正在被处理,如,队列(queue),vcard,名册条目(roster-item). 拥有者(Owner)表明谁拥有这个收集器(collection).对于和用户相关的数据，拥有者(Owner)是jabber ID(JID).\n\n### JID\njid为客户端的唯一性标识id，{$user}@{$host}组成一个唯一性jid／{$work}，根据work用于将数据发送到与他的工作相关的工具\n\n## 参考文献\n1. [XMPP权威指南](http://wiki.jabbercn.org/%E9%A6%96%E9%A1%B5)\n2. [XMPP-RFC3920](http://wiki.jabbercn.org/RFC3920)\n\n","source":"_posts/xmpp.md","raw":"---\ntitle: xmpp协议解析与使用\ndate: 2017-01-07 22:58:37\ncategories:\n- 技术杂谈\ntags:\n- 通信协议\n---\nXMPP 是基于 XML 的协议，用于即时消息( IM )以及在线现场探测。最初, XMPP 作为一个框架开发, 目标是支持企业环境内的即时消息传递和联机状态应用程序 。当时的即时消息传递网络是私有的,不适合企业使用\n\nXMPP 前身是 Jabber ( 1998 年) ,是一个开源组织定义的网络即时通信协议XMPP 是一个分散型通信网络 ,这意味着,只要网络基础设施允许,任何XMPP 用户都可以向其他任何 XMPP 用户传递消息。多个 XMPP 服务器也可以通过一个专门的“服务器 - 服务器 \"协议相互通信,提供了创建分散型社交网络和协作框架的可能性。\n![pinpoint](http://7xkrul.com1.z1.glb.clouddn.com/XMPP%E6%9E%B6%E6%9E%84.png \"图1 xmpp通用框架\")\n<!-- more -->\n注意，分属于不同server的client之间要通信的话，中间不能再经过其他server，这2个server必须直接通信。对于XMPP来说，server不能象email server那样，中间可以经过若干个server才能把邮件发送到目的地\n## XMPP协议优缺点\n- 优点 \n   - 开放 \n   - 标准( XMPP 的技术规格已被定义在 RFC 3920 及 RFC 3921 ) \n   - 证实可用 \n   - 分散 \n   - 安全 \n   - 可扩展 \n- 缺点 \n   - 数据负载过重 \n   - 没有二进制传输\n\n## 为什么选择XMPP\n>1.通信原语  Message Stanza、Presence Stanza和IQ Stanza(IQ节)\n>\n>2.XMPP协议引入了XML Stream(XML流)和XML Stanza(XML节)\n>\n>\n\n## 伸缩架构\n> 负载均衡：是通过负载策略分发客户端请求，后端的连接管理器退出服务后，请求不在分发给本台连接管理器。\n\n> 连接管理器：是保存客户端连接，实现系统用户并发上的可伸缩，连接服务器不包含业务逻辑代码它的功能只是负载保持客户连接和转发客户请求。\n\n>业务服务器：业务逻辑都实现在业务服务器包括用户验证模块、用户会话模块、在线状态模块、路由模块、文本消息模块等。\n\n>组件服务器：是用于扩展非即时通讯本身核心功能的业务，是通过业务服务器包路由过来的客户端请求，并通过组件服务器应答客户端。\n\n>代理服务器：是负责适配不同即时通讯协议实现不同即时通讯的互联。\n\n## 为什么使用openfire\nA、Openfire为Java开源项目\n\nB、采用开放的XMPP协议\n\nC、有多种针对不通系统的版本\n\nD、使用Socket通讯\n\nE、 单台服务器可支持上万并发用户,搭建分布式云服务器可轻松提供大量并发用户。\n\nF、 Socket长连接\n\nG、服务器稳定小\n\nH、提供接口，可自己开发插件 \n\n## JabberD2\n\n### 组件\n\n- 路由(router):路由器是jabberd的核心组件，它从其他组件接受信息，并把各个组件间传递xml数据包\n- 服务器－服务器(s2s):S2S控制和其他服务器的通信，并实现服务器回呼和远程jabber服务器的验证\n- 分解器(resolver):分解器是为支持S2S工作的.他为S2S回呼中验证部分提供分解主机名服务\n- 会话管理(Session Manager):SM(会话管理)实现了即时消息的大部分  \n      - 消息传送  \n      - 状态管理(Presence)  \n      - 帐户管理(Rosters)  \n      - 订阅(Subscriptions)  \n- 客户端－服务器端(c2s): C2S组件控制与客户端的通信  \n      - 和jabbar客户端连接  \n      - 传递包给SM  \n      - 验证客户端  \n      - 注册用户  \n      - 同SM引发活动  \n\n### 数据控制\njabberd 使用数据控制(data handing)的概念以便适应各类数据处理包。数据控制(data handling)的核心是收集器(Collection)对象概念。每个收集器(Collection)都有类型(Type)和拥有者(Owner)两个属性.类型(Type)指明什么类型的数据正在被处理,如,队列(queue),vcard,名册条目(roster-item). 拥有者(Owner)表明谁拥有这个收集器(collection).对于和用户相关的数据，拥有者(Owner)是jabber ID(JID).\n\n### JID\njid为客户端的唯一性标识id，{$user}@{$host}组成一个唯一性jid／{$work}，根据work用于将数据发送到与他的工作相关的工具\n\n## 参考文献\n1. [XMPP权威指南](http://wiki.jabbercn.org/%E9%A6%96%E9%A1%B5)\n2. [XMPP-RFC3920](http://wiki.jabbercn.org/RFC3920)\n\n","slug":"xmpp","published":1,"updated":"2018-01-01T22:26:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd8usypr000le1fypd4ocvub","content":"<p>XMPP 是基于 XML 的协议，用于即时消息( IM )以及在线现场探测。最初, XMPP 作为一个框架开发, 目标是支持企业环境内的即时消息传递和联机状态应用程序 。当时的即时消息传递网络是私有的,不适合企业使用</p>\n<p>XMPP 前身是 Jabber ( 1998 年) ,是一个开源组织定义的网络即时通信协议XMPP 是一个分散型通信网络 ,这意味着,只要网络基础设施允许,任何XMPP 用户都可以向其他任何 XMPP 用户传递消息。多个 XMPP 服务器也可以通过一个专门的“服务器 - 服务器 “协议相互通信,提供了创建分散型社交网络和协作框架的可能性。<br><img src=\"http://7xkrul.com1.z1.glb.clouddn.com/XMPP%E6%9E%B6%E6%9E%84.png\" alt=\"pinpoint\" title=\"图1 xmpp通用框架\"><br><a id=\"more\"></a><br>注意，分属于不同server的client之间要通信的话，中间不能再经过其他server，这2个server必须直接通信。对于XMPP来说，server不能象email server那样，中间可以经过若干个server才能把邮件发送到目的地</p>\n<h2 id=\"XMPP协议优缺点\"><a href=\"#XMPP协议优缺点\" class=\"headerlink\" title=\"XMPP协议优缺点\"></a>XMPP协议优缺点</h2><ul>\n<li>优点 <ul>\n<li>开放 </li>\n<li>标准( XMPP 的技术规格已被定义在 RFC 3920 及 RFC 3921 ) </li>\n<li>证实可用 </li>\n<li>分散 </li>\n<li>安全 </li>\n<li>可扩展 </li>\n</ul>\n</li>\n<li>缺点 <ul>\n<li>数据负载过重 </li>\n<li>没有二进制传输</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"为什么选择XMPP\"><a href=\"#为什么选择XMPP\" class=\"headerlink\" title=\"为什么选择XMPP\"></a>为什么选择XMPP</h2><blockquote>\n<p>1.通信原语  Message Stanza、Presence Stanza和IQ Stanza(IQ节)</p>\n<p>2.XMPP协议引入了XML Stream(XML流)和XML Stanza(XML节)</p>\n</blockquote>\n<h2 id=\"伸缩架构\"><a href=\"#伸缩架构\" class=\"headerlink\" title=\"伸缩架构\"></a>伸缩架构</h2><blockquote>\n<p>负载均衡：是通过负载策略分发客户端请求，后端的连接管理器退出服务后，请求不在分发给本台连接管理器。</p>\n<p>连接管理器：是保存客户端连接，实现系统用户并发上的可伸缩，连接服务器不包含业务逻辑代码它的功能只是负载保持客户连接和转发客户请求。</p>\n<p>业务服务器：业务逻辑都实现在业务服务器包括用户验证模块、用户会话模块、在线状态模块、路由模块、文本消息模块等。</p>\n<p>组件服务器：是用于扩展非即时通讯本身核心功能的业务，是通过业务服务器包路由过来的客户端请求，并通过组件服务器应答客户端。</p>\n<p>代理服务器：是负责适配不同即时通讯协议实现不同即时通讯的互联。</p>\n</blockquote>\n<h2 id=\"为什么使用openfire\"><a href=\"#为什么使用openfire\" class=\"headerlink\" title=\"为什么使用openfire\"></a>为什么使用openfire</h2><p>A、Openfire为Java开源项目</p>\n<p>B、采用开放的XMPP协议</p>\n<p>C、有多种针对不通系统的版本</p>\n<p>D、使用Socket通讯</p>\n<p>E、 单台服务器可支持上万并发用户,搭建分布式云服务器可轻松提供大量并发用户。</p>\n<p>F、 Socket长连接</p>\n<p>G、服务器稳定小</p>\n<p>H、提供接口，可自己开发插件 </p>\n<h2 id=\"JabberD2\"><a href=\"#JabberD2\" class=\"headerlink\" title=\"JabberD2\"></a>JabberD2</h2><h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><ul>\n<li>路由(router):路由器是jabberd的核心组件，它从其他组件接受信息，并把各个组件间传递xml数据包</li>\n<li>服务器－服务器(s2s):S2S控制和其他服务器的通信，并实现服务器回呼和远程jabber服务器的验证</li>\n<li>分解器(resolver):分解器是为支持S2S工作的.他为S2S回呼中验证部分提供分解主机名服务</li>\n<li>会话管理(Session Manager):SM(会话管理)实现了即时消息的大部分  <pre><code>- 消息传送  \n- 状态管理(Presence)  \n- 帐户管理(Rosters)  \n- 订阅(Subscriptions)  \n</code></pre></li>\n<li>客户端－服务器端(c2s): C2S组件控制与客户端的通信  <pre><code>- 和jabbar客户端连接  \n- 传递包给SM  \n- 验证客户端  \n- 注册用户  \n- 同SM引发活动  \n</code></pre></li>\n</ul>\n<h3 id=\"数据控制\"><a href=\"#数据控制\" class=\"headerlink\" title=\"数据控制\"></a>数据控制</h3><p>jabberd 使用数据控制(data handing)的概念以便适应各类数据处理包。数据控制(data handling)的核心是收集器(Collection)对象概念。每个收集器(Collection)都有类型(Type)和拥有者(Owner)两个属性.类型(Type)指明什么类型的数据正在被处理,如,队列(queue),vcard,名册条目(roster-item). 拥有者(Owner)表明谁拥有这个收集器(collection).对于和用户相关的数据，拥有者(Owner)是jabber ID(JID).</p>\n<h3 id=\"JID\"><a href=\"#JID\" class=\"headerlink\" title=\"JID\"></a>JID</h3><p>jid为客户端的唯一性标识id，{$user}@{$host}组成一个唯一性jid／{$work}，根据work用于将数据发送到与他的工作相关的工具</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://wiki.jabbercn.org/%E9%A6%96%E9%A1%B5\" target=\"_blank\" rel=\"external\">XMPP权威指南</a></li>\n<li><a href=\"http://wiki.jabbercn.org/RFC3920\" target=\"_blank\" rel=\"external\">XMPP-RFC3920</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>XMPP 是基于 XML 的协议，用于即时消息( IM )以及在线现场探测。最初, XMPP 作为一个框架开发, 目标是支持企业环境内的即时消息传递和联机状态应用程序 。当时的即时消息传递网络是私有的,不适合企业使用</p>\n<p>XMPP 前身是 Jabber ( 1998 年) ,是一个开源组织定义的网络即时通信协议XMPP 是一个分散型通信网络 ,这意味着,只要网络基础设施允许,任何XMPP 用户都可以向其他任何 XMPP 用户传递消息。多个 XMPP 服务器也可以通过一个专门的“服务器 - 服务器 “协议相互通信,提供了创建分散型社交网络和协作框架的可能性。<br><img src=\"http://7xkrul.com1.z1.glb.clouddn.com/XMPP%E6%9E%B6%E6%9E%84.png\" alt=\"pinpoint\" title=\"图1 xmpp通用框架\"><br>","more":"<br>注意，分属于不同server的client之间要通信的话，中间不能再经过其他server，这2个server必须直接通信。对于XMPP来说，server不能象email server那样，中间可以经过若干个server才能把邮件发送到目的地</p>\n<h2 id=\"XMPP协议优缺点\"><a href=\"#XMPP协议优缺点\" class=\"headerlink\" title=\"XMPP协议优缺点\"></a>XMPP协议优缺点</h2><ul>\n<li>优点 <ul>\n<li>开放 </li>\n<li>标准( XMPP 的技术规格已被定义在 RFC 3920 及 RFC 3921 ) </li>\n<li>证实可用 </li>\n<li>分散 </li>\n<li>安全 </li>\n<li>可扩展 </li>\n</ul>\n</li>\n<li>缺点 <ul>\n<li>数据负载过重 </li>\n<li>没有二进制传输</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"为什么选择XMPP\"><a href=\"#为什么选择XMPP\" class=\"headerlink\" title=\"为什么选择XMPP\"></a>为什么选择XMPP</h2><blockquote>\n<p>1.通信原语  Message Stanza、Presence Stanza和IQ Stanza(IQ节)</p>\n<p>2.XMPP协议引入了XML Stream(XML流)和XML Stanza(XML节)</p>\n</blockquote>\n<h2 id=\"伸缩架构\"><a href=\"#伸缩架构\" class=\"headerlink\" title=\"伸缩架构\"></a>伸缩架构</h2><blockquote>\n<p>负载均衡：是通过负载策略分发客户端请求，后端的连接管理器退出服务后，请求不在分发给本台连接管理器。</p>\n<p>连接管理器：是保存客户端连接，实现系统用户并发上的可伸缩，连接服务器不包含业务逻辑代码它的功能只是负载保持客户连接和转发客户请求。</p>\n<p>业务服务器：业务逻辑都实现在业务服务器包括用户验证模块、用户会话模块、在线状态模块、路由模块、文本消息模块等。</p>\n<p>组件服务器：是用于扩展非即时通讯本身核心功能的业务，是通过业务服务器包路由过来的客户端请求，并通过组件服务器应答客户端。</p>\n<p>代理服务器：是负责适配不同即时通讯协议实现不同即时通讯的互联。</p>\n</blockquote>\n<h2 id=\"为什么使用openfire\"><a href=\"#为什么使用openfire\" class=\"headerlink\" title=\"为什么使用openfire\"></a>为什么使用openfire</h2><p>A、Openfire为Java开源项目</p>\n<p>B、采用开放的XMPP协议</p>\n<p>C、有多种针对不通系统的版本</p>\n<p>D、使用Socket通讯</p>\n<p>E、 单台服务器可支持上万并发用户,搭建分布式云服务器可轻松提供大量并发用户。</p>\n<p>F、 Socket长连接</p>\n<p>G、服务器稳定小</p>\n<p>H、提供接口，可自己开发插件 </p>\n<h2 id=\"JabberD2\"><a href=\"#JabberD2\" class=\"headerlink\" title=\"JabberD2\"></a>JabberD2</h2><h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><ul>\n<li>路由(router):路由器是jabberd的核心组件，它从其他组件接受信息，并把各个组件间传递xml数据包</li>\n<li>服务器－服务器(s2s):S2S控制和其他服务器的通信，并实现服务器回呼和远程jabber服务器的验证</li>\n<li>分解器(resolver):分解器是为支持S2S工作的.他为S2S回呼中验证部分提供分解主机名服务</li>\n<li>会话管理(Session Manager):SM(会话管理)实现了即时消息的大部分  <pre><code>- 消息传送  \n- 状态管理(Presence)  \n- 帐户管理(Rosters)  \n- 订阅(Subscriptions)  \n</code></pre></li>\n<li>客户端－服务器端(c2s): C2S组件控制与客户端的通信  <pre><code>- 和jabbar客户端连接  \n- 传递包给SM  \n- 验证客户端  \n- 注册用户  \n- 同SM引发活动  \n</code></pre></li>\n</ul>\n<h3 id=\"数据控制\"><a href=\"#数据控制\" class=\"headerlink\" title=\"数据控制\"></a>数据控制</h3><p>jabberd 使用数据控制(data handing)的概念以便适应各类数据处理包。数据控制(data handling)的核心是收集器(Collection)对象概念。每个收集器(Collection)都有类型(Type)和拥有者(Owner)两个属性.类型(Type)指明什么类型的数据正在被处理,如,队列(queue),vcard,名册条目(roster-item). 拥有者(Owner)表明谁拥有这个收集器(collection).对于和用户相关的数据，拥有者(Owner)是jabber ID(JID).</p>\n<h3 id=\"JID\"><a href=\"#JID\" class=\"headerlink\" title=\"JID\"></a>JID</h3><p>jid为客户端的唯一性标识id，{$user}@{$host}组成一个唯一性jid／{$work}，根据work用于将数据发送到与他的工作相关的工具</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://wiki.jabbercn.org/%E9%A6%96%E9%A1%B5\" target=\"_blank\" rel=\"external\">XMPP权威指南</a></li>\n<li><a href=\"http://wiki.jabbercn.org/RFC3920\" target=\"_blank\" rel=\"external\">XMPP-RFC3920</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjd8usype0008e1fyyj8ckveg","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypn000fe1fyipjyh7oo"},{"post_id":"cjd8usyp00000e1fyj0eqvi6o","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypq000je1fyfvn4u99z"},{"post_id":"cjd8usypf0009e1fyv6zhsy77","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypr000me1fyqd3rxqik"},{"post_id":"cjd8usypi000de1fyagixpwq5","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usyps000oe1fy715cplxy"},{"post_id":"cjd8usyp70002e1fytjud8bad","category_id":"cjd8usypg000ae1fylnhf0zas","_id":"cjd8usypt000qe1fytmird0f4"},{"post_id":"cjd8usypl000ee1fyyt0u1e5o","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypu000se1fybfkifa2r"},{"post_id":"cjd8usypp000ie1fycssk45t8","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypv000ue1fyr7r17y9y"},{"post_id":"cjd8usypd0006e1fyxsdzz0v3","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypv000ve1fyutpqc21l"},{"post_id":"cjd8usypr000le1fypd4ocvub","category_id":"cjd8usypb0004e1fyrfbru0uz","_id":"cjd8usypw000ye1fyejstuly0"}],"PostTag":[{"post_id":"cjd8usyp00000e1fyj0eqvi6o","tag_id":"cjd8usypc0005e1fy81rlhz36","_id":"cjd8usypi000ce1fywypa1lmm"},{"post_id":"cjd8usyp70002e1fytjud8bad","tag_id":"cjd8usypg000be1fya5q9p2pg","_id":"cjd8usypq000ke1fyyun7vc83"},{"post_id":"cjd8usypd0006e1fyxsdzz0v3","tag_id":"cjd8usypo000he1fy2gq4os3i","_id":"cjd8usypt000pe1fy31dpneah"},{"post_id":"cjd8usype0008e1fyyj8ckveg","tag_id":"cjd8usyps000ne1fy8yksjllr","_id":"cjd8usypu000te1fyaqweyewz"},{"post_id":"cjd8usypf0009e1fyv6zhsy77","tag_id":"cjd8usypu000re1fylu0j7qit","_id":"cjd8usypw000xe1fyd18pfmcs"},{"post_id":"cjd8usypi000de1fyagixpwq5","tag_id":"cjd8usypv000we1fyvvq80key","_id":"cjd8usypx0010e1fysftzk9xq"},{"post_id":"cjd8usypl000ee1fyyt0u1e5o","tag_id":"cjd8usypw000ze1fyb7ui8ps7","_id":"cjd8usypy0012e1fybbs80fmh"},{"post_id":"cjd8usypr000le1fypd4ocvub","tag_id":"cjd8usypy0013e1fyhy7v3hpy","_id":"cjd8usypz0015e1fyg77njgz9"},{"post_id":"cjd8usypp000ie1fycssk45t8","tag_id":"cjd8usypx0011e1fywqbam2ej","_id":"cjd8v3olb0000glfyftlyovml"}],"Tag":[{"name":"高可用架构","_id":"cjd8usypc0005e1fy81rlhz36"},{"name":"高并发","_id":"cjd8usypg000be1fya5q9p2pg"},{"name":"视频压缩","_id":"cjd8usypo000he1fy2gq4os3i"},{"name":"持续集成","_id":"cjd8usyps000ne1fy8yksjllr"},{"name":"性能监控","_id":"cjd8usypu000re1fylu0j7qit"},{"name":"代码质量分析","_id":"cjd8usypv000we1fyvvq80key"},{"name":"Java","_id":"cjd8usypw000ze1fyb7ui8ps7"},{"name":"计算广告","_id":"cjd8usypx0011e1fywqbam2ej"},{"name":"通信协议","_id":"cjd8usypy0013e1fyhy7v3hpy"}]}}